<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jaxrscs-responses">
    <title>JAX-RS Method Responses</title>
    <para></para>
    
    <section id="jaxrscs-response-status-codes">
        <title>Status Codes
        <footnote><para>Hypertext Transfer Protocol -- HTTP/1.1
        <ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10">Response Codes</ulink></para></footnote>
        </title>
        
        <itemizedlist>
            <listitem><para>Success response codes: <code>200-399</code></para></listitem>
            <listitem><para>Error response codes: <code>400-599</code></para></listitem>
        </itemizedlist>
    </section>                       
        
    <section id="jaxrscs-response-builtin">
        <title>Built-in Response Code Handling</title>
        <itemizedlist>
            <listitem><para>Successful return; <code>200 OK</code></para></listitem>
            <listitem><para>Null return: <code>204 No Content</code></para></listitem>
            <listitem><para>Exception: <code>500 Internal Server Error</code></para></listitem>
        </itemizedlist>                   
<programlisting language="java"><![CDATA[
@Path("httpresponse")
public class HttpResponseDemoRS {
    
    @GET   
    @Produces(MediaType.TEXT_PLAIN)
    public String method(@QueryParam("action") int response) {
        switch (response) {
            case 200:
                return "";
            case 204:
                return null;
            case 500:
                throw new RuntimeException();
        }
                
        return null;
    }
]]></programlisting>
            <para>Service designed to return one of three types; non-null, null, and exception</para>

<programlisting language=""><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse?action=200 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 0
Server: Jetty(6.1.26)
]]></programlisting>
            <para>Non-null return value produces <code>200 OK</code> response</para>

<programlisting language=""><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse?action=204 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

HTTP/1.1 204 No Content
Server: Jetty(6.1.26)
]]></programlisting>
            <para>Null return value produces <code>204 No Content</code> response</para>

<programlisting language=""><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse?action=500 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 500 java.lang.RuntimeException
Content-Type: text/html; charset=iso-8859-1
Cache-Control: must-revalidate,no-cache,no-store
Content-Length: 7040
Server: Jetty(6.1.26)

...(stack trace)...
]]></programlisting>
            <para>Exception produces <code>500 Internal Server Error</code> response</para>
            <note>
                <para>In addition to the <code>500 Internal Server Error</code> status,
                the built-in response produces an ugly stack trace for the
                client to see your implementation details.
                </para>
            </note>                
                
<programlisting language=""><![CDATA[
PUT /jaxrs-resources-dmv-war6/httpresponse HTTP/1.1
Content-Length: 0
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 405 Method Not Allowed
Allow: GET, OPTIONS, HEAD
Content-Length: 0
Server: Jetty(6.1.26)

]]></programlisting>
            <para>Client issuing incorrect (PUT) method to valid URI produces <code>405 Method Not Allowed</code> response</para>

<programlisting language=""><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse HTTP/1.1
Accept: application/xml
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 406 No match for accept header
Content-Type: text/html; charset=iso-8859-1
Cache-Control: must-revalidate,no-cache,no-store
Content-Length: 1436
Server: Jetty(6.1.26)

...(stack trace)...
]]></programlisting>
            <para>Client requesting unsupported content type (application/xml) from a valid URI produces <code>406 No Match</code> response</para>
    </section>
    
    <section id="jaxrscs-response-complex">
        <title>Complex Responses</title>
        <subtitle>javax.ws.rs.core.Response</subtitle>
        <note>
            <para>This is really the only complete solution for building
                sane RESTful solutions beyond the entry-level hello-world
                case. Using built-in response marshaling is not complete
                enough to express all header types required in full deployment.
            </para>
        </note>
        <itemizedlist>
            <listitem><para>javax.ws.rs.core.Response return type holds</para>
                <itemizedlist>
                    <listitem><para>Status code</para></listitem>
                    <listitem><para>Entity to be marshaled</para></listitem>
                    <listitem><para>Headers for the response</para></listitem>
                </itemizedlist>                   
            </listitem>
            <listitem><para>Built by javax.ws.rs.core.Response.ResponseBuilder</para>
<programlisting language="java"><![CDATA[
public abstract class javax.ws.rs.core.Response$ResponseBuilder extends java.lang.Object{
    public abstract javax.ws.rs.core.Response build();
    public abstract javax.ws.rs.core.Response$ResponseBuilder clone();
    public abstract javax.ws.rs.core.Response$ResponseBuilder status(int);
    public javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$StatusType);
    public javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status);
    public abstract javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object);
    public abstract javax.ws.rs.core.Response$ResponseBuilder type(javax.ws.rs.core.MediaType);
    public abstract javax.ws.rs.core.Response$ResponseBuilder type(java.lang.String);
    public abstract javax.ws.rs.core.Response$ResponseBuilder variant(javax.ws.rs.core.Variant);
    public abstract javax.ws.rs.core.Response$ResponseBuilder variants(java.util.List);
    public abstract javax.ws.rs.core.Response$ResponseBuilder language(java.lang.String);
    public abstract javax.ws.rs.core.Response$ResponseBuilder language(java.util.Locale);
    public abstract javax.ws.rs.core.Response$ResponseBuilder location(java.net.URI);
    public abstract javax.ws.rs.core.Response$ResponseBuilder contentLocation(java.net.URI);
    public abstract javax.ws.rs.core.Response$ResponseBuilder tag(javax.ws.rs.core.EntityTag);
    public abstract javax.ws.rs.core.Response$ResponseBuilder tag(java.lang.String);
    public abstract javax.ws.rs.core.Response$ResponseBuilder lastModified(java.util.Date);
    public abstract javax.ws.rs.core.Response$ResponseBuilder cacheControl(javax.ws.rs.core.CacheControl);
    public abstract javax.ws.rs.core.Response$ResponseBuilder expires(java.util.Date);
    public abstract javax.ws.rs.core.Response$ResponseBuilder header(java.lang.String, java.lang.Object);
    public abstract javax.ws.rs.core.Response$ResponseBuilder cookie(javax.ws.rs.core.NewCookie[]);
}
]]></programlisting>
            </listitem>
            <listitem><para>Obtain ResponseBuilder thru static factory methods in Response class</para>
<programlisting language="java"><![CDATA[
public abstract class javax.ws.rs.core.Response extends java.lang.Object{
...
    public static javax.ws.rs.core.Response$ResponseBuilder fromResponse(javax.ws.rs.core.Response);
    public static javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$StatusType);
    public static javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status);
    public static javax.ws.rs.core.Response$ResponseBuilder status(int);
    public static javax.ws.rs.core.Response$ResponseBuilder ok();
    public static javax.ws.rs.core.Response$ResponseBuilder ok(java.lang.Object);
    public static javax.ws.rs.core.Response$ResponseBuilder ok(java.lang.Object, javax.ws.rs.core.MediaType);
    public static javax.ws.rs.core.Response$ResponseBuilder ok(java.lang.Object, java.lang.String);
    public static javax.ws.rs.core.Response$ResponseBuilder ok(java.lang.Object, javax.ws.rs.core.Variant);
    public static javax.ws.rs.core.Response$ResponseBuilder serverError();
    public static javax.ws.rs.core.Response$ResponseBuilder created(java.net.URI);
    public static javax.ws.rs.core.Response$ResponseBuilder noContent();
    public static javax.ws.rs.core.Response$ResponseBuilder notModified();
    public static javax.ws.rs.core.Response$ResponseBuilder notModified(javax.ws.rs.core.EntityTag);
    public static javax.ws.rs.core.Response$ResponseBuilder notModified(java.lang.String);
    public static javax.ws.rs.core.Response$ResponseBuilder seeOther(java.net.URI);
    public static javax.ws.rs.core.Response$ResponseBuilder temporaryRedirect(java.net.URI);
    public static javax.ws.rs.core.Response$ResponseBuilder notAcceptable(java.util.List);
]]></programlisting>
            </listitem>
        </itemizedlist>
        
        <section id="jaxrscs-responses-simple-custom">
            <title>Simple Custom Example</title>
<programlisting language="java"><![CDATA[
@Path("httpresponse")
public class HttpResponseDemoRS {

    @GET @Path("/custom")
    @Produces(MediaType.TEXT_PLAIN)
    public Response customResponse(@QueryParam("action") int response) {
        switch (response) {
        case 200:
            return Response.ok("").build();
        case 204:
            return Response.noContent().build();
        case 500:
            return Response.serverError().build();
        default:
            return Response.status(Response.Status.BAD_REQUEST).build();
        }
            
    }
]]></programlisting>
            <itemizedlist>
                <listitem><para>Four static ResponseBuilder factory methods used</para>
                    <itemizedlist>
                        <listitem><para>Response.ok()</para></listitem>
                        <listitem><para>Response.noContent()</para></listitem>
                        <listitem><para>Response.serverError()</para></listitem>
                        <listitem><para>Response.status()</para></listitem>
                    </itemizedlist>                   
                </listitem>
                <listitem><para>Only status code and entity returned</para></listitem>
                <listitem><para>No stack traces produced</para></listitem>
            </itemizedlist>                   

<programlisting><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse/custom?action=200 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 0
Server: Jetty(6.1.26)

]]></programlisting>
<programlisting><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse/custom?action=204 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 204 No Content
Server: Jetty(6.1.26)

]]></programlisting>
            <para>The success cases for <code>200 OK</code> and <code>204 No Content</code> are identical to built-in approach</para>


<programlisting><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse/custom?action=400 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 400 Bad Request
Content-Length: 0
Server: Jetty(6.1.26)

]]></programlisting>
            <para>With the more expressive API -- we can now be more precise about the cause of the error and return <code>400 Bad Request</code> when the client input is bad</para>

<programlisting><![CDATA[
GET /jaxrs-resources-dmv-war6/httpresponse/custom?action=500 HTTP/1.1
Host: dmv.ejava.info:9092
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 500 Internal Server Error
Content-Length: 0
Server: Jetty(6.1.26)

]]></programlisting>
            <para>With the more expressive API -- we can control the payload provided to client on <code>500 Internal Server Error</code></para>

<programlisting><![CDATA[
]]></programlisting>

<programlisting><![CDATA[
]]></programlisting>
        </section>
                   
    </section>
  
    
</chapter>  
  
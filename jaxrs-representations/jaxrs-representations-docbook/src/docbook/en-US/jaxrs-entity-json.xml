<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jaxrsrep-entity-json">
    <title>JAX-RS JSON Entity Handling</title>
    <itemizedlist>
        <listitem><para>Many JSON/Java libraries exist</para></listitem>
        <listitem><para>Jettison and Jackson JSON/Java libraries supported by RESTEasy</para></listitem>
    </itemizedlist>                   

    <warning>
        <para>JBoss 7.1.1 must be patched with RESTEasy 2.3.3.Final or later to 
        fully work with this topic as described when using CDI. 
        </para>
    </warning>

    <section id="jaxrsrep-jettison">
        <title>Jettison
        <footnote id="jettison-footnote"><para><ulink url="">http://jettison.codehaus.org/</ulink>Jettison Web Site</para></footnote>
        </title>
        <itemizedlist>
            <listitem><para>Collection of Java APIs which read and write JSON</para></listitem>
            <listitem><para>Developed for usage in XFire and CXF to enable JSON based services</para></listitem>
            <listitem><para>Integrates in with Java object serialization with XStream</para></listitem>
            <listitem><para>Two included conventions for mapping JSON to XML</para>
                <itemizedlist>
                    <listitem><para>BadgerFish -- implements the full XML infoset in JSON</para></listitem>
                    <listitem><para>Mapped -- manually map XML namespaces to JSON element prefixes</para></listitem>
                </itemizedlist>                   
            </listitem>
        </itemizedlist>                
    
        <section id="jaxrsrep-jettison-mapped">
            <title>Jettison Mapped</title>
            <itemizedlist>
                <listitem><para>An element with no characters or child elements is represented by { "element" : "" }</para></listitem>
                <listitem><para>No namespace declarations are ever written</para></listitem>
                <listitem><para>Multiple child elements of the same name represented by array</para>
                    <itemizedlist>
                        <listitem>
<programlisting language="xml"><![CDATA[
<ns4:person xmlns:ns2="http://dmv.ejava.info/drvlic/dap" xmlns:ns4="http://dmv.ejava.info/drvlic">
    <ns2:link rel="self"/>
    <ns2:link rel="center"/>
    <ns2:link rel="runningback"/>
    <ns2:link rel="receiver"/>
</ns4:person>

]]></programlisting>
                            <para>Repeated list as XML</para>
                        </listitem>
                        <listitem>
<programlisting language="json"><![CDATA[
{"drvlic.person":{
    "drvlic-dap.link":[
        {"@rel":"self"},{"@rel":"center"},{"@rel":"runningback"},{"@rel":"receiver"}
        ]}}
]]></programlisting>
                            <para>Repeated list as Jettison Mapped JSON</para>
                        </listitem>
                    </itemizedlist>                   
                </listitem>
            </itemizedlist>
            
            
            
                      
            
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<link xmlns="http://ejava.info" 
    href="http://dmv.ejava.info:9092/jaxrs-representations-dmv-war6/data/attributes" 
    rel="self" 
    type="application/xml"/>
]]></programlisting>
            <para>Sample XML with attributes</para>

<programlisting language="json"><![CDATA[
{"ejava.link":{
    "@href":"http:\/\/dmv.ejava.info:9092\/jaxrs-representations-dmv-war6\/data\/attributes",
    "@rel":"self",
    "@type":"application\/xml"}}
]]></programlisting>
            <para>Sample attributes as Jettison Mapped JSON</para>


<programlisting language="java"><![CDATA[
import org.jboss.resteasy.annotations.providers.jaxb.json.Mapped;
import org.jboss.resteasy.annotations.providers.jaxb.json.XmlNsMap;

...
@PUT @Path("attributes")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Mapped(namespaceMap = {
    @XmlNsMap(namespace = "http://ejava.info", jsonName = "ejava")
})    
public Response putLinkJSON(
        @Mapped(namespaceMap = {@XmlNsMap(namespace = "http://ejava.info", jsonName = "ejava")}) Link link) 
        throws JSONException, XMLStreamException, JAXBException {

]]></programlisting>
            <itemizedlist>
                <listitem><para>Example RESTEasy Jettison Mapped extension to map/marshal the above</para></listitem>
                <listitem><para>Annotations on both the input parameter and method/response are required since they are independent</para></listitem>
                <listitem><para></para></listitem>
            </itemizedlist>                   

            

            
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:contactInfo xmlns:ns2="http://dmv.ejava.info/drvlic">
    <street>328 Chauncey Street</street>
    <city>Brooklyn</city>
    <state>NY</state>
</ns2:contactInfo>
]]></programlisting>
            <para>Sample XML elements</para>

<programlisting language="json"><![CDATA[
{"drvlic.contactInfo":{
    "street":"328 Chauncey Street",
    "city":"Brooklyn",
    "state":"NY"}}
]]></programlisting>
            <para>Sample elements marshalled as Jettison Mapped JSON</para>

<programlisting language="java"><![CDATA[
@Mapped(namespaceMap = {
    @XmlNsMap(namespace = "http://dmv.ejava.info/drvlic", jsonName = "drvlic")
})    
]]></programlisting>
            <para>Example RESTEasy Jettison Mapped extension to map/marshal the above</para>


<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns4:person xmlns:ns2="http://dmv.ejava.info/drvlic/dap" xmlns:ns3="http://ejava.info" xmlns:ns4="http://dmv.ejava.info/drvlic">
    <id>0</id>
    <firstName>Peyton</firstName>
    <lastName>Manning</lastName>
    <contacts>
        <contact>
            <type>OTHER</type>
            <street>6325 N. Guilford; Suite 201</street>
            <city>Indianapolis</city>
            <state>IN</state>
        </contact>
        <contact>
            <type>WORK</type>
            <city>Denver</city>
            <state>CO</state>
        </contact>
    </contacts>
</ns4:person>
]]></programlisting>
            <para>Sample XML structure with repeated/wrapped list</para>

<programlisting language="json"><![CDATA[
{"drvlic.person":{"id":0,"firstName":"Peyton","lastName":"Manning",
    "contacts":{"contact":[
            {"type":"OTHER","street":"6325 N. Guilford; Suite 201","city":"Indianapolis","state":"IN"},
            {"type":"WORK","city":"Denver","state":"CO"}
            ]}}}
]]></programlisting>
            <para>Sample structure as Jettison Mapped JSON</para>

        </section>

            <section id="jaxrsrep-jettison-mapped-api">
                <title>Jettison Mapped API</title>
<programlisting language="java"><![CDATA[
public String marshalMappedJSON(Object jaxbObject, 
        MappedNamespaceConvention mapping, Class<?>...clazzes) 
        throws JAXBException {
        //configure a JAXBContext to handle the object
    JAXBContext ctx = getJAXBContext(jaxbObject.getClass(), clazzes);
    
        //configure a stream to write the JSON
    StringWriter writer = new StringWriter();
    XMLStreamWriter xmlStreamWriter = new MappedXMLStreamWriter(mapping, writer);

        //marshall the JAXB object to a JSON String
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.marshal(jaxbObject, xmlStreamWriter);
    return writer.toString();
}

]]></programlisting>
                <para>Marshal a JAXB object to as JSON string</para>

<programlisting language="java"><![CDATA[
@SuppressWarnings("unchecked")
public <T> T demarshalMappedJSON(Class<T> type, String jsonString, 
        MappedNamespaceConvention mapping, Class<?>...clazzes) 
        throws JAXBException, JSONException, XMLStreamException {
        //configure a JAXBContext to handle the object
    JAXBContext ctx = getJAXBContext(type, clazzes);
    
        //configure a stream to read the JSON
    JSONObject obj = new JSONObject(jsonString);
    XMLStreamReader xmlStreamReader = new MappedXMLStreamReader(obj, mapping);
    
        //demarshall the stream into a JAXB object
    Unmarshaller unmarshaller = ctx.createUnmarshaller();
    return (T)unmarshaller.unmarshal(xmlStreamReader);
}

]]></programlisting>
                <para>Demarshal a JSON string into a JAXB object</para>

<programlisting language="java"><![CDATA[
protected MappedNamespaceConvention getJSONMapping(Annotation[] methodAnnotations) {
    Configuration config = new Configuration();
    Map<String, String> xmlToJsonNamespaces = new HashMap<String,String>();
    for (Annotation annotation: methodAnnotations) {
        log.debug("annotation={}", annotation);
        if (annotation.annotationType().equals(Mapped.class)) {
            for (XmlNsMap map: ((Mapped)annotation).namespaceMap()) {
                xmlToJsonNamespaces.put(map.namespace(), map.jsonName());
            }
        }
    }
    config.setXmlToJsonNamespaces(xmlToJsonNamespaces);
    MappedNamespaceConvention con = new MappedNamespaceConvention(config);
    return con;
}
]]></programlisting>
                <para>Server-side helper method to create a Jettison mapping between JAXB and JSON namespaces</para>

<programlisting language="java"><![CDATA[
protected MappedNamespaceConvention getJSONMapping() {
    Configuration config = new Configuration();
    Map<String, String> xmlToJsonNamespaces = new HashMap<String,String>();
    xmlToJsonNamespaces.put("http://ejava.info", "ejava");
    xmlToJsonNamespaces.put("http://dmv.ejava.info", "dmv");
    xmlToJsonNamespaces.put("http://dmv.ejava.info/dap", "dmv-dap");
    xmlToJsonNamespaces.put("http://dmv.ejava.info/drvlic", "drvlic");
    xmlToJsonNamespaces.put("http://dmv.ejava.info/drvlic/dap", "drvlic-dap");
    config.setXmlToJsonNamespaces(xmlToJsonNamespaces);
    MappedNamespaceConvention con = new MappedNamespaceConvention(config);
    return con;
}
]]></programlisting>
                <para>Client helper method to create a Jettison mapping between JAXB and JSON namespaces</para>


<programlisting language="java"><![CDATA[
@Context protected Providers providers; //won't be injected in client

    protected <T> JAXBContext getJAXBContext(Class<T> type, Class<?>...clazzes)
            throws JAXBException {
        JAXBContext ctx = null;
        if (providers != null) {
            ContextResolver<JAXBContext> resolver = 
                providers.getContextResolver(JAXBContext.class, MediaType.WILDCARD_TYPE);
            if (resolver != null) {
                //try to locate a cached JAXB Context
                ctx = resolver.getContext(type);
            }
        }
        if (ctx == null) {
                //none found -- create what we need here
            Class<?>[] classes = new Class<?>[clazzes.length+1];
            classes[0]=type;
            for (int i=0;i<clazzes.length; i++) {
                classes[i+1]=clazzes[i];
            }
            ctx = JAXBContext.newInstance(classes);
        }
        return ctx;        
    }
]]></programlisting>
                <para>Helper method to create a JAXBContext suitable for marshaling/demarshaling the specified classes</para>
                
                
<programlisting language="java"><![CDATA[
@PUT @Path("attributes")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Mapped(namespaceMap = {
    @XmlNsMap(namespace = "http://ejava.info", jsonName = "ejava")
})   
@NoEJavaJettison
public Response putLinkJSON(
        @Mapped(namespaceMap = {@XmlNsMap(namespace = "http://ejava.info", jsonName = "ejava")}) Link link) 
        throws JSONException, XMLStreamException, JAXBException {
    link.setHref(uriInfo.getRequestUri());
    link.setType(MediaType.APPLICATION_JSON);
    return Response.ok(link, MediaType.APPLICATION_JSON).build();
}
]]></programlisting>
                <para>Example resource method use of the JSON marshal and demarshal methods</para>
                
                
<programlisting language="java"><![CDATA[
public <T> T put(Class<T> responseType, URI uri, Object jaxbObject) {
        //setup the Header and URI
    HttpPut put = new HttpPut(uri);
    put.setHeader("Content-Type", MediaType.APPLICATION_JSON);
    put.setHeader("Accept", MediaType.APPLICATION_JSON);
    
        //setup the entity
    String jsonString = marshalMappedJSON(jaxbObject);
    put.setEntity(new StringEntity(jsonString));
    
        //make the call
    HttpResponse response = httpClient.execute(put);
    try {
        assertEquals("unexpected status", 200, response.getStatusLine().getStatusCode());
        String jsonString = EntityUtils.toString(response.getEntity(), "UTF-8");
        return demarshalMappedJSON(responseType, jsonString);
    } finally {
        EntityUtils.consume(response.getEntity());
    }
}
]]></programlisting>
                <para>Example HttpClient use of the JSON marshal and demarshal methods</para>
            </section>
        
        
        
        <section id="jaxrsrep-jettison-badgerfish">
            <title>Jettison Bagerfish
                <footnote id="badgerfish-footnote"><para><ulink url="http://badgerfish.ning.com/">BadgerFish Web Site</ulink></para></footnote>
            </title>
            <itemizedlist>
                <listitem><para>Convention for translating an XML document into a JSON object</para></listitem>
                <listitem><para>Element names become object properties</para></listitem>
                <listitem><para>Text content of elements goes in the $ property of an object</para>
<programlisting language="xml"><![CDATA[
<street>328 Chauncey Street</street>
]]></programlisting>
<programlisting language="json"><![CDATA[
{"street":{"$":"328 Chauncey Street"}}
]]></programlisting>
                </listitem>
                <listitem><para>Attributes go in properties whose names begin with @</para>
<programlisting language="xml"><![CDATA[
<link
    href="http://dmv.ejava.info:9092/jaxrs-representations-dmv-war6/data/attributes" 
    rel="self" 
    type="application/xml"/>
]]></programlisting>
<programlisting language="json"><![CDATA[
{"link":{
    "@href":"http:\/\/dmv.ejava.info:9092\/jaxrs-representations-dmv-war6\/data\/attributes",
    "@rel":"self",
    "@type":"application\/xml"}}
]]></programlisting>
                </listitem>
                <listitem><para>Multiple elements at the same level become array elements</para>
<programlisting language="xml"><![CDATA[
<person>
    <link rel="self"/>
    <link rel="center"/>
    <link rel="runningback"/>
    <link rel="receiver"/>
</person>
]]></programlisting>
                    <para>Example repeated elements as XML</para>
<programlisting language="json"><![CDATA[
{"person":
    "link":[{"@rel":"self"},{"@rel":"center"},{"@rel":"runningback"},{"@rel":"receiver"}]}}
]]></programlisting>
                    <para>Example repeated elements as BadgerFish JSON]</para>
                </listitem>
                <listitem><para>Active namespaces for an element go in the element's @xmlns property</para></listitem>
                <listitem><para>The default namespace URI goes in @xmlns.$</para>
<programlisting language="xml"><![CDATA[
<contactInfo xmlns="http://dmv.ejava.info/drvlic">
    <street>328 Chauncey Street</street>
    <city>Brooklyn</city>
    <state>NY</state>
</contactInfo>
]]></programlisting>
                    <para>Sample XML elements with namespace</para>
<programlisting language="json"><![CDATA[
{"contactInfo":{"@xmlns":{$:"http:\/\/dmv.ejava.info\/drvlic"},
    "street":{"$":"328 Chauncey Street"},
    "city":{"$":"Brooklyn"},
    "state":{"$":"NY"}}}
]]></programlisting>
                    <para>Sample elements with namespace marshalled as BadgerFish JSON</para>
                </listitem>
                <listitem><para>Other namespaces go in other properties of @xmlns</para>
<programlisting language="xml"><![CDATA[
<ns4:person xmlns:ns2="http://dmv.ejava.info/drvlic/dap" 
            xmlns:ns3="http://ejava.info" 
            xmlns:ns4="http://dmv.ejava.info/drvlic">
    <ns2:link rel="self"/>
    <ns2:link rel="center"/>
    <ns2:link rel="runningback"/>
    <ns2:link rel="receiver"/>
    <id>0</id>
    <firstName>Peyton</firstName>
    <lastName>Manning</lastName>
    <contacts/>
</ns4:person>
]]></programlisting>
                    <para>Sample XML with multiple namespaces</para>
<programlisting language="json"><![CDATA[
{"ns4:person":{"@xmlns":{"ns4":"http:\/\/dmv.ejava.info\/drvlic","ns3":"http:\/\/ejava.info","ns2":"http:\/\/dmv.ejava.info\/drvlic\/dap"},
    "ns2:link":[{"@rel":"self"},{"@rel":"center"},{"@rel":"runningback"},{"@rel":"receiver"}],
    "id":{"$":"0"},"firstName":{"$":"Peyton"},"lastName":{"$":"Manning"},
    "contacts":{}}}
]]></programlisting>
                    <para>Sample BadgerFish JSON with multiple namespaces</para>
                </listitem>
                <listitem><para></para></listitem>
            </itemizedlist>                   

<programlisting language="java"><![CDATA[
@PUT @Path("...")
@Produces(MediaType.APPLICATION_JSON)
@BadgerFish
public Response putLink(@BadgerFish Link link) {
]]></programlisting>
            <para>RESTEasy Extension for marshaling Jettison JSON using BadgerFish</para>
                     
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<link xmlns="http://ejava.info" 
    href="http://dmv.ejava.info:9092/jaxrs-representations-dmv-war6/data/attributes" 
    rel="self" 
    type="application/xml"/>
]]></programlisting>
            <para>Sample XML attributes with namespace</para>
<programlisting language="json"><![CDATA[
{"link":{"@xmlns":{"$":"http:\/\/ejava.info"},
        "@href":"http:\/\/dmv.ejava.info:9092\/jaxrs-representations-dmv-war6\/data\/attributes",
        "@rel":"self",
        "@type":"application\/xml"}}
]]></programlisting>
            <para>Sample BadgerFish JSON with namespace</para>
            
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:contactInfo xmlns:ns2="http://dmv.ejava.info/drvlic">
    <street>328 Chauncey Street</street>
    <city>Brooklyn</city>
    <state>NY</state>
</ns2:contactInfo>
]]></programlisting>
            <para>Sample XML elements with namespace</para>

<programlisting language="json"><![CDATA[
{"ns2:contactInfo":{"@xmlns":{"ns2":"http:\/\/dmv.ejava.info\/drvlic"},
    "street":{"$":"328 Chauncey Street"},
    "city":{"$":"Brooklyn"},
    "state":{"$":"NY"}}}
]]></programlisting>
            <para>Sample BadgerFish JSON with namespace</para>

<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns4:person xmlns:ns2="http://dmv.ejava.info/drvlic/dap" xmlns:ns3="http://ejava.info" xmlns:ns4="http://dmv.ejava.info/drvlic">
    <id>0</id>
    <firstName>Peyton</firstName>
    <lastName>Manning</lastName>
    <contacts>
        <contact>
            <type>OTHER</type>
            <street>6325 N. Guilford; Suite 201</street>
            <city>Indianapolis</city>
            <state>IN</state>
        </contact>
        <contact>
            <type>WORK</type>
            <city>Denver</city>
            <state>CO</state>
        </contact>
    </contacts>
</ns4:person>
]]></programlisting>
            <para>Sample XML with repeated/wrapped elements</para>

<programlisting language="json"><![CDATA[
{"ns4:person":{"@xmlns":{
    "ns4":"http:\/\/dmv.ejava.info\/drvlic",
    "ns3":"http:\/\/ejava.info",
    "ns2":"http:\/\/dmv.ejava.info\/drvlic\/dap"},
    "id":{"$":"0"},
    "firstName":{"$":"Peyton"},
    "lastName":{"$":"Manning"},
    "contacts":{"contact":[
        {"type":{"$":"OTHER"},"street":{"$":"6325 N. Guilford; Suite 201"},"city":{"$":"Indianapolis"},"state":{"$":"IN"}},
        {"type":{"$":"WORK"},"city":{"$":"Denver"},"state":{"$":"CO"}}]}}}
]]></programlisting>
            <para>Sample BadgerFish with repeated/wrapped elements</para>
        </section>
           
            <section id="jaxrsrep-jettison-badgerfish-api">
                <title>Jettison BadgerFish API</title>
<programlisting language="java"><![CDATA[
public String marshalBadgerFishJSON(Object jaxbObject, Class<?>...clazzes) 
        throws JAXBException {
        //configure a JAXBContext to handle the object
    JAXBContext ctx = getJAXBContext(jaxbObject.getClass(), clazzes);

    //configure a stream to write the JSON
    StringWriter writer = new StringWriter();
    XMLStreamWriter xmlStreamWriter = new BadgerFishXMLStreamWriter(writer);

    //marshall the JAXB object to a JSON String
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.marshal(jaxbObject, xmlStreamWriter);
    return writer.toString();
}
]]></programlisting>
                <para>Marshal a JAXB object to as a BadgerFish JSON string</para>

<programlisting language="java"><![CDATA[
@SuppressWarnings("unchecked")
public <T> T demarshalBadgerFishJSON(Class<T> type, String jsonString, Class<?>...clazzes) 
        throws JAXBException, JSONException, XMLStreamException {
        //configure a JAXBContext to handle the object
    JAXBContext ctx = getJAXBContext(type, clazzes);

        //configure a stream to read the JSON
    JSONObject obj = new JSONObject(jsonString);
    XMLStreamReader xmlStreamReader = new BadgerFishXMLStreamReader(obj);
    
        //demarshall the stream into a JAXB object
    Unmarshaller unmarshaller = ctx.createUnmarshaller();
    return (T)unmarshaller.unmarshal(xmlStreamReader);
}
]]></programlisting>
                <para>Demarshal a BadgerFish JSON string into a JAXB object</para>


<programlisting language="java"><![CDATA[
@PUT @Path("attributes/badgerfish")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@BadgerFish
public Response putJSONLinkBadgerfish(
        @BadgerFish Link link) 
        throws JAXBException, JSONException, XMLStreamException {
    link.setHref(uriInfo.getRequestUri());
    link.setType(MediaType.APPLICATION_JSON);
    return Response.ok(link, MediaType.APPLICATION_JSON).build();
}
]]></programlisting>
                <para>Example resource method use of the BadgerFish JSON marshal and demarshal methods</para>


                
<programlisting language="java"><![CDATA[
public <T> T put(Class<T> responseType, URI uri, Object jaxbObject) {
        //setup the Header and URI
    HttpPut put = new HttpPut(uri);
    put.setHeader("Content-Type", MediaType.APPLICATION_JSON);
    put.setHeader("Accept", MediaType.APPLICATION_JSON);
    
        //setup the entity
    String jsonString = marshalBadgerFishJSON(jaxbObject);
    put.setEntity(new StringEntity(jsonString));
    
        //make the call
    HttpResponse response = httpClient.execute(put);
    try {
        assertEquals("unexpected status", 200, response.getStatusLine().getStatusCode());
        String jsonString = EntityUtils.toString(response.getEntity(), "UTF-8");
        return demarshalBadgerFishJSON(responseType, jsonString);
    } finally {
        EntityUtils.consume(response.getEntity());
    }
}
]]></programlisting>
                <para>Example HttpClient use of the BadgerFish JSON marshal and demarshal methods</para>
            </section>

    </section>
    
    <section id="jaxrsrep-jackson">
        <title>Jackson Java JSON Processor
        <footnote id="jackson-footnoot"><para><ulink url="http://jackson.codehaus.org/"></ulink>Jackson JSON Processor Web Site</para></footnote>
        </title>
        <itemizedlist>
            <listitem><para>An alternate JSON Java library</para></listitem>
            <listitem><para>Does not require JAXB support</para></listitem>
        </itemizedlist>                   
    </section>

    
</chapter>  
  
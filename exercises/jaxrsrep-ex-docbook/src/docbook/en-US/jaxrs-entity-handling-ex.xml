<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jaxrsrep-ex-entity-handling">
    <title>JAX-RS EntityHandling Exercise</title>
    <para>During this portion of the exercise, you will be given a working 
        project, solution (DataAccessSolutionRS), and test case 
        (DataAccessTest and DataAccessIT). To begin, you will switch from
        the solution to the exercise copy (DataAccessRS), @Ignore a few 
        test cases you are not ready to deal with, and work their the 
        problem sets.</para>
    
    
    <section id="jaxrsrep-ex-entity-handling-setup">
        <title>JAX-RS Entity Handling Setup</title>
        <orderedlist>
            <listitem><para>Verify the exercise project works before you start</para>
<programlisting language=""><![CDATA[
$ cd exercises/jaxrsrep-ex-war6
$ mvn clean install
...
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
]]></programlisting>        
            </listitem>
            <listitem><para>Import the project into Eclipse as an Existing Maven Project</para></listitem>
            <listitem><para>Deploy the application to JBoss. You should have a launch 
                configuration already stored to do the following.</para>
<programlisting language=""><![CDATA[
$ mvn clean integration-test -DskipTests
...
//server.log
02:05:07,537 JBAS018210: Registering web context: /jaxrsrep-ex-war6
02:05:07,557 JBAS018559: Deployed "jaxrsrep-ex-war6.war"
]]></programlisting>        
            </listitem>
            <listitem><para>Run all unit and IT tests. This should also work</para></listitem>
            <listitem><para>In DataAccessTest.java, change from the solution
                to the exercise by changing the following property from true
                to false.</para>
<programlisting language="java"><![CDATA[
protected boolean useSolution=true; //TODO: 1) Change me to false to start
]]></programlisting>        
            </listitem>

            <listitem><para>Re-run the unit tests. You should get 1 pass, and 3 
                failures.</para></listitem>
        </orderedlist>
    </section>                
                
    <section id="jaxrsrep-ex-entity-handling-file">
        <title>File Input</title>
        <orderedlist>
            <listitem><para>Open DataAccessRS.java. The existing resource
                method implements our calc function using buffered byte arrays.
                Most of the processing is delegated to a process() function you
                will reuse in your other implementations.
                </para>
<programlisting language="java"><![CDATA[
@Path("calcBuffered")
@POST
@Consumes(MediaType.APPLICATION_OCTET_STREAM)
@Produces(MediaType.APPLICATION_OCTET_STREAM)
public Response calcResultsBuffered(
        //all inputs have been buffered into this temporary file
        byte[] input) throws IOException {
    log.info("called: {} {}", request.getMethod(), uriInfo.getRequestUri());

        //process all inputs and build a buffer of results
    InputStream is = new ByteArrayInputStream(input);
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    process(is, os).close();
    String result = os.toString();
    
        //return result
    return Response.ok(result, MediaType.APPLICATION_OCTET_STREAM)
            .build();
}
]]></programlisting>        
            </listitem>

            <listitem><para>Use the provided calcBuffered2 template and the process() 
                function to change the buffered input from a byte[] to a File.
                Remember that you must delete the file before exiting</para>
<programlisting language="java"><![CDATA[
    @Path("calcBuffered2")
    @POST
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    public Response calcResultsBuffered2(
            //all inputs have been buffered into this temporary file
            File input) throws IOException {
        
        return null;
    }
]]></programlisting>        
            </listitem>
            <listitem><para>After implementing the method details for a file,
                re-run the unit tests. You show get 4 tests run with 2 failures
                </para></listitem>
        </orderedlist>
    </section>                
                
    <section id="jaxrsrep-ex-entity-handling-inputstream">
        <title>InputStream</title>
        <orderedlist>
            <listitem><para>Use the provided calcStream template and the 
                process() function to change the buffered byte[] or File input
                to an InputStream. Write the data out to the HttpServletResponse
                OutputStream. This must be injected</para>
<programlisting language="java"><![CDATA[
    @Path("calcStreamed")
    @POST
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    public Response calcResultsStream(
            //all inputs can be streamed into the method from this source
            final InputStream is, 
            //all outputs can be streamed to the response object
            @Context HttpServletResponse httpResponse) 
            throws IOException {

        return null;
    }
]]></programlisting>        
            </listitem>
            <listitem><para>After implementing the method details for an InputStream,
                re-run the unit tests. You show get 4 tests run with 1 failure1
                </para></listitem>
        </orderedlist>
    </section>                
                
    <section id="jaxrsrep-ex-entity-handling-streamingoutput">
        <title>StreamingOutput</title>
        <orderedlist>
            <listitem><para>Use the provided calcStream2 template and the 
                process() function to change the streamed output from an 
                HttpServletResponse to a returned StreamingOutput object.</para>
<programlisting language="java"><![CDATA[
@Path("calcStreamed2")
@POST
@Consumes(MediaType.APPLICATION_OCTET_STREAM)
@Produces(MediaType.APPLICATION_OCTET_STREAM)
public Response calcResultsStream2(
        //all input data will be read from this stream
        final InputStream is) throws IOException {
    log.info("called: {} {}", request.getMethod(), uriInfo.getRequestUri());

    StreamingOutput stream = new StreamingOutput() {
        @Override
        public void write(OutputStream os) throws IOException,
                WebApplicationException {
            //process the data and write result to os
        }
    };
    
    return null;
}
]]></programlisting>        
            </listitem>
            <listitem><para>After implementing the method details for an InputStream,
                re-run the unit tests. You show get 4 tests run with 0 failures
                </para></listitem>
        </orderedlist>
            <note>
                <para>Notice the difference in output between the buffered
                and streaming cases. The periods (".") written to standard out
                all get written first from the resource method and then the 
                equals ("=") character gets written by the client in the buffered
                cases. For the streamed cases, the input and output is more multiplexed
                so that outputs are not waiting for inputs to complete. 
                </para>
            </note>
    </section>

    <section id="jaxrsrep-ex-entity-handling-it">
        <title>Integration Tests</title>
        <para>There is already a DataAccessIT.java integration test 
           in place. Test your updated resource method implementations
           deployed to JBoss.</para>
        <orderedlist>
            <listitem><para>Deploy the application to JBoss</para>
<programlisting language="java"><![CDATA[
$ mvn clean integration-test -DskipTests
]]></programlisting>        
            </listitem>
            <listitem><para>Re-run the unit and IT tests from within Eclipse.
                They should all pass.</para>
            </listitem>
            <listitem><para>Re-run the tests at the command line. All should 
                pass and install into the repository</para>
<programlisting language=""><![CDATA[
$ mvn clean install
]]></programlisting>        
            </listitem>
        </orderedlist>
    </section>    
</chapter>  
  
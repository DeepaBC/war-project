<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Development Environment Setup</title>
    <abstract>
        <para>This document contains the setup instructions for downloading 
           and setting up the various applications, tools, and libraries used
           in class.
        </para> 
    </abstract>
  </bookinfo>
  
  <toc/> 
  
  <chapter id="end-to-end-environment">
    <title>Enterprise Java Development Environment</title>
    <para>these are all the pieces...</para>
    <figure>
        <title>Enterprise Java Development</title>
        <graphic scalefit="1" fileref="images/development-env.jpg"/>
    </figure>        
  </chapter>
  
  <chapter id="java-jdk-setup">
    <title>Java JDK Setup</title>
    <para>You will need a copy of the Java 6 SDK installed. The Java 7 JDK
    is available but I have not yet tried it. </para>
    <itemizedlist>
        <listitem><para>Linux Users: Alternate JDKs (e.g., OpenJDK) available
            from your package manager will work fine for class.</para>
        </listitem>
        <listitem><para>Windows Users: Install the Java 6 JDK from Sun/Oracle</para>
            <orderedlist>
                <note><para>Keep the 32/64-bit choice consistent with what you 
                download later for Eclipse.</para></note>
                <listitem><para>Download a copy of the Java 6 JDK 
                <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</ulink>.
                Choose Java SE 6 Update XX JDK. We will only be using the 
                JDK portion in class so avoid the alternate downloads that add in the
                Glassfish JavaEE Application Server and NetBeans. We will be 
                using JBoss and Eclipse.</para>                
                </listitem>
                <listitem><para>Install the JDK and associated JRE in a 
                directory that does not have spaces in its path.</para></listitem>
            </orderedlist>
        </listitem>
    </itemizedlist>
    <para>Verify your JDK is installed</para>
    <programlisting><![CDATA[
$ java -version
java version "1.6.0_20"
OpenJDK Runtime Environment (IcedTea6 1.9.13) (6b20-1.9.13-0ubuntu1~10.04.1)
OpenJDK Client VM (build 19.0-b09, mixed mode, sharing)
user@ubuntu:~$ javac -version
javac 1.6.0_20
]]></programlisting>           
  </chapter>
  
  <chapter id="git-client-setup">
    <title>Git Client Setup</title>
    <para>You will use Git in this class to perform an initial checkout and
    get updates for source files. Any Git client should be able to perform that
    function. You can determine if you have a command line Git client already 
    installed using the following simple command.
    </para>
    <figure>
        <title>Git Configuration</title>
        <graphic scalefit="1" fileref="images/devenv-git.jpg"/>
    </figure>        
    <programlisting><![CDATA[
//my ubuntu system
$ git --version
git version 1.7.0.4

//my win7/msysGit system
$ git --version
git version 1.7.5.GIT
]]></programlisting>           

        <section id="install-git-client">
            <title>Install Git Client</title>
            <para>There are a number of options and some
            are going to be based on on your platform. Your basic options
            include command line or using an Eclipse plugin</para>
            <itemizedlist>
                <listitem><para>Linux Command-Line Users: Either go to your 
                package installer or google the web to locate a suitable rpm
                for your system. Select git-core, gitk, and git-gui packages.</para>
                </listitem>
                <listitem><para>Cygwin Command-Line Users: Use the cygwin setup tool to locate
                the git packages</para></listitem>
                <listitem><para>Windows Command-Line Users: Git comes in a core 
                layer and then OS-layer add-ons. The core layer is sufficient for class
                and can be found at <ulink url="http://msysgit.github.com/">http://msysgit.github.com/</ulink></para>
                    <orderedlist>
                        <listitem><para>Download <ulink url="http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git">Full Installer</ulink></para></listitem>
                        <listitem><para>Accept the default installation option of 
                        "Use Git Bash bash only". As the prompt states, it has 
                        the least risk and will be suitable for the minor 
                        amount of use required in class.</para></listitem>
                        <listitem><para>Chose your checkout style. Don't 
                        worry about commit style you will only be performing 
                        read-only checkouts. I chose "Checkout as-is, 
                        commit Unix-style line endings" since I used all 
                        linux-style editors on Windows. You may want the 
                        Window checkout format.</para></listitem>
                        <listitem><para>Click on the "Git Bash" icon after 
                        the installation is complete.</para></listitem>
                    </orderedlist>
                </listitem>
                <listitem><para>Eclipse GUI Users: There is a git plugin for 
                Eclipse available called EGit. You can install it by going to 
                <code>Help->Eclipse Marketplace</code>, typing Git in the search 
                field, and clicking Install for EGit.</para></listitem>
            </itemizedlist>
        </section>    
        
        <section id="get-git-repo">
            <title>Get Class Repository</title>
            <para>The class repository is located on ejava.info and can be browsed 
            using the following http URL
            <ulink url="http://ejava.info/gitweb/ejava-ws">http://ejava.info/gitweb/ejava-ws</ulink>.
            With a cloned copy, you can receive file updates during the semester.
            </para>
            <orderedlist>
                <listitem><para>CD to a directory you wish to place source code.
                    Make sure the path to this directory contains no spaces.</para>
                </listitem>
                <listitem><para>Clone the class repository using the following
                URL <ulink url="http://ejava.info/git/ejava-ws">http://ejava.info/git/ejava-ws</ulink>
                </para>
    <programlisting><![CDATA[
git clone http://ejava.info/git/ejava-ws
Initialized empty Git repository in /home/user/proj/ejava-ws/.git/

$ ls ejava-ws/
coursedocs  ejava-archetype  ejava-build  ejava-common  hello-rs  issues  pom.xml  prototypes  restintro

$ cd ejava-ws
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/develop
  remotes/origin/master
]]></programlisting>                          
                </listitem>
                <listitem><para>Perform a mock update. This is what you will
                    be doing several times this semester to get file updates.</para>
    <programlisting><![CDATA[
$ git pull
Already up-to-date.
]]></programlisting>                          
        <note>
            <para>There are some experimental modules still in the baseline.
            All modules relevant to class are wired into the build and will 
            be compiled during the next section. Please ignore these extra modules
            as it helps me keep related things centralized.</para>
        </note>
                </listitem>
            </orderedlist>
        </section>
  </chapter>
  
  <chapter id="maven-env-setup">
    <title>Maven Environment Setup</title>
        <para></para>
        
        <section id="maven-core-setup">
            <title>Maven Core Setup</title>
            <para></para>
            <orderedlist>
                <listitem><para>Download Maven 3
                    <ulink url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink></para>
                </listitem>
                <listitem><para>Unzip the contents into a directory with 
                no spaces in its path.</para>
    <programlisting><![CDATA[
$ ls apache-maven-3.0.4/
bin  boot  conf  lib  LICENSE.txt  NOTICE.txt  README.txt
]]></programlisting>                          
                </listitem>
                <listitem><para>Add an environment variable for MAVEN_HOME and
                add MAVEN_HOME/bin to your PATH</para>
    <programlisting><![CDATA[
//my linux system -- should be done in .bashrc
export MAVEN_HOME=/opt/apache-maven-3.0.4
export PATH=$MAVEN_HOME/bin:$PATH

//my windows system -- should be done in Advanced System Settings->Environment Variables
set PATH=%MAVEN_HOME%\bin;%PATH%
]]></programlisting>
                </listitem>
                <listitem><para>Verify maven is installed and in the path</para>
    <programlisting><![CDATA[
$ mvn --version
Apache Maven 3.0.4 (r1232337; 2012-01-17 00:44:56-0800)
Maven home: /opt/apache-maven-3.0.4
Java version: 1.6.0_20, vendor: Sun Microsystems Inc.
Java home: /usr/lib/jvm/java-6-openjdk/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "2.6.32-40-generic", arch: "i386", family: "unix"    
]]></programlisting>
                </listitem>
                
                <listitem><para>Add a skeletal settings.xml file that will be used
                    to provide local overrides for the build. This is the place
                    where you can tell the build where you have installed 
                    packages, addresses servers are listening to, etc.</para>
                    <orderedlist>
                        <listitem><para>Add the following to the <code>.m2/settings.xml</code> file
                            in your HOME directory to enable use of the proxy</para>
                    <programlisting language="xml"><![CDATA[
<?xml version="1.0"?>
<settings xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <offline>false</offline>
    
    <profiles>
    </profiles>
    
    <activeProfiles>
    </activeProfiles>
</settings>    
]]></programlisting>                        
                        </listitem>
                        <listitem><para>You can test whether your settings.xml 
                            file is seen by Maven by temporarily making it an
                            invalid XML file and verifying that the next Maven
                            build command fails with a parsing error.</para>
                    <programlisting><![CDATA[
$ mvn clean
[ERROR] Error executing Maven.
[ERROR] 1 problem was encountered while building the effective settings
[FATAL] Non-parseable settings /home/user/.m2/settings.xml: only whitespace content allowed before start tag and not s (position: START_DOCUMENT seen <?xml version="1.0"?>\ns... @2:2)  @ /home/user/.m2/settings.xml, line 2, column 2
]]></programlisting>                        
                        </listitem>
                    </orderedlist>
                </listitem>                          
            </orderedlist>            
        </section>

        <section id="maven-proxy-setup">
            <title>Maven Proxy Setup</title>
            <para>In the previous section we installed and setup Maven
                in a stand-alone client mode. In that mode the individual 
                environment communicated directly with the external Internet
                organizations to obtain missing artifacts. In this section
                we will add a proxy server between the developer and the
                Internet so that one or more developers can share what has
                already been downloaded and be completely isolated from 
                network and remote outages. Ideally this proxy would be placed
                on a shared server somewhere on your local intranet with
                access to the outside Internet. The instructions will act
                as though you are installing it locally. It is your decision
                whether to use it and where to install it. If you do not 
                install and configure a proxy -- you will notice small delays
                in your builds while your local maven client checks Internet 
                sources for new artifacts and updates to existing artifacts.
             </para>
            <figure>
                <title>Maven Proxied and Non-Proxied Configuration</title>
                <graphic scalefit="1" fileref="images/devenv-mvnproxy.jpg"/>
            </figure>        
             
             <section id="nexus-setup">
                <title>Nexus OS Setup</title>
                 <para>
                    We will be using Sonatype's Nexus OSS for our repository.
                    You have at least 3 options.
                    <orderedlist>
                        <listitem><para>Manually setup the server from an Internet download.
                           This allows you to best know what I have and have
                           not customized for class. Artifacts will be 
                           discovered by your instance once setup is complete.</para></listitem>
                        <listitem><para>Share an proxy with someone who already
                           has one up and running on your network. This is the 
                           primary way Maven proxies are intended to be used.
                           If the proxy you are sharing with is not part of class --
                           make sure they add the class-specific repositories to
                           their proxy set.
                           </para></listitem>
                        <listitem><para>Copy a fully configured server instance from 
                           someone in class that has completed the installation
                           steps. This is similar to what is done when we have
                           to implement a proxy thru an air-gapped network.</para></listitem>
                    </orderedlist>
                 </para>

                 <section id="nexus-manual-setup">
                    <title>Nexus OSS Manual Setup</title>
                    <para>This procedure will take you through a manual download
                        and setup of the Nexus OSS software and have you go thru
                        a manual setup of all items. Use this approach if you 
                        want a minor amount of experience in setting up the sever.
                    </para>
                    <orderedlist>
                        <listitem><para>Download the Nexus OSS Software from Sonatype
                            <ulink url="http://www.sonatype.org/nexus/go">http://www.sonatype.org/nexus/go</ulink>
                            </para>
                        </listitem>
                        <listitem><para>Unzip the the compressed file to your filesystem.
                        There will be two directories created; one for the software
                        (<code>nexus-(version)</code>) and another for the repository
                        caches (<code>sonatype-work</code>)
                        </para>
                    <programlisting><![CDATA[
$ unzip ~/Downloads/nexus-2.0.3-bundle.zip 
Archive:  /home/user/Downloads/nexus-2.0.3-bundle.zip
   creating: nexus-2.0.3/
   creating: nexus-2.0.3/nexus/
  inflating: nexus-2.0.3/LICENSE.txt  
...


$ ls nexus-2.0.3/ sonatype-work/
nexus-2.0.3/:
bin  conf  lib  LICENSE.txt  logs  nexus  NOTICE.txt  tmp

sonatype-work/:
nexus  README.txt
    ]]></programlisting>           
                        </listitem>
                        
                        <listitem><para>The server will listen on port 8081 on 
                            all interfaces (0.0.0.0) by default. Modify
                            <code>nexus-2.0.3/conf/nexus.properties</code> if 
                            you want something different.</para>
                    <programlisting><![CDATA[
$ more nexus-2.0.3/conf/nexus.properties                                                                                                                                       
...
# Jetty section
application-port=8081
application-host=0.0.0.0
...
    ]]></programlisting>                        
                        </listitem>        
                        <listitem><para>Locate the startup script in the NEXUS_HOME/bin
                            directory. </para>
                    <programlisting><![CDATA[
$ ls nexus-2.0.3/bin/
jsw  nexus  nexus.bat                 
    ]]></programlisting>
                        <tip>
                            <para>Linux users might want to register this script
                            in /etc/init.d. If you also configure it to automatically
                            start at boot -- supply a value for <code>RUN_AS_USER</code>
                            to keep the server from running as root.</para>
                        </tip>                        
                        </listitem>
                        <listitem><para>Use the script appropriate for your platform
                            to start and perform other controls on the server.
                            </para>
                    <programlisting><![CDATA[
$ nexus-2.0.3/bin/nexus
Usage: nexus-2.0.3/bin/nexus { console | start | stop | restart | status | dump }

$ nexus-2.0.3/bin/nexus start
Starting Nexus OSS...
Started Nexus OSS.
]]></programlisting>
                        <note>
                            <para>The above command attempts to run Nexus as a service. If you do not have
                                the permission on your system to register nexus as a service, you can optionally
                                run it as an interactive command.
                    <programlisting><![CDATA[                    
$ nexus-2.0.3/bin/nexus console
/etc/init.d/nexus console
Running Nexus OSS...
wrapper  | --> Wrapper Started as Console
wrapper  | Launching a JVM...
jvm 1    | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org
jvm 1    |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.
jvm 1    | 
jvm 1    | 2012-04-26 12:14:38.531:INFO:oejs.Server:jetty-7.5.4.v20111024
]]></programlisting>
                            The specific error observed on Windows was
                    <programlisting><![CDATA[                    
wrapper | The nexus-webapp service is not installed - The specified service does not exist as an installed service. (0x424)                            
]]></programlisting>
                            </para>
                        </note>                        
                        </listitem>
                        <listitem><para>Access the Web UI for Nexus OSS
                            <ulink url="http://localhost:8081/nexus">http://localhost:8081/nexus</ulink>
                        </para></listitem>                    
                        <listitem><para>Login with the default account of admin/admin123</para></listitem>
                        <listitem><para>Change the admin password using Security-&gt;Change Password</para></listitem>
                        <listitem><para>Add remote repositories</para>
                            <orderedlist>
                                <listitem><para>Click on Views/Repositories-&gt;Repositories</para></listitem>
                                <listitem><para>Click the +Add...Proxy Repository</para></listitem>
                                <listitem><para>Fill in the data for the repositories in the 
                                    following Repositories table. Use default values for 
                                    anything not included in the table.</para></listitem>
                                <listitem><para>Press Save</para></listitem>
                            </orderedlist>
                            <table frame="all"><title>Repositories</title>
                                <tgroup cols="4">
                                <thead>
                                    <row>
                                        <entry>Repository ID</entry>
                                        <entry>Repository Name</entry>
                                        <entry>Repository Policy</entry>
                                        <entry>Remote Storage Location</entry>
                                    </row>
                                </thead>
                                <tbody>
                                    <row>
                                        <entry>jboss-nexus</entry>
                                        <entry>JBoss Nexus</entry>
                                        <entry>Release</entry>
                                        <entry><ulink url="https://repository.jboss.org/nexus/content/repositories/releases/">https://repository.jboss.org/nexus/content/repositories/releases/</ulink></entry>
                                    </row>
                                    <row>
                                        <entry>exoplatform</entry>
                                        <entry>Exoplatform</entry>
                                        <entry>Release</entry>
                                        <entry><ulink url="http://maven2.exoplatform.org/maven/">http://maven2.exoplatform.org/maven/</ulink></entry>
                                    </row>
                                    <row>
                                        <entry>ejava-nexus</entry>
                                        <entry>EJava Nexus</entry>
                                        <entry>Release</entry>
                                        <entry><ulink url="http://ejava.info/nexus/content/repositories/releases/">http://ejava.info/nexus/content/repositories/releases/</ulink></entry>
                                    </row>
                                </tbody>
                                </tgroup>
                            </table>
                            <note>
                                <para>Nexus will check each repository as they are
                                added. In the various installations I performed
                                I had to restart the nexus server in several instances
                                in order to get the new repositories to transition to the 
                                Available state. 
                                </para>
                    <programlisting><![CDATA[
$ service nexus restart
Stopping Nexus OSS...
Stopped Nexus OSS.
Starting Nexus OSS...
Started Nexus OSS.
    ]]></programlisting>                        
                            </note>
                        </listitem>
                        <listitem><para>Add the created repositories to the Public Repositories</para>
                            <orderedlist>
                                <listitem><para>Select <code>Public Repositories</code> line
                                    towards the top of the repositories list.</para></listitem>
                                <listitem><para>Select repositories form the right Available
                                column and add them to the left column. Specify them last
                                in the following order</para>
                                <orderedlist>
                                    <listitem><para>JBoss Nexus</para></listitem>
                                    <listitem><para>Exoplatform</para></listitem>
                                    <listitem><para>Ejava Nexus</para></listitem>
                                </orderedlist>
                                </listitem>
                                <listitem><para>Press Save</para></listitem>
                            </orderedlist>
                        </listitem>
                    </orderedlist>
                 </section>
             </section>
             
             <section id="integrate-proxy-with-maven.xml">
                <title>Integrate Proxy with Maven</title>
                <orderedlist>
                    <listitem><para>Add the following to the <code>.m2/settings.xml</code> file
                        in your HOME directory to enable use of the proxy</para>
                <programlisting language="xml"><![CDATA[
...
    <mirrors>
        <mirror>
          <id>nexus</id>
          <mirrorOf>*</mirrorOf>
          <url>http://localhost:8081/nexus/content/groups/public</url>
        </mirror>
    </mirrors>
</settings>    
]]></programlisting>                        
                    </listitem>
                    <listitem><para>Test your configuration using </para>
                <programlisting><![CDATA[
$ mvn clean install
[INFO] Scanning for projects...
Downloading: http://localhost:8081/nexus/content/groups/public/org/eclipse/wst/css/core/maven-metadata.xml
Downloaded: http://localhost:8081/nexus/content/groups/public/org/eclipse/wst/css/core/maven-metadata.xml (376 B at 0.4 KB/sec)
]]></programlisting>                        
                    </listitem>
                    <listitem>
                        <para>If you have Eclipse installed at this point, have 
                        it re-process your settings.xml by going to
                        <code>Window-&gt;Preferences-&gt;Maven-&gt;User Settings-&gt;Update Settings</code></para>
                    </listitem>                    
                </orderedlist>
             </section>
        </section>
  </chapter>
  
  <chapter id="jboss-setup">
    <title>JBoss Setup</title>    
    <para/>
    <section id="install-jboss">
        <title>Download and Install JBoss Application Server 7</title>
        <orderedlist>
            <listitem><para>Download JBoss AS 7.1.1.Final
                <ulink url="http://www.jboss.org/jbossas/downloads">http://www.jboss.org/jbossas/downloads</ulink></para>
            </listitem>
            <listitem><para>Install JBoss AS into a directory that does not
            have any spaces in its path.</para>
                <programlisting><![CDATA[
$ unzip ~/Downloads/jboss-as-7.1.1.Final.zip                
                
$ ls jboss-as-7.1.1.Final/
]]></programlisting>                        
            </listitem>
            <listitem><para>Test the installation by starting the default
            configuration installation.</para>
                <programlisting><![CDATA[
$ jboss-as-7.1.1.Final/bin/bin/standalone.sh
user@ubuntu:/opt$ ./jboss-as-7.1.1.Final/bin/standalone.sh 
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss-as-7.1.1.Final

  JAVA: java

  JAVA_OPTS:  -server -XX:+TieredCompilation -Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true -Dorg.jboss.resolver.warning=true -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true -Djboss.server.default.config=standalone.xml

=========================================================================

22:41:07,659 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
22:41:08,223 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
...
22:41:49,257 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990
22:41:49,258 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss AS 7.1.1.Final "Brontes" 
started in 7908ms - Started 133 of 208 services (74 services are passive or on-demand)
]]></programlisting>                        
            </listitem>
            <listitem><para>Verify you can access the server</para>
                <itemizedlist>
                    <listitem><para>Main Page:<ulink url="http://localhost:8080">http://localhost:8080</ulink></para></listitem>
                    <listitem><para>Admin Page:<ulink url="http://localhost:9990/console">http://localhost:9990/console</ulink>
                    This will fail until the admin account is added.</para></listitem>
                </itemizedlist>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="configure-jboss-server">
        <title>Configure JBoss Server</title>
        <orderedlist>
            <listitem><para>Shutdown the server using Control-C</para></listitem>
            <listitem><para>Make a copy of the standalone.xml and use it as 
                a backup</para>
                <programlisting><![CDATA[
$ cp jboss-as-7.1.1.Final/standalone/configuration/standalone.xml jboss-as-7.1.1.Final/standalone/configuration/standalone-original.xml
]]></programlisting>
            <note>
                <para>The instructions state to backup the original and edit the 
                default server. We could have also chosen to make a copy of the 
                default server and edit one by a new name. In the later case,
                we would need to add "-c copyof-standalone.xml" to the startup
                command to point to the non-default server.</para>
            </note>                                    
            </listitem>
            <listitem><para>Add a logger for the class examples so the 
                server prints debug messages to the logs</para>
                <programlisting><![CDATA[
...
            </logger>
            <logger category="ejava">
                <level name="DEBUG"/>
            </logger>
            <root-logger>
...
]]></programlisting>
            </listitem>
        </orderedlist>        
    </section>
    
    <section id="add-jboss-admin">
        <title>Add JBoss Admin Account</title>
        <orderedlist>
            <listitem><para>Use the batch script to add an admin user to 
                the system.</para>
                <programlisting><![CDATA[
user@ubuntu:/opt$ ./jboss-as-7.1.1.Final/bin/add-user.sh 

What type of user do you wish to add? 
 a) Management User (mgmt-users.properties) 
 b) Application User (application-users.properties)
(a): a

Enter the details of the new user to add.
Realm (ManagementRealm) : 
Username : admin
Password : 
Re-enter Password : 
The username 'admin' is easy to guess
Are you sure you want to add user 'admin' yes/no? yes
About to add user 'admin' for realm 'ManagementRealm'
Is this correct yes/no? yes
Added user 'admin' to file '/opt/jboss-as-7.1.1.Final/standalone/configuration/mgmt-users.properties'
Added user 'admin' to file '/opt/jboss-as-7.1.1.Final/domain/configuration/mgmt-users.properties'
]]></programlisting>                        
            </listitem>
            <listitem><para>Retry logging into the Admin Application
                <ulink url="http://localhost:9990/console">http://localhost:9990/console</ulink>
            </para></listitem>
        </orderedlist>
    </section>
    
    <section id="enable-jboss-debug">
        <title>Enable JBoss Remote Debugging</title>
        <para>Prepare your server for remote debugging for later.</para>
        <orderedlist>
            <listitem><para>Uncomment the following line in either 
            bin/standalone.conf (Linux) or bin/standalone.conf.bat</para>
                <programlisting><![CDATA[
# Sample JPDA settings for remote socket debugging
JAVA_OPTS="$JAVA_OPTS -Xrunjdwp:transport=dt_socket,address=8989,server=y,suspend=n"
]]></programlisting>                        
            </listitem>
            <listitem><para>Restart the server and notice the additional listen
                output. Use control-C to stop the server.</para>
                <programlisting><![CDATA[
$ ./jboss-as-7.1.1.Final/bin/standalone.sh 
=========================================================================
...

Listening for transport dt_socket at address: 8787
23:01:50,460 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
23:01:51,688 INFO  [org.jboss.msc] JBoss MSC version 1.0.2.GA
]]></programlisting>                        
            </listitem>
        </orderedlist>
    </section>
    
    <section id="define-jboss-maven-props">
        <title>Define JBoss Maven Properties in settings.xml</title>
        <orderedlist>
            <listitem><para>Add the following profile and property definitions
                to your HOME/.m2/settings.xml</para>
                <programlisting><![CDATA[
        <profile>
            <id>jboss7</id>
            <properties>
                <jboss7.host>localhost</jboss7.host>
                <jboss7.servlet.port>8080</jboss7.servlet.port>
                <jboss7.mgmt.host>${jboss7.host}</jboss7.mgmt.host>
                <jboss7.home>/opt/jboss-as-7.1.1.Final</jboss7.home>
            </properties>
        </profile>
        ...
    <activeProfiles>
...
        <activeProfile>jboss7</activeProfile>
    </activeProfiles>
</settings>
]]></programlisting>                        
            </listitem>
        </orderedlist>
    </section>
  </chapter>

  <chapter id="eclipse-setup">
    <title>Eclipse Setup</title>
    <para/>
    
    <section id="install-eclipse">
        <title>Download and Install Eclipse Indigo 3.7.x</title>
        <para/>
        <orderedlist>
            <listitem><para>Download Eclipse IDE for JavaEE Developers <ulink url="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</ulink></para></listitem>
            <listitem><para>Unzip the downloaded archive.</para>
                <programlisting><![CDATA[
$ tar xzf ~/Downloads/eclipse-jee-indigo-SR2-linux-gtk.tar.gz 

$ ls eclipse
about_files  artifacts.xml  dropins  eclipse.ini   features  libcairo-swt.so  p2       readme
about.html   configuration  eclipse  epl-v10.html  icon.xpm  notice.html      plugins
]]></programlisting>                        
            </listitem>
            <listitem><para>Create a shortcut for starting Eclipse</para></listitem>
            <listitem><para>Start Eclipse</para></listitem>
        </orderedlist>
    </section>
    
    <section id="setup-m2e">
        <title>Setup Maven Eclipse Integration (m2e)</title>
        <para>m2e is a plugin installed into Eclipse that configures Eclipse
        based on the Maven pom.xml configuration. When adjusting your builds,
        you should always define changes within the Maven pom.xml and rely on
        m2e to translate that into Eclipse. Any changes added directly to 
        Eclipse will not be seen by the command-line build.</para>
        <orderedlist>
            <listitem><para><code>Help-&gt;Install New Software->Add...</code></para></listitem>
            <listitem><para>Enter</para>
                <itemizedlist>
                    <listitem><para>Name: m2e</para></listitem>
                    <listitem><para>URL: <ulink url="http://download.eclipse.org/technology/m2e/releases">http://download.eclipse.org/technology/m2e/releases</ulink></para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Complete the installation steps for Maven Integration for Eclipse</para></listitem>
            <listitem><para>Register your Maven installation with m2e</para>
                <orderedlist>
                    <listitem><para><code>Window-&gt;Preferences-&gt;Maven-&gt;Installations-&gt;Add...</code></para></listitem>
                    <listitem><para>Navigate and select the MAVEN_HOME directory installed earlier</para></listitem>
                    <listitem><para>Re-select the internal Maven instance as the default</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Add the Java Package Explorer to the JavaEE Perspective.
                    I find this easier to work with than the Project 
                    Explorer used by default in the JavaEE perspective.</para>
                <orderedlist>
                    <listitem><para>Select Window-&gt;Show View-&gt;Other-&gt;Java-&gt;Package Explorer.</para></listitem>
                    <listitem><para>Drag the Package Explorer to the panel with the Project Explorer</para></listitem>
                    <listitem><para>Select Top Level Elements-&gt;Working Sets from the down-facing triangle on the Package Explorer.</para></listitem>
                    <listitem><para>Create a New Java Working Set and call it "gettingStarted"</para></listitem>
                    <listitem><para>Press OK</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Import the <code>exercises/simple-bank-war6</code> Exercise into Eclipse as a Maven Project</para>
                <orderedlist>
                    <listitem><para>Right click on "gettingStarted" in the Package 
                        Explorer and select Import...-&gt;Maven-&gt;Existing Maven Projects</para></listitem>
                    <listitem><para>Browse to the project area where you performed 
                        the Git checkout earlier and select the gettingStarted folder.</para></listitem>
                    <listitem><para>Select Next to have the current project
                        added to the selected working set.</para>
                    <note>
                        <para>There will be an extra panel that appears the 
                        first time you import a project with a new maven plugin.
                        Allow Eclipse to setup any that it knows about, discover 
                        ones that may be new, or resolve later for those that
                        it cannot find. There will be unsigned content warnings
                        for most of the plugins. Eclipse will want to restart
                        after installing any new plugins.</para>
                    </note>
                    </listitem>
                    <listitem><para>Verify your JBoss Server is running</para></listitem>
                    <listitem><para>Build and test the application using 
                       Run As-&gt;Maven Install by right clicking on the 
                       "gettingStarted" project folder.</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    
    <section id="setup-egit">
        <title>Setup EGit Eclipse Team Provider</title>
        <para>You can use the command line Git to functionally clone the 
            remote repository and update your local copy. However, having
            Git integrated into Eclipse allows the plugin to make Eclipse
            transition easier between one checked out branch to another or 
            correctly react to an updated branch. To do this -- install the 
            EGit plugin.</para>
            <orderedlist>
                <listitem><para>Open the Eclipse Marketplace panel using 
                    <code>Help-&gt;Eclipse Marketplace</code></para>
                </listitem>
                <listitem><para>Type EGit into the seach field and press Go</para></listitem>
                <listitem><para>Click Install for the <code>EGit - Git Team Provider</code>.
                    This will end up selecting both EGit and JGit. JGit is the 
                    underlying pure Java interface for Git. EGit is the portion
                    that integrates the capability into Eclipse.</para></listitem>
                <listitem><para>Complete the installation process</para></listitem>
                <listitem><para>Right click on the <code>simple-bank-war6</code>
                   project imported earlier and select <code>Team-&gt;Share Project...-&gt;Git-&gt;Use of create repository in parent folder of project-&gt;Finish</code></para></listitem>
                <listitem><para><code>[(branch-name)]</code> should not be displayed 
                    to the right of the project name</para></listitem>
            </orderedlist>
    </section>
    
    <section id="setup-jbosstools">
        <title>Setup JBoss Eclipse Integration</title>
        <para>Add the following repository to your Eclipse instance and
           install the plugin</para>
        <orderedlist>
            <listitem><para><code>Help-&gt;Install New Software->Add...</code></para></listitem>
            <listitem><para>Enter</para>
                <itemizedlist>
                    <listitem><para>Name: jboss-tools</para></listitem>
                    <listitem><para>URL: <ulink url="http://download.jboss.org/jbosstools/updates/development/indigo/">http://download.jboss.org/jbosstools/updates/development/indigo/</ulink></para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Complete the installation steps for JBoss Tools. There
                are a lot of tools in the repository. Not all of them are
                needed for class and some do not yet seem functional or obvious 
                how to use them without more investigation. You can opt for 
                installing all or choose the following minimal set.</para>
                <itemizedlist>
                    <listitem><para>JBoss Web and JavaEE Development</para>
                        <itemizedlist>
                            <listitem><para>JBoss AS Tools</para></listitem>
                            <listitem><para>JBoss JAX-RS Tools</para></listitem>
                            <listitem><para>JBoss WebServices Tools</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>You will receive a warning about the content within the 
                    plugin being unsigned.</para>
                </note>
            </listitem>
            <listitem><para>Define a Server Instance for JBoss AS 7</para>
                <orderedlist>
                    <listitem><para>Open the JavaEE Perspective</para></listitem>
                    <listitem><para>Select "new server wizard..." in the Servers panel</para></listitem>
                    <listitem><para>Select JBossAS 7.1</para></listitem>
                    <listitem><para>Set HOME to your jboss-as-7.1.1.Final directory
                       using the Browse button on the next panel</para></listitem>
                    <listitem><para>Name the server "standalone" and leave the 
                       to match the default "standalone.xml" configuration file.</para></listitem>
                    <listitem><para>Set the JRE to the JDK instance you installed earlier</para></listitem>
                    <listitem><para>Review options. Note that I generally start my 
                        server externally so that standard output does not compete 
                        with my other actions within Eclipse. However, there are
                        pros and cons to both methods and I will start you with
                        internally launched here.</para></listitem>
                    <listitem><para>Start the server by right clicking on it
                        and selecting Start</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="setup-tcpmonitor">
        <title>Setup TCP/IP Monitor</title>
        <para>TCP/IP Monitor is an active web proxy tool that you insert between 
        your client and server. One end of the communication usually remains
        unchanged while the other gets adjusted to account for the extra
        hop in communication. This is a functional replacement for the legacy
        tcpmon tool and should come with Eclipse.</para>
        <orderedlist>
            <listitem><para>Open up TCP/IP Monitor using
                <code>Window-&gt;Show View-&gt;Other...-&gt;Debug-&gt;TCP/IP Monitor</code> 
            </para>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="setup-tcpdump">
        <title>Setup tcpdump</title>
        <subtitle>(Linux Users Only)</subtitle>
        <para>tcpdump is a passive network monitoring tool that, with root
        access, can listen for TCP packets exchanged between client and server.
        The nice thing about using tcpdump is that it requires no change of 
        the client or server. If you have a linux system and root access to
        that system, I would recommend you set this up. It is not technically
        an Eclipse plugin, but I find it helpful to run it within an Eclipse
        console.</para>
        <note>
            <para>Windows users -- if you locate a tcpdump equivalent for
               windows please let me know. Until then you can functionally
               use the active tcpmon proxy.</para>
        </note>
        <orderedlist>
            <listitem><para><code>Open up a terminal within Eclipse using
            <code>Window-&gt;Show View-&gt;Other-&gt;Terminal-&gt;Terminal</code></code></para></listitem>
            <listitem><para>Click the Connect icon on the top right of the terminal panel</para></listitem>
            <listitem><para>SSH to localhost</para></listitem>
            <listitem><para>Run tcpdump at the shell prompt</para>
                <programlisting><![CDATA[
$ sudo tcpdump -A -s0 -i lo port 8080
[sudo] password for user: 
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            <listitem><para>If you get a "port 22: Connection refused" error
               verify that you have openssh-server installed.</para>
                <programlisting><![CDATA[
$ sudo apt-get install openssh-server
]]></programlisting>                        
            </listitem>
            <listitem><para>I created the following script in my PATH so
                that I only had to remember the port# when launching the
                tcpdump utility.</para>
                <programlisting><![CDATA[
$ cat /home/user/bin/tcp-dump 
#!/bin/sh

port=8080
if [ $# -eq 1 ]; then
    port=$1
fi
cmd="sudo tcpdump -A -s0 -i lo port $port"
echo $cmd
$cmd

$ sudo ~/bin/tcp-dump 8080
sudo tcpdump -A -s0 -i lo port 8080
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            
        </orderedlist>
    </section>
    
    <section id="setup-eclipse-targets">
        <title>Setup Eclipse Run Configurations</title>
        <para>You will perform many development scenarios within Eclipse
           and will benefit greatly by having a few run configurations 
           setup and readily accessible. We will start with a few key items
           here and add more later.</para>
           
         <section id="add-mvn-deploy">
            <title>Deploy to JBoss Eclipse Shortcut</title>
            <para>This configuration is useful to deploy your entire Maven
                application prior to running JUnit tests. It is very similar 
                to the "Run on Server" capability but it leverages the 
                Maven build cycle to complete.</para>
            <orderedlist>
                <listitem><para>Select the "simple-bank-war6" project in the 
                    Package Explorer panel or by clicking on any file within 
                    that project</para>
                </listitem>
                <listitem><para>Open the configuration management pop-up by 
                selecting 
                <code>RunAs-&gt;Run Configurations...-&gt;</code></para></listitem>
                <listitem><para>Double click <code>Maven Build</code> to create
                    a new Launch Configuration</para></listitem>
                <listitem><para>Fill in the form and press Run</para>
                    <itemizedlist>
                        <listitem><para>Name: mvn deploy</para></listitem>
                        <listitem><para>Base Directory:${project_loc}</para></listitem>
                        <listitem><para>Goals: clean pre-integration-test</para></listitem>
                        <listitem><para>Parameter: skipTests=true</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>You should observe the following</para>
                <programlisting><![CDATA[
...
[INFO] --- cargo-maven2-plugin:1.2.0:redeploy (cargo-deploy) @ simple-bank-war6 ---
[INFO] [DeployerRedeployMojo] Resolved container artifact org.codehaus.cargo:cargo-core-container-jboss:jar:1.2.0 for container jboss71x
Apr 24, 2012 12:54:43 AM org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.2.GA
[INFO] [Boss7xRemoteDeployer] The undeployment phase of the redeploy action has failed: org.codehaus.cargo.util.CargoException: Cannot undeploy deployable org.codehaus.cargo.container.jboss.deployable.JBossWAR[simple-bank-war6.war]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 10.416s                
]]></programlisting>                        
                </listitem>
                <listitem><para>With the application deployed to JBoss run all
                   of the tests directly within Eclipse/JUnit by right clicking
                   on the project and selecting RunAs-&gt;JUnit Test. All 
                   tests should run and pass. You can open up the results and
                   execute any single testMethod individually.</para>
                <figure>
                    <title>JUnit Results</title>
                    <graphic scalefit="1" fileref="images/junit-simple-bank.png"/>
                </figure>        
                </listitem>
                <listitem><para>If you had tcpdump running you should have also 
                    seen activity on the interface</para>
                <programlisting lang="xml"><![CDATA[
PUT /simple-bank-war6/bank HTTP/1.1
Content-Type: application/xml
Content-Length: 232
Host: localhost:8080
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <ns2:link>
        <rel>self</rel>
    </ns2:link>
    <name>Forbes Bank</name>
    <totalAssets>0.0</totalAssets>
</ns2:bank>

...
204 No Content
Server: Apache-Coyote/1.1
Date: Tue, 24 Apr 2012 08:12:23 GMT
]]></programlisting>                        
                </listitem>
            </orderedlist>
         </section>
    </section>
  </chapter>

<!-- 
  <chapter id="setup-chrome">
    <title>Setup Chrome Browser</title>
    
    <section id="install-chrome">
        <title>Download and Install the Chrome Browser</title>
        <itemizedlist>
            <listitem><para>Linux Users: Install Chrome from your package manager.</para></listitem>
            <listitem><para>Windows Users: Download Chrome Browser
                <ulink url="http://www.google.com/chrome">http://www.google.com/chrome</ulink>
                and use the installer</para>
            </listitem>
        </itemizedlist>
    </section>
    
    <section id="install-postman">
        <title>Install Postman REST Client</title>
        <para>This is an optional REST Client tool. However it requires you to
        login with your google credentials.</para>
        <orderedlist>
            <listitem><para>Navigate to the 
            <ulink url="https://chrome.google.com/webstore/detail/fdmmgilgnpjigdojojpjoooidkmcomcm">Postman REST Client</ulink>
            market site within the Chrome Browser.</para></listitem>
            <listitem><para>Install the plugin</para></listitem>
        </orderedlist>
    </section>
  </chapter>
 -->  
</book>

<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">


<chapter id="devenv-eclipse-setup">
    <title>Eclipse Setup</title>
    <para/>
    
    <section id="devenv-eclipse-install">
        <title>Download and Install Eclipse Indigo Service Release 2</title>
        <warning>
            <para>
                I found the new Eclipse Juno (4.2) to have horrible performance
                for even the simplest tasks. I strongly recommend against using 
                it and go with the Indigo SR2 version instead.
            </para>
        </warning>
        <orderedlist>
            <listitem>
                <para>
                    Download Eclipse IDE for JavaEE Developers 
                    <ulink url="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2">http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/indigosr2</ulink>
                    (look to the right side of the page)
                </para>
            </listitem>
            <listitem><para>Unzip the downloaded archive.</para>
                <programlisting><![CDATA[
$ sudo tar xzf ~/Downloads/eclipse-jee-indigo-SR2-linux-gtk.tar.gz 
$ sudo chown -R (userid):usergrp) eclipse/

$ ls eclipse
about_files  artifacts.xml  dropins  eclipse.ini   features  libcairo-swt.so  p2       readme
about.html   configuration  eclipse  epl-v10.html  icon.xpm  notice.html      plugins
]]></programlisting>                        
            </listitem>
            <listitem><para>Create a shortcut for starting Eclipse</para></listitem>
            <listitem><para>Start Eclipse</para></listitem>
        </orderedlist>
    </section>
    
    <section id="setup-m2e">
        <title>Setup Maven Eclipse Integration (m2e)</title>
        <para>m2e is a plugin installed into Eclipse that configures Eclipse
        based on the Maven pom.xml configuration. When adjusting your builds,
        you should always define changes within the Maven pom.xml and rely on
        m2e to translate that into Eclipse. Any changes added directly to 
        Eclipse will not be seen by the command-line build.</para>
        <orderedlist>
            <listitem><para><code>Help-&gt;Eclipse Marketplace...</code></para></listitem>
            <listitem><para>Enter "m2e"</para></listitem>
            <listitem><para>Installer "Maven Integration for Eclipse" by Eclipse.org. You may need to scroll down to locate this package.</para></listitem>
            <listitem><para>Complete the installation steps for Maven Integration for Eclipse</para></listitem>
            <listitem><para>Register your Maven installation with m2e</para>
                <orderedlist>
                    <listitem><para><code>Window-&gt;Preferences-&gt;Maven-&gt;Installations-&gt;Add...</code></para></listitem>
                    <listitem><para>Navigate and select the MAVEN_HOME directory installed earlier</para></listitem>
                    <listitem><para>Re-select the internal Maven instance as the default. You can switch between the two if you 
                        run into maven issues that act differently within and outside of Eclipse.</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Add the Java Package Explorer to the JavaEE Perspective.
                    I find this easier to work with than the Project 
                    Explorer used by default in the JavaEE perspective.</para>
                <orderedlist>
                    <listitem><para>Select Window-&gt;Show View-&gt;Other-&gt;Java-&gt;Package Explorer.</para></listitem>
                    <listitem><para>Drag the Package Explorer to the panel with the Project Explorer</para></listitem>
                    <listitem><para>Select Top Level Elements-&gt;Working Sets from the down-facing triangle on the Package Explorer.</para></listitem>
                    <listitem><para>Create a New Java Working Set and call it "class-examples"</para></listitem>
                    <listitem><para>Press OK</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Import a sample class example project into Eclipse as a Maven Project</para>
                <orderedlist>
                    <listitem><para>Right click on "class-examples" in the Package 
                        Explorer and select Import...-&gt;Maven-&gt;Existing Maven Projects</para></listitem>
                    <listitem><para>Browse to the project area where you performed 
                        the Git checkout earlier and select the 
                        <code>exercises/simple-bank-war6</code> 
                        folder.</para></listitem>
                    <listitem><para>Select Next to have the current project(s)
                        added to the selected working set.</para>
                    <note>
                        <para>There will be an extra panel that appears the 
                        first time you import a project with a new maven plugin.
                        Allow Eclipse to setup any plugins that it knows about, discover 
                        ones that may be new, or resolve later for those that
                        it cannot find. There will be unsigned content warnings
                        for most of the plugins. Eclipse will want to restart
                        after installing any new plugins.</para>
                    </note>
                    </listitem>
                    <listitem>
                        <para>
                            Build and test the application using 
                            Run As-&gt;Maven test by right clicking on any of the 
                            project folders.
                       </para>
                    </listitem>
                    <listitem>
                        <para>
                            Try also Run As-&gt;JUnit Test.
                       </para>
                    </listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    
    <section id="setup-egit">
        <title>Setup EGit Eclipse Team Provider</title>
        <para>You can use the command line Git to functionally clone the 
            remote repository and update your local copy. However, having
            Git integrated into Eclipse allows the plugin to make Eclipse
            transition easier between one checked out branch to another or 
            correctly react to an updated branch. To do this -- install the 
            EGit plugin.</para>
            <orderedlist>
                <listitem><para>Open the Eclipse Marketplace panel using 
                    <code>Help-&gt;Eclipse Marketplace</code></para>
                </listitem>
                <listitem><para>Type EGit into the seach field and press Go</para></listitem>
                <listitem><para>Click Install for the <code>EGit - Git Team Provider</code>.
                    This will end up selecting both EGit and JGit. JGit is the 
                    underlying pure Java interface for Git. EGit is the portion
                    that integrates the capability into Eclipse.</para></listitem>
                <listitem><para>Complete the installation process</para></listitem>
                <listitem><para>Right click on the project imported earlier and select 
                   <code>Team-&gt;Share Project...-&gt;Git-&gt;Use of create repository in parent folder of project-&gt;Finish</code></para></listitem>
                <listitem><para><code>[(branch-name)]</code> should now be displayed 
                    to the right of the project name</para></listitem>
            </orderedlist>
    </section>
    
    <section id="setup-jbosstools">
        <title>Setup JBoss Eclipse Integration</title>
        <para>Add the following repository to your Eclipse instance and
           install the plugin</para>
        <orderedlist>
            <listitem><para>Open the Eclipse Marketplace panel using 
                <code>Help-&gt;Eclipse Marketplace</code></para>
            </listitem>
            <listitem><para>Type JBoss into the seach field and press Go</para></listitem>
            <listitem><para>Click Install for the <code>JBoss Tools (Indigo)</code>.
                Be sure to select the Indigo (3.x) version and not Juno (4.x).
                </para></listitem>
            <listitem><para>Complete the installation steps for JBoss Tools. There
                are a lot of tools in the repository. Not all of them are
                needed for class and some do not yet seem functional or obvious 
                how to use them without more investigation. You can opt for 
                installing all or choose the following minimal set. Note that 
                chosing *all* will take 30-60min to complete.</para>
                <itemizedlist>
                    <listitem><para>JBoss Web and JavaEE Development</para>
                        <itemizedlist>
                            <listitem><para>Context and Dependency Injection Tools</para></listitem>
                            <listitem><para>JBoss JAX-RS Tools</para></listitem>
                            <listitem><para>JBoss WebServices Tools</para></listitem>
                            <listitem><para>JBossAS Tools</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>You will receive a warning about the content within the 
                    plugin being unsigned.</para>
                </note>
            </listitem>
            <listitem><para>Define a Server Instance for JBoss AS 7</para>
                <orderedlist>
                    <listitem><para>Open the JavaEE Perspective</para></listitem>
                    <listitem><para>Select "new server wizard..." in the Servers panel</para></listitem>
                    <listitem><para>Select JBossAS 7.1</para></listitem>
                    <listitem><para>Set HOME to your jboss-as-7.1.1.Final directory
                       using the Browse button on the next panel</para></listitem>
                    <listitem><para>Name the server "standalone" and leave the 
                       to match the default "standalone.xml" configuration file.</para></listitem>
                    <listitem><para>Set the JRE to the JDK instance you installed earlier</para></listitem>
                    <listitem><para>Review options. Note that I generally start my 
                        server externally so that standard output does not compete 
                        with my other actions within Eclipse. However, there are
                        pros and cons to both methods and I will start you with
                        internally launched here.</para></listitem>
                    <listitem><para>Start the server by right clicking on it
                        and selecting Start</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>

    <section id="setup-tcpmonitor">
        <title>Setup TCP/IP Monitor</title>
        <para>TCP/IP Monitor is an active web proxy tool that you insert between 
        your client and server. One end of the communication usually remains
        unchanged while the other gets adjusted to account for the extra
        hop in communication. This is a functional replacement for the legacy
        tcpmon tool and should come with Eclipse.</para>
        <orderedlist>
            <listitem><para>Open up TCP/IP Monitor using
                <code>Window-&gt;Show View-&gt;Other...-&gt;Debug-&gt;TCP/IP Monitor</code> 
            </para>
            </listitem>
        </orderedlist>
    </section>

    <section id="setup-tcpdump">
        <title>Setup tcpdump</title>
        <subtitle>(Linux Users Only)</subtitle>
        <para>tcpdump is a passive network monitoring tool that, with root
        access, can listen for TCP packets exchanged between client and server.
        The nice thing about using tcpdump is that it requires no change of 
        the client or server. If you have a linux system and root access to
        that system, I would recommend you set this up. It is not technically
        an Eclipse plugin, but I find it helpful to run it within an Eclipse
        console.</para>
        <note>
            <para>Windows users -- if you locate a tcpdump equivalent for
               windows please let me know. Until then you can functionally
               use the active tcpmon proxy.</para>
        </note>
        <orderedlist>
            <listitem><para><code>Open up a terminal within Eclipse using
            <code>Window-&gt;Show View-&gt;Other-&gt;Terminal-&gt;Terminal</code></code></para></listitem>
            <listitem><para>Click the Connect icon on the top right of the terminal panel</para></listitem>
            <listitem><para>SSH to localhost</para></listitem>
            <listitem><para>Run tcpdump at the shell prompt</para>
                <programlisting><![CDATA[
$ sudo tcpdump -A -s0 -i lo port 8080
[sudo] password for user: 
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            <listitem><para>If you get a "port 22: Connection refused" error
               verify that you have openssh-server installed.</para>
                <programlisting><![CDATA[
$ sudo apt-get install openssh-server
]]></programlisting>                        
            </listitem>
            <listitem><para>I created the following script in my PATH so
                that I only had to remember the port# when launching the
                tcpdump utility.</para>
                <programlisting><![CDATA[
$ cat /home/user/bin/tcp-dump 
#!/bin/sh

port=8080
if [ $# -eq 1 ]; then
    port=$1
fi
cmd="sudo tcpdump -A -s0 -i lo port $port"
echo $cmd
$cmd

$ sudo ~/bin/tcp-dump 8080
sudo tcpdump -A -s0 -i lo port 8080
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes
]]></programlisting>                        
            </listitem>
            
        </orderedlist>
    </section>

    <section id="setup-eclipse-targets">
        <title>Setup Eclipse Run Configurations</title>
        <para>You will perform many development scenarios within Eclipse
           and will benefit greatly by having a few run configurations 
           setup and readily accessible. We will start with a few key items
           here and add more later.</para>
           
         <section id="add-mvn-deploy">
            <title>Deploy to JBoss Eclipse Shortcut</title>
            <para>This configuration is useful to deploy your entire Maven
                application prior to running JUnit tests. It is very similar 
                to the "Run on Server" capability but it leverages the 
                Maven build cycle to complete.</para>
            <orderedlist>
                <listitem><para>Select the "simple-bank-war6" project in the 
                    Package Explorer panel or by clicking on any file within 
                    that project</para>
                </listitem>
                <listitem><para>Open the configuration management pop-up by 
                selecting 
                <code>RunAs-&gt;Run Configurations...-&gt;</code></para></listitem>
                <listitem><para>Double click <code>Maven Build</code> to create
                    a new Launch Configuration</para></listitem>
                <listitem><para>Fill in the form and press Run</para>
                    <itemizedlist>
                        <listitem><para>Name: mvn deploy</para></listitem>
                        <listitem><para>Base Directory:${project_loc}</para></listitem>
                        <listitem><para>Goals: clean pre-integration-test</para></listitem>
                        <listitem><para>Parameter: skipTests=true</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>You should observe the following</para>
                <programlisting><![CDATA[
...
[INFO] cargo-maven2-plugin:1.2.0:redeploy (cargo-deploy) @ simple-bank-war6 
[INFO] [DeployerRedeployMojo] Resolved container artifact org.codehaus.cargo:cargo-core-container-jboss:jar:1.2.0 for container jboss71x
Apr 24, 2012 12:54:43 AM org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
Apr 24, 2012 12:54:43 AM org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.2.GA
[INFO] [Boss7xRemoteDeployer] The undeployment phase of the redeploy action has failed: org.codehaus.cargo.util.CargoException: Cannot undeploy deployable org.codehaus.cargo.container.jboss.deployable.JBossWAR[simple-bank-war6.war]
...
[INFO] BUILD SUCCESS
]]></programlisting>                        
                </listitem>
                <listitem><para>With the application deployed to JBoss run all
                   of the tests directly within Eclipse/JUnit by right clicking
                   on the project and selecting RunAs-&gt;JUnit Test. All 
                   tests should run and pass. You can open up the results and
                   execute any single testMethod individually.</para>
                <figure>
                    <title>JUnit Results</title>
                    <graphic scalefit="1" fileref="images/junit-simple-bank.png"/>
                </figure>        
                </listitem>
                <listitem><para>If you had tcpdump running you should have also 
                    seen activity on the interface</para>
                <programlisting lang="xml"><![CDATA[
PUT /simple-bank-war6/bank HTTP/1.1
Content-Type: application/xml
Content-Length: 232
Host: localhost:8080
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <ns2:link>
        <rel>self</rel>
    </ns2:link>
    <name>Forbes Bank</name>
    <totalAssets>0.0</totalAssets>
</ns2:bank>

...
204 No Content
Server: Apache-Coyote/1.1
Date: Tue, 24 Apr 2012 08:12:23 GMT
]]></programlisting>                        
                </listitem>
            </orderedlist>
         </section>
    </section>
</chapter>

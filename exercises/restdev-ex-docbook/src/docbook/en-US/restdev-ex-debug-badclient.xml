<chapter id="restdev-ex-debug-badclient">
      <title>Debug Bad Client</title>
      <abstract><para>In this chapter you will encounter a unit test failure
          of the REST application. You are to encounter the problem,
          load the project into Eclipse, run within Eclipse/JUnit, set a breakpoint,
          debug within Eclipse/JUnit, step thru the program execution, and 
          discover and correct the problem.</para></abstract>
        <para>Goals</para>
        <orderedlist>
            <listitem><para>Use Eclipse/JUnit</para></listitem>
            <listitem><para>Use JBoss Tools Web Service Client</para></listitem>
            <listitem><para>Use Eclipse Debugger</para></listitem>
        </orderedlist>
        
        <section id="restdev-ex-debug-badclient-runtest">
            <title>Run the Unit Tests</title>
            <para>Run just the unit tests for the <code>restdev-bank-war6</code>
                project from the command line. This should report an error.</para>
<programlisting><![CDATA[
$ cd exercises/restdev-bank-war6/
$ mvn clean test
...
Results :

Failed tests:   testSetupBank(ejava.exercises.simple.bank.BankTest): null accountsLink named bank

Tests run: 4, Failures: 1, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 14.233s
]]></programlisting>            
            <para>The above output indicates that 4 tests were run and 
               one of them reported a failure.</para>
        </section>

        <section id="restdev-ex-debug-badclient-reports">
            <title>Locate Details for Unit Tests</title>
            <para>Look at the surefire test reports located in target/surefire-reports</para>
<programlisting><![CDATA[
$ more `find . -name "*.txt" | grep reports`
::::::::::::::
./target/surefire-reports/ejava.exercises.restdev.bank.BankTest.txt
::::::::::::::
-------------------------------------------------------------------------------
Test set: ejava.exercises.restdev.bank.BankTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.17 sec <<< FAILURE!
testSetupBank(ejava.exercises.restdev.bank.BankTest)  Time elapsed: 0.141 sec  <<< FAILURE!
java.lang.AssertionError: null accountsLink named bank
        at org.junit.Assert.fail(Assert.java:93)
        at org.junit.Assert.assertTrue(Assert.java:43)
        at org.junit.Assert.assertNotNull(Assert.java:526)
        at ejava.exercises.restdev.bank.BankTest.testSetupBank(BankTest.java:100)
]]></programlisting>            
            <para>The above output indicates that an assert failed on line
            100 of BankTest.</para>
            <tip>
                <para>I use the above bash command to quickly scan test results and 
                    view the ones that have failed. The command string 
                    includes</para>
                <orderedlist>
                    <listitem><para>find all files that end in *.txt</para></listitem>
                    <listitem><para>reduce the set of files to those with reports in their path</para></listitem>
                    <listitem><para>use that list as a list of files to be used by the more command</para></listitem>
                    <listitem><para>use more command to print the output a page at a time</para></listitem>
                </orderedlist>
            </tip>
        </section>

        <section id="restdev-ex-debug-badclient-loadproject">
            <title>Load Project Into Eclipse</title>
            <para>Use Import...-&gt;Import-&gt;Existing Maven Projects-&gt;(browse to exercises/restdev-ex-war6)-&gt;select the project</para>
            <para>You should see a top level folder for the project once
               Eclipse finishes importing the project. This should take ~30sec.</para>
        </section>

        <section id="restdev-ex-debug-badclient-junit">
            <title>Run All JUnit Tests</title>
            <orderedlist>
                <listitem><para>Right click on project folder</para></listitem>
                <listitem><para>RunAs-&gt;JUnit Test</para></listitem>
            </orderedlist>
            <para>All tests will run, but the only ones we are concerned with
               are the unit tests that are failing.</para>
        </section>

        <section id="restdev-ex-debug-badclient-junit1">
            <title>Run One Failed Unit Test</title>
            <orderedlist>
                <listitem><para>Right click on BankTest in the JUnit Window</para></listitem>
                <listitem><para>Select Run</para></listitem>
            </orderedlist>
            <para>Only the single test will run. Look at the results.</para>
<programlisting><![CDATA[
java.lang.AssertionError: null accountsLink named bank
    at org.junit.Assert.fail(Assert.java:93)
    at org.junit.Assert.assertTrue(Assert.java:43)
    at org.junit.Assert.assertNotNull(Assert.java:526)
    at ejava.exercises.restdev.bank.BankTest.testSetupBank(BankTest.java:100)
...
]]></programlisting>            
            <para>The stack trace points to BankTest.java:131 having the issue.</para>
        </section>

        <section id="restdev-ex-debug-badclient-errorloc">
            <title>Examine Reported Error Location</title>
            <para>Click on the stack trace entry for BankTest</para>
<programlisting language="java"><![CDATA[
HttpPut updateBank = new HttpPut(bankLink.getHref());
updateBank.addHeader("Content-Type", MediaType.APPLICATION_XML);
updateBank.setEntity(new StringEntity(bank.toXML(), "UTF-8"));
response = httpClient.execute(updateBank);
assertEquals("unexpected status", 204, response.getStatusLine().getStatusCode());

    //verify the change was made
response = httpClient.execute(getBank);
assertEquals("unexpected status from bank", 200, response.getStatusLine().getStatusCode());
Bank bank2 = BankRepresentation.unmarshall(
        response.getEntity().getContent(), Bank.class);
assertEquals("unexpected bank name", bank.getName(), bank2.getName());

    //verify we now have a link to open accounts
accountsLink = bank2.getLink(BankRepresentation.ACCOUNTS_REL);
assertNotNull("null accountsLink named bank", accountsLink);   //line 131
]]></programlisting>            
        <para>The above code indicates that we are trying to update the Bank
           and the returned bank is not returning any links to the Bank.</para>
        </section>


        <section id="restdev-ex-debug-badclient-breakpoints">
            <title>Set Breakpoint in BankRS.getBank()</title>
            <para>Set two breakpoints</para>
            <orderedlist>
                <listitem><para>In BankTest where the GET is triggered</para>
<programlisting language="java"><![CDATA[
    //verify the change was made
response = httpClient.execute(getBank);
assertEquals("unexpected status from bank", 200, response.getStatusLine().getStatusCode());
]]></programlisting>            
                </listitem>
                <listitem><para>In BankRS.getBank where links get created</para>
<programlisting language="java"><![CDATA[
@Path("")
@GET
@Produces(MediaType.APPLICATION_XML)
@Formatted
public Response getBank() {
    log.debug("{} {}", request.getMethod(), uriInfo.getRequestUri());
    Bank bank = service.getBank();
    URI self = new BankRefs(uriInfo).setHRefs(bank);
]]></programlisting>            
                </listitem>
            </orderedlist>
        </section>

        <section id="restdev-ex-debug-badclient-debug">
            <title>Debug BankRS.getBank()</title>
            <orderedlist>
                <listitem><para>Right click on BankTest in the JUnit Window</para></listitem>
                <listitem><para>Select Debug</para></listitem>
            </orderedlist>
            <para>Only the single test will run and will pause at the first 
               encounter of a breakpoint.</para>
            <para>Tell the debugger to continue until you reach the desired position
               in the code (i.e., the getter after the update). You can terminate
               the unit test and restart if you miss.</para>
        </section>

        <section id="restdev-ex-debug-badclient-stepinto">
            <title>Step into Book.resetLinks()</title>
            <para>Tell the debugger to set into the Book.resetLinks().</para>
<programlisting language="java"><![CDATA[
    @Override
    public void resetLinks() {
        super.resetLinks(); 
        if (name != null) { //we're open!
            super.getLinks().add(new Link(BankRepresentation.ACCOUNTS_REL));
        }
    }
]]></programlisting>            
            <para>Notice that links are not provided if name is not set.</para>
        </section>

        <section id="restdev-ex-debug-badclient-removebp">
            <title>Remove Breakpoint on BankRS.getBank()</title>
            <para>Remove the breakpoint on BankRS.getBank(), terminate the
               program, and restart in debug mode. You should come to
               a stop in the unit test client.</para>

            <note>
                <para>The exercise is done with the debugger except for 
                one reason -- having a breakpoint active in the client
                keeps the server from exiting while we play with another
                tool in the next sections. All that is important at this 
                point is that the unit test stay running and you have no
                breakpoints in the server code. You could alternately 
                create a breakpoint within setUp(), after startServer(), and
                on the cleanup() line.
                </para>
<programlisting language="java"><![CDATA[
@Before
public void setUp() throws Exception {  
    log.debug("=== BankTest.setUp() ===");
    log.debug("bankURI={}", bankURI);
    startServer();
    cleanup(); //place breakpoint here to hold server running while using UI Client
}
]]></programlisting>            
            </note>               
        </section>

        <section id="restdev-ex-debug-badclient-wsclient">
            <title>Run the JBossTools Web Service Client</title>
            <para>Lets pause for a moment and verify that observed behavior
               with the a Web Service Client tools.</para>

            <section id="restdev-ex-debug-badclient-wsclient-open">
                <title>Open JBossTools Web Service Client</title>
                <para>Select Window-&gt;Show View->Other...-&gt;JBoss Tolls Web Services-&gt;Web Service Tester</para>
            </section>
            
            <section id="restdev-ex-debug-badclient-wsclient-get">
                <title>Call GET on /dmv</title>
                <orderedlist>
                    <listitem><para>Type the following URL into the tool
                        <ulink url="http://localhost:9092/restdev-bank-war6/dmv">http://localhost:9092/restdev-bank-war6/dmv</ulink></para></listitem>
                    <listitem><para>Change JAX-WS to GET</para></listitem>    
                </orderedlist>
                <para>You should get the following results</para>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <updated>2012-04-29T18:03:49.401-04:00</updated>
    <ns2:link>
        <href>http://127.0.0.5:9092/restdev-bank-war6/bank</href>
        <rel>self</rel>
    </ns2:link>
    <totalAssets>0.0</totalAssets>
</ns2:bank>
]]></programlisting>            
            </section>
            
            <section id="restdev-ex-debug-badclient-wsclient-put1">
                <title>Call PUT on /dmv</title>
                <orderedlist>
                    <listitem><para>Change GET to PUT</para></listitem>
                    <listitem><para>Copy the XML Payload from the left Response
                        Body to the left Request Body.</para></listitem>
                    <listitem><para>Add an Content-Type=application/xml
                        header</para></listitem>    
                </orderedlist>
                <para>You should get the following results</para>
<programlisting><![CDATA[
[HTTP/1.1 204 No Content]
]]></programlisting>
                <figure>
                    <title>PUT /dmv Update</title>
                    <graphic scalefit="1" width="200" fileref="images/restdev-wclient-put.png"/>
                </figure>        

                <para>What just happened was a PUT was issued to the server
                    and accepted with no response body as a designed reply.
                    The important part is that the status code was in the 
                    2xx series.</para>            
            </section>

            <section id="restdev-ex-debug-badclient-wsclient-get2">
                <title>Call GET on /dmv Again</title>
                <orderedlist>
                    <listitem><para>Change PUT to GET</para></listitem>
                </orderedlist>
                <para>You should get the same results -- no account links</para>
            </section>

            <section id="restdev-ex-debug-badclient-wsclient-put2">
                <title>Call PUT with Name on /dmv</title>
                <orderedlist>
                    <listitem><para>Change GET to PUT</para></listitem>
                    <listitem><para>Add a name element to the request body</para>
<programlisting> language="xml"<![CDATA[
    </ns2:link>
    <totalAssets>0.0</totalAssets>
    <name>Test Savings and Loan</name>
</ns2:bank>
]]></programlisting>
                    </listitem>
                </orderedlist>
                <para>You should get the same 204 result</para>
                <para>What just happend was a PUT was issued to the server
                    and accepted with no response body as a designed reply.
                    However, this time we supplied a name.
                </para>            
            </section>

            <section id="restdev-ex-debug-badclient-wsclient-get3">
                <title>Call GET on /dmv Again</title>
                <orderedlist>
                    <listitem><para>Change PUT to GET</para></listitem>
                </orderedlist>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <updated>2012-04-29T18:03:49.401-04:00</updated>
    <ns2:link>
        <href>http://127.0.0.5:9092/restdev-bank-war6/bank</href>
        <rel>self</rel>
    </ns2:link>
    <ns2:link>
        <href>http://127.0.0.5:9092/restdev-bank-war6/accounts</href>
        <rel>accounts</rel>
    </ns2:link>
    <name>Testing Savings and Load</name>
    <totalAssets>0.0</totalAssets>
</ns2:bank>
]]></programlisting>
                <para>This time we have links. Our unit test must
                   not be supplying a name.</para>
            </section>

        </section>
        
        <section id="restdev-ex-debug-badclient-fixclient">
            <title>Fix the Client</title>
            <para>Fix the client by setting the name in the GET</para>
<programlisting language="java"><![CDATA[
            //change the name of the bank
        //TODO:1
        bank.setName("Buffett S&L");
        bank.getLinks().clear();
        HttpPut updateBank = new HttpPut(bankLink.getHref());
        updateBank.addHeader("Content-Type", MediaType.APPLICATION_XML);
        updateBank.setEntity(new StringEntity(bank.toXML(), "UTF-8"));
        response = httpClient.execute(updateBank);
        assertEquals("unexpected status", 204, response.getStatusLine().getStatusCode());
]]></programlisting>
        </section>


        <section id="restdev-ex-debug-badclient-rerun">
            <title>Rerun Unit Tests</title>
            <para>Run-run the unit test and it should pass this time.</para>
        </section>
</chapter>

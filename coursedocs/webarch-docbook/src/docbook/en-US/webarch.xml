<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Web Architecture Overview</title>
  </bookinfo>
  <preface id="preface">
    <title>Primary Sources</title>
    <orderedlist>
        <listitem><para>
        <emphasis>"REST in Practice; Hypermedia Systems Architecture"</emphasis>, 
        Jim Weber, Savas Parastatidis, Ian Robinson, 2010 
        <ulink url="http://shop.oreilly.com/product/9780596805838.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/REST-Practice-Hypermedia-Architecture-ebook/dp/B0046RERXY/ref=kinw_dp_ke?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596805829 
        </para></listitem>
    </orderedlist>
  </preface>
  
  <toc/>
  
  <chapter id="the-web">
    <title>The Web as a Distributed System Platform<footnote id="www-footnote"><para>REST in Practice: Hypermedia and Systems Architecture</para></footnote></title>
    <itemizedlist>
        <listitem><para>The Web is...</para>
            <itemizedlist>
                <listitem><para>Intended to create an easy-to-use, distributed, loosely coupled system for sharing documents in early 1990s</para></listitem>
                <listitem><para>Became an international ecosystem of services and applications</para></listitem>
                <listitem><para>Allows us to search, aggregate, combine, transform, replicate, cache, and archive information</para></listitem>
                <listitem><para>Largest, least formal integration project ever attempted</para></listitem>
                <listitem><para>Transformed how we produce and share information</para></listitem>
                <listitem><para>The Web can readily be used as a platform for connecting services at global scale</para></listitem>
                <listitem><para>Culmination of thousands of simple, small-scale interactions between agents and resources using founding technologies of HTTP and the URI</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>The Web is not Middleware</para>
            <itemizedlist>
                <listitem><para>Middleware is traditionally used to build distributed systems</para></listitem>
                <listitem><para>No middleware solution has become as pervasive as the Web</para></listitem>
                <listitem><para>Traditional middleware technologies focus on the computer science aspects of distributed systems: components, type systems, objects, remote procedure calls, ...</para></listitem>
                <listitem><para>The Web’s middleware consists of proxies, caches, and content delivery networks, which manage traffic flow</para></listitem>
                <listitem><para>Low-ceremony middleware environment allows Web’s focus to shift to information and document sharing using hypermedia</para></listitem>
                <listitem><para>WWW allows broken links -- explicitly acknowledges we can’t be in control of the whole system all the time</para></listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
    
    <section id="resources">
        <title>Resources</title>
        <para/>
        <itemizedlist>
            <listitem><para>The Web is resource-oriented</para></listitem>
            <listitem><para>Resources are anything we expose to the Web</para>
                <itemizedlist>
                    <listitem><para>Document</para></listitem>
                    <listitem><para>Image</para></listitem>
                    <listitem><para>Device</para></listitem>
                    <listitem><para>Business Process/Workflow</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Consumers interact with resources to achieve their goal</para></listitem>
        </itemizedlist>
        <figure id="dmv-resources">
            <title>Example DMV Licensing Resources</title>
            <graphic fileref="images/dmv-resources.png"/>
        </figure>
    </section>

    <section id="resource-identifiers">
        <title>Resource Identifiers</title>
        <para>Must be able to identify and manipulate resources to use them</para>
        
        <section id="uri">
            <title>Uniform Resource Identifier (URI)</title>
            <itemizedlist>
                <listitem><para>Uniquely identifies a Web resource</para></listitem>
                <listitem><para>Makes resource addressable</para></listitem>
                <listitem><para>Makes resource manipulatable thru an application protocol (such as HTTP)</para></listitem>                    
                <listitem><para>Many-to-One relationship with a Resource</para>
                    <itemizedlist>
                        <listitem><para>A resource can be referenced by multiple URIs</para></listitem>
                        <listitem><para>A URI can only reference a single resource</para></listitem>
                    </itemizedlist>
                    <para>Similar to a person having multiple phone numbers or
                    email addresses when the person is known through different
                    contexts</para>
                    <para><emphasis>As with phone numbers and email addresses, there
                    is no built-in way to determine if two or more URIs 
                    reference the same resource based solely on their value.</emphasis></para>
                </listitem>
                <listitem><para>URI Form<code>&lt;schema&gt;:&lt;scheme-specific structure&gt;</code></para>
                    <itemizedlist>
                        <listitem><para><emphasis>Scheme</emphasis> defines how the URI is interpreted (e.g., http, ftp, urn)</para></listitem>
                        <listitem><para>http://dmv.ejava.info/residents</para></listitem>
                        <listitem><para>ftp://dmv.ejava.info/docs/application.doc</para></listitem>
                        <listitem><para>mailto:admin@dmv.ejava.info</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>HTTP URI Form <code>http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;&lt;?query&gt;</code></para>
                    <para>ex. http://dmv.ejava.info:8080/residents?start=6&amp;count=20</para>
                    <itemizedlist>
                        <listitem><para><code>http</code> associates the URI with the HTTP scheme</para></listitem>
                        <listitem><para><code>dmv.ejava.info</code> identifies a DNS name of a machine with a resource</para></listitem>
                        <listitem><para><code>8080</code> identifies listening port# of the service with access to the resource</para></listitem>
                        <listitem><para><code>/residents</code> mapped by the service to the specific resource</para></listitem>
                        <listitem><para><code>?start=6&amp;count=20</code>mapped by the service as arguments to the method</para></listitem>
                        <listitem><para>HTTP URI Scheme defined in HTTP Specification (RFC 2616)</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        <figure id="dmv-uris">
            <title>Example DMV Licensing Resources</title>
            <graphic fileref="images/dmv-uris.png"/>
        </figure>
        </section>

        <section id="urn">
            <title>Uniform Resource Name (URN)</title>
            <itemizedlist>
                <listitem><para>A URI with a <emphasis>"urn"</emphasis>scheme</para></listitem>
                <listitem><para>Defines a unique name within a namespace</para></listitem>
                <listitem><para>e.g., <code>urn:ssn:123-45-6789</code></para></listitem>                
                <listitem><para>Intended to be a globally unique name</para></listitem>
                <listitem><para>URIs that comply with RFC 2141 and RFC 2611 are URNs</para></listitem>
            </itemizedlist>
        </section>        
        <section id="url">
            <title>Uniform Resource Locator (URL)</title>
            <itemizedlist>
                <listitem><para>A URI that defines how one interacts with a resource</para></listitem>
                <listitem><para>URL is more specific term than a URI</para>                
                    <para>e.g.,</para>
                    <para><code>http://dmv.ejava.info/residents</code> is a URL and URI</para>
                    <para>/residents is a URI but not a URL</para>
                </listitem>
            </itemizedlist>
        </section>        
    </section>

    <section id="resource-representations">
        <title>Resource Representations</title>
        <para/>
        <itemizedlist>
            <listitem><para>A resource must have at least one URI to be addressible on the Web</para></listitem>
            <listitem><para>A URI can have one or more representations</para></listitem>
            <listitem><para>A representation is a view of a resource’s state at an instant in time</para></listitem> 
            <listitem><para>A view is encoded in one or more transferable formats (e.g., XHTML, Atom, XML, JSON, plain text, CSV, MP3, JPEG, etc)</para></listitem>
            <listitem><para>A resource can have properties not captured as part of any of its representations</para></listitem>
            <listitem><para>A respresentation can be cached and replicated</para></listitem>
            <listitem><para>The Web does not constrain representation formats but part of its success has been the proliferation and acceptance of a standard set of well-known formats</para></listitem>
        </itemizedlist>
        <figure id="dmv-representations">
            <title>Example DMV Licensing Representations</title>
            <graphic fileref="images/dmv-representations.png"/>
        </figure>
        
        <note>
            <title>Resource Representation and URIs</title>
            <itemizedlist>
                <listitem><para>Some approaches promote unique URI for each representation type</para>
                    <itemizedlist>
                        <listitem><para>http://dmv.ejava.info/licenses/1234.html</para></listitem>
                        <listitem><para>http://dmv.ejava.info/licenses/1234.xml</para></listitem>
                        <listitem><para>http://dmv.ejava.info/licenses/1234.json</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>Explicitly requests a respresentation type</para></listitem>
                <listitem><para>This practice is a carry-over from respresentations derived from physical files</para></listitem>
                <listitem><para>Bypasses the Web's more sophisticated presentation type negotiation</para></listitem>
                <listitem><para>URIs should be opaque</para></listitem>
            </itemizedlist>
        </note>
        <figure id="dmv-content-negotiation">
            <title>Example DMV Licensing Content Negotiation</title>
            <graphic fileref="images/dmv-content-negotiation.png"/>
        </figure>
    </section>
  </chapter>
  
  <chapter id="rest-arch-style">
    <title>The REpresentational State Transfer (REST) Architectural Style
    <footnote id="rest-footnote"><para>REST in Practice: Hypermedia and Systems Architecture</para></footnote></title>
    <itemizedlist>
        <listitem><para>Many researchers studied the Web to determine the keys to its success</para></listitem>
        <listitem><para>Roy Fielding</para>
            <itemizedlist>
                <listitem>
                    <para>Expert in network architectures</para>
                </listitem>
                <listitem>
                    <para>One of the primary authors of 
                  the version 1.0 and 
                  <ulink url="http://www.w3.org/Protocols/rfc2616/rfc2616.html">1.1 HTTP</ulink> 
                  specifications</para>
                </listitem>
                <listitem>
                    <para>Co-founder of Apacher Server project</para>
                </listitem>
                <listitem>
                    <para>Received doctorate from the University of 
                    California, Irvine in 2000</para>
                </listitem>
                <listitem>
                    <para>Fielding's <ulink url="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">doctoral dissertation</ulink>,
                    <emphasis>"Architectural Styles and the Design of 
                    Network-based Software Architectures"</emphasis>, 2000,
                    describes Representational State Transfer (REST)</para>
                </listitem>

                <listitem><para>Generalized the Web's architectural principles</para></listitem>
                <listitem><para>Identified a framework of constraints</para></listitem>
                <listitem><para>Defined an architectural style</para>
                    <itemizedlist>
                        <listitem><para>Interplay between resources</para></listitem>
                        <listitem><para>Role of resource identifiers</para></listitem>
                        <listitem><para>Limited set of operations with uniform semantics</para></listitem>
                        <listitem><para>Describes the Web as a distributed hypermedia application 
                        whose linked resources communicate by exchanging representations 
                        of resource state</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
    
    <section id="hateoas">
        <title>Hypermedia As The Engine Of Application State (HATEOAS)</title>
        <itemizedlist>
            <listitem><para>Perspective on how the Web can be used for tasks other than information storage and retrieval</para></listitem>
            <listitem><para>The Web is an Application Platform</para></listitem>
            <listitem><para>REST architectural style providing guiding principles for building distributed applications</para>
                <itemizedlist>
                    <listitem><para>Scale well</para></listitem>
                    <listitem><para>Loosely coupled</para></listitem>
                    <listitem><para>Compose functionality across service boundaries</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>A distributed application makes forward progress by transitioning from one state to another</para></listitem>
            <listitem><para>Traditional state machines typically know states in advance</para></listitem>
            <listitem><para>In REST, the transitions are primarily discovered at runtime</para>
                <itemizedlist>
                    <listitem><para>Think of the states you transitioned during your last online purchase</para></listitem>
                    <listitem><para>You advanced the process by navigating a series of discovered links</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        <figure id="dmv-states-get-resident-id">
            <title>Example States to Get Resident ID</title>
            <graphic fileref="images/dmv-states-get-resident-id.png"/>
        </figure>
    </section>
    
    <section id="rest-buzzword">
        <title>REST as a Mis-used Buzzword</title>
        <itemizedlist>
            <listitem><para>REST builds on principles of the Web</para></listitem>
            <listitem><para>Using just the Web is not an application of the REST architectural style</para></listitem>
            <listitem><para><emphasis>The Web</emphasis> could be used to refer to anything that uses HTTP</para></listitem>
            <listitem><para><emphasis>REST</emphasis> should be limited to those that follow the constraints of the architectural principles</para></listitem>
            <listitem><para>Many Web applications incorrectly call themselves RESTful</para></listitem>
        </itemizedlist>
        <note>
            <title>TODO:</title>
            <para>Add a more definitive REST checklist of constraints (e.g., opaque URIs)</para>
        </note>
    </section>
  </chapter>  
  
  <chapter id="web-app-platform">
    <title>The Web as an Application Platform
    <footnote id="web-app-footnote"><para>REST in Practice: Hypermedia and Systems Architecture</para></footnote></title>
    <section id="web-technology-support">
        <title>Web Technology Support</title>
        <para>Practically all operating systems and development platforms provide some kind of support for Web technologies</para>
        <itemizedlist>
            <listitem><para>Process HTTP messages</para></listitem>
            <listitem><para>Work with URIs</para></listitem>
            <listitem><para>Handle XML or JSON payloads</para></listitem>
            <listitem><para>Developed within frameworks</para></listitem>
            <listitem><para>Hosted on Web servers</para></listitem>
        </itemizedlist>
    </section>
    
    <section id="web-scale-performance">
        <title>Web Scale and Performance</title>
        <para/>
        <itemizedlist>
            <listitem><para>Supports a global deployment of networked services</para></listitem>
            <listitem><para>Supports caching to reduce the amount of transfers</para>
                <itemizedlist>
                    <listitem><para>Messaging middleware solutions focus on high thruput, low-latency proprietary data transfers</para></listitem>
                    <listitem><para>The Web starts with a base of lower thruput, higher latency, text-based, open data transfers</para></listitem>
                    <listitem><para>The Web adds shared and dedicated client-side caching for returned representations</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Supports conditional execution to reduce redundant transfers</para></listitem>
        </itemizedlist>
    </section>


    <section id="web-loosely-coupled">
        <title>Web Loose Coupling</title>
        <para/>
        <itemizedlist>
            <listitem><para>The Web must deal with uncontrolled outages</para></listitem>            
            <listitem><para>The Web does not incorporate quality of service guarantees</para>
                <itemizedlist>
                    <listitem><para>Data consistency</para></listitem>
                    <listitem><para>Transactionality</para></listitem>
                    <listitem><para>Referential integrity</para></listitem>
                    <listitem><para>Statefulness</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>May sometimes attempt to interact with non-existant or inconsistent resources</para></listitem>
            <listitem><para>The Web does not offer mechanisms to alert clients of changing resources except thru status codes</para>
                <itemizedlist>
                    <listitem><para><code>200 Okay</code></para></listitem>
                    <listitem><para><code>304 Moved Perminately</code></para></listitem>
                    <listitem><para><code>303 See Other</code></para></listitem>
                    <listitem><para><code>404 Not Found</code></para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="web-business-process">
        <title>Web Business Processes</title>
        <para/>
        <itemizedlist>
            <listitem><para>No explicit business process support</para></listitem>
            <listitem><para>Model business processes thru state machines</para></listitem>
            <listitem><para>Navigate states using links</para></listitem>
        </itemizedlist>
    </section>
    
    <section id="web-uniformity">
        <title>Web Consistency and Uniformity</title>
        <para/>
        <itemizedlist>
            <listitem><para>Agnostic to representation types -- promoting consistent semantics</para></listitem>
            <listitem><para>Follows principles of uniformity and least surprise</para></listitem>
            <listitem><para>Small number of operations with well-known semantics</para></listitem>
            <listitem><para>Plumbing built into the network</para></listitem>
            <listitem><para>Depend on these traits to work properly</para></listitem>
        </itemizedlist>
    </section>    
  </chapter>
  
  <chapter id="web-maturity-level">
    <title>Web Friendliness</title>
    <subtitle>Richardson Maturity Model</subtitle>
    <para>Measurements of the proper use of web technologies in solutions</para>
    
    <section id="richardson-maturity-model">
        <title>Leonard Richardson's Web Maturity Model</title>
        <para/>
        <itemizedlist>
            <listitem><para>Four levels based on support for</para>
                <itemizedlist>
                    <listitem><para>(None)</para></listitem>
                    <listitem><para>URIs</para></listitem>
                    <listitem><para>HTTP</para></listitem>
                    <listitem><para>Hypermedia</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <section id="level-zero-services">
            <title>Level Zero Services</title>
            <para/>
            <itemizedlist>
                <listitem><para>Use a single URI (e.g., http://myorg.org/myservice)</para></listitem>
                <listitem><para>Use a single HTTP method (e.g., POST)</para></listitem>
                <listitem><para>Examples</para>
                    <itemizedlist>
                        <listitem><para>SOAP/WSDL-based Web Services</para></listitem>
                        <listitem><para>XML-RPC Web Services</para></listitem>
                        <listitem><para>Plain Old XML (POX) Web Services</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <note>
                <title>SOAP/WSDL Services are Level Zero</title>
                <para>The ranking does not indicate they are bad. The ranking
                indicates how their design ignores the capability and existing
                infrastructure of the Web.</para>
            </note>
        </section>    
        
        <section id="level-one-services">
            <title>Level One Services</title>
            <para/>
            <itemizedlist>
                <listitem><para>Use many URIs</para></listitem>
                <listitem><para>Use a single HTTP method</para></listitem>
                <listitem><para>Tunnel operations by inserting operation names 
                    and parameters into URI</para></listitem>
                <listitem><para>Can violate expected behaviorof the Web</para>
                    <itemizedlist>
                        <listitem><para>e.g., using GET to modify resources</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <note>
                <title>False Claims for RESTful</title>
                <para>Richardson claims that many services claiming to
                be RESTful are actually level-one services tunneling 
                operations and parameters thru a GET URI.</para>
            </note>
        </section>    
        
        <section id="level-two-services">
            <title>Level Two Services</title>
            <para/>
            <itemizedlist>
                <listitem><para>Use many URIs</para></listitem>
                <listitem><para>Use several HTTP methods per URI</para></listitem>
            </itemizedlist>
            <note>
                <title>CRUD Services are Level Two</title>
                <para>CRUD services properly conforming to the 
                    HTTP method constraints are considered level two in 
                    Richardson's model</para>
            </note>
        </section>    
        
        <section id="level-three-services">
            <title>Level Three Services</title>
            <para/>
            <itemizedlist>
                <listitem><para>Use many URIs</para></listitem>
                <listitem><para>Use several HTTP methods per URI</para></listitem>
                <listitem><para>Use hypermedia as the engine of application state (HATEOAS)</para>
                    <itemizedlist>
                        <listitem><para>Leads consumers thru a trail of state transitions using links</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </section>    
    </section>    
  </chapter>  
</book>

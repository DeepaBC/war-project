<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>ejava.build</groupId>
        <artifactId>dependencies</artifactId>
        <version>3.0-3-SNAPSHOT</version>
        <relativePath>../dependencies</relativePath>
    </parent>

    <artifactId>ejavaws-project</artifactId>
    <packaging>pom</packaging>
    <version>2.0-SNAPSHOT</version>

    <name>EJava Base WS Project</name>
    <description>
        This project defines specific structure and active policies for
        projects that will be used the the production artifacts. Where
        ejava-versions defines passive definitions for what is used,
        this project defines active instructions that will be applied
        to all sub-projects.
    </description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <ejava.version>${project.version}</ejava.version>
    </properties>

    <dependencies>
        <!-- Simple Logging Framework -->
        <!-- defines logging API used in examples -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- RESTEasy-bootstrapped jax-rs classes-->
         <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxrs</artifactId>
            <scope>provided</scope>
        </dependency>    
        <!-- RESTEasy convenience classes for marshalling to services -->
         <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxb-provider</artifactId>
            <scope>provided</scope>
        </dependency>    
    
        <!-- only APIs and not provider classes -->
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- defines test framework -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- defines Spring JavaCong classes used in testing -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Common IO routines -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- slf to log4j integration -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- HTTP Comms Library -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Unit Test HTTP Server -->
        <dependency>
             <groupId>org.mortbay.jetty</groupId>
             <artifactId>jetty</artifactId>
             <scope>test</scope>
        </dependency>
        
    </dependencies>

    <build>
        <!-- define unit test and IT test resource directories -->
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                </includes>
                <filtering>true</filtering>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <excludes>
                    <exclude>**/*.properties</exclude>
                </excludes>
                <filtering>false</filtering>
            </testResource>
        </testResources>

        <plugins>
            <!-- find a free port to use for servlet network port -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                   <execution>
                       <id>find-network-port</id>
                       <phase>initialize</phase>
                       <goals>
                           <goal>reserve-network-port</goal>
                       </goals>
                       <configuration>
                            <portNames>
                                <portName>http.server.port</portName>
                            </portNames>
                       </configuration>
                   </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <http.server.port>${http.server.port}</http.server.port>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
    

    <profiles>
        <!--
            This profile is triggered by the presence of a /src/test directory
            and will build a -tests.jar archive with test artifacts that can be 
            reused by downstream projects.
            -->
        <profile>
            <id>test-jar</id>
            <activation>
                <file>
                    <exists>${basedir}/src/test</exists>
                </file>
            </activation>

            <build>
                <plugins>
                    <!--create a reusable test archive -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>test-jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
            This profile is triggered by the presence of src/it directory. It adds the 
            java and resources directories to the maven build, configures the 
            JUnit test to run during the integration test phases, and causes the
            application to be deployed to/from the server.
        -->
        <profile>
            <id>IT</id>
            <activation>
                <file>
                    <exists>${basedir}/src/it</exists>
                </file>
            </activation>

            <dependencies>
                 <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-spring</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-web</artifactId>
                    <scope>test</scope>
                </dependency>
                <!-- spring needs this to be in jetty's classpath -->
                <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.jboss.spec.javax.ejb</groupId>
                    <artifactId>jboss-ejb-api_3.1_spec</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>

            <build>
                <!-- define IT test resource directory and filter rules -->
                <testResources>
                    <testResource>
                        <directory>src/it/resources</directory>
                        <includes>
                            <include>**/*.properties</include>
                        </includes>
                        <filtering>true</filtering>
                    </testResource>
                    <testResource>
                        <directory>src/it/resources</directory>
                        <excludes>
                            <exclude>**/*.properties</exclude>
                        </excludes>
                        <filtering>false</filtering>
                    </testResource>
                </testResources>

                <plugins>
                    <!-- add the custom src/it directories to maven build -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                           <execution>
                               <id>add-it-tests</id>
                               <phase>generate-test-sources</phase>
                               <goals>
                                   <goal>add-test-source</goal>
                               </goals>
                               <configuration>
                                   <sources>
                                       <source>src/it/java</source>
                                   </sources>
                               </configuration>
                           </execution>
                           <execution>
                               <id>add-it-resources</id>
                               <phase>generate-test-resources</phase>
                               <goals>
                                   <goal>add-test-resource</goal>
                               </goals>
                               <configuration>
                                   <resources>
                                       <resource>
                                           <directory>src/it/resources</directory>
                                       </resource>
                                   </resources>
                               </configuration>
                           </execution>
                        </executions>
                    </plugin>


                    <!-- add failsafe plugin for IT testing -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
    	                <configuration>
    	                    <testSourceDirectory>src/it/java</testSourceDirectory>
    	                </configuration>
                    </plugin>

                    <!-- Ban bad dependencies -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ban-bad-dependencies</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <bannedDependencies>
                                            <searchTransitive>true</searchTransitive>
                                            <excludes>
                                                <exclude>commons-httpclient:commons-httpclient</exclude>
                                            </excludes>
                                        </bannedDependencies>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>jetty</id>
            <!--
            Jetty does not use log4j by default. Use the following command line options to force 
            Jetty to use log4j and your verbosity settings.

            mvn jetty:run -Pjetty
            -->
            <properties>
                <jetty.scanIntervalSeconds>10</jetty.scanIntervalSeconds>
            </properties>
            <dependencies>
                <!-- must override parent scope=provided to have available
                    in jetty servlet engine -->
                 <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jaxrs</artifactId>
                    <scope>compile</scope>
                </dependency>    
                 <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-jaxb-provider</artifactId>
                    <scope>compile</scope>
                </dependency>                
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.mortbay.jetty</groupId>
                        <artifactId>maven-jetty-plugin</artifactId>
                        <configuration>
                            <scanIntervalSeconds>${jetty.scanIntervalSeconds}</scanIntervalSeconds>
                            <!--
                             <contextPath>/</contextPath>
                            -->
                            <overrideWebXml>${basedir}/src/test/resources/local-web/WEB-INF/web.xml</overrideWebXml>
                            <useTestClasspath>true</useTestClasspath>
                            <systemProperties>
                                <systemProperty>
                                    <name>slf4j</name>
                                    <value>true</value>
                                </systemProperty>
                                <systemProperty>
                                    <name>log4j.configuration</name>
                                    <value>file:./target/test-classes/log4j.xml</value>
                                </systemProperty>
                            </systemProperties>
                            <connectors>
                                <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                                    <port>${jetty.port}</port>
                                    <maxIdleTime>60000</maxIdleTime>
                                </connector>
                            </connectors>
                        </configuration>
                        <dependencies>
                        </dependencies>       
                    </plugin>          
                </plugins>
            </build>
        </profile>
        

        <!-- profile for what only runs on Jenkins build server -->
        <profile>
            <id>coberta</id>
            <activation>
                <property>
                    <name>env.BUILD_NUMBER</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>cobertura-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jaxrssec-ssl">
    <title>Enabling SSL</title>
    <para></para>
    
    <section id="jaxrssec-https-jboss">
        <title>Enabling JBoss HTTPS</title>
        <orderedlist>
            <listitem><para>Shutdown JBoss</para></listitem>
            <listitem><para>Generate a server key and keystore</para>
<programlisting language="xml"><![CDATA[
$ cd jboss-as-7.1.1.Final/standalone/configuration
$ keytool -genkey -alias server -keyalg RSA -keystore server.keystore -storepass password -keypass password -dname "CN=127.0.0.1" -validity 365
]]></programlisting>
                <para>Example creates a keystore with a private key the server will use to initial SSL connections with clients</para>
                <note>
                    <para>Change the CN value to be the IP address or DNS name your
                       server responds to callers with.</para>
                </note>
            </listitem>
            
            
            <listitem><para>Export server certificate to register in client trust stores</para>
<programlisting language="xml"><![CDATA[
$ keytool -export -alias server -keystore server.keystore -storepass password -file server.cer                                                                                                                                               
Certificate stored in file <server.cer> 
]]></programlisting>
                <para>Example exports the server's public cert for import into client truststores</para>
            </listitem>
            
            
            <listitem><para>Open standalone/config/standalone.xml in an editor</para></listitem>
            <listitem><para>Add an https connector definition and an https redirect-port to the web tier</para>
<programlisting language="xml"><![CDATA[
<subsystem xmlns="urn:jboss:domain:web:1.1" default-virtual-server="default-host" native="false">
    <connector name="http" protocol="HTTP/1.1" scheme="http" socket-binding="http" redirect-port="8443"/>

    <connector name="https" protocol="HTTP/1.1" scheme="https" socket-binding="https" secure="true" enable-lookups="false">
        <ssl password="password" certificate-key-file="${jboss.server.config.dir}/server.keystore" 
                             protocol="TLSv2" verify-client="false"/>
    </connector>

    <virtual-server name="default-host" enable-welcome-root="true">
        <alias name="localhost"/>
        <alias name="example.com"/>
    </virtual-server>
</subsystem>
]]></programlisting>
                <para>The additional configuration items...</para>
                <itemizedlist>
                    <listitem><para>add a redirect-port for HTTP connector to redirect clients switching from HTTP to HTTPS</para></listitem>
                    <listitem><para>adds a connector for HTTPS traffic and configures it with the 
                        keystore with the server's cert</para></listitem>
                </itemizedlist>                   

            </listitem>
            
            <listitem><para>Restart JBoss</para></listitem>
            <listitem><para>Navigate to the root page for the server using HTTPS</para>
                <itemizedlist>
                    <listitem><para><ulink url="https://localhost:8443"></ulink></para></listitem>
                </itemizedlist>                   
            </listitem>
            <listitem><para>Approve the self-signed certificate warnings</para></listitem>
        </orderedlist>                   
    </section>
    
    
    <section id="jaxrssec-https-app">
        <title>Restricting Application to HTTPS</title>
        <itemizedlist>
            <listitem><para>Add a security-constraint to WEB-INF/web.xml to 
                force all HTTP traffic to HTTPS</para>
<programlisting language=""><![CDATA[
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
...        
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Use SSL</web-resource-name>
            <url-pattern>/rest/*</url-pattern>
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>        
...
</web-app>
]]></programlisting>
                <para>Example web.xml enabling SSL for entire REST application</para>
            </listitem>
        </itemizedlist>                   
    </section>

    
    <section id="jaxrssec-https-client">
        <title>Enabling Client HTTPS</title>
        <itemizedlist>
            <listitem><para>Clients require the public cert for the server they communicate with over SSL</para></listitem>
            <listitem><para>Java clients typically manage these certs in a Java truststore and manage with keytool</para></listitem>
        </itemizedlist>                   
        
        <orderedlist>
            <listitem><para>Import server certificate into truststore</para>
<programlisting language=""><![CDATA[
$ keytool -importcert -alias server -keystore client.truststore -storepass password -file server.cer
Owner: CN=localhost
Issuer: CN=localhost
Serial number: 4fcab96b
Valid from: Sat Jun 02 21:10:03 EDT 2012 until: Sun Jun 02 21:10:03 EDT 2013
Certificate fingerprints:
         MD5:  B6:BD:16:36:A4:27:E0:7A:8D:B8:A6:9E:E8:1B:9A:1E
         SHA1: C9:87:7C:E3:6B:BD:0E:E0:85:FD:09:A3:5C:61:2F:B4:53:60:B8:76
         Signature algorithm name: SHA1withRSA
         Version: 3
Trust this certificate? [no]:  yes 
Certificate was added to keystore
$ ls -ltr client.trustore
-rw-r--r--  1 jcstaff jcstaff   482 2012-06-03 00:29 client.truststore
]]></programlisting>        
                <para>Example keytool session using server certificate to initialize 
                    a client truststore</para>
            </listitem>
            <listitem><para>Place client truststore where it can be accessed
                from client</para>
<programlisting language=""><![CDATA[
src/it/resources/
|-- client.truststore
`-- it.properties
]]></programlisting>       
                <para>The client truststore can be placed in the src/test/resources
                    directory to get it managed with the other test artifacts
                    in the module.</para>
                <warning>
                    <para>Be careful not to place the truststore in a resource 
                       directory Maven is filtering. The filtering process 
                       will corrupt a binary file like the truststore. Add an 
                       exclusion for the binary files or place them in a un-filtered,
                       sibling resource directory.</para>
                </warning> 
            </listitem>
            <listitem><para>Add the truststore to the client runtime configuration</para>
<programlisting language=""><![CDATA[
$ cat src/it/resources/it.properties 
...
javax.net.ssl.trustStore=${project.build.directory}/test-classes/client.truststore
javax.net.ssl.trustStorePassword=password
]]></programlisting>
                <para>Example changes to the integration test properties to 
                    reference the truststore and truststore password</para>        
            </listitem>

            <listitem><para>Configure your global instance(s) of HttpClient with 
                the truststore information or passive validation</para>
<programlisting language="java"><![CDATA[
String trustStorePath=env.getProperty("javax.net.ssl.trustStore");        
SSLSocketFactory socketFactory = null;
if (trustStorePath != null) {
    log.info("using truststore: {}", trustStorePath);
    String trustStorePassword=env.getProperty("javax.net.ssl.trustStorePassword");
    KeyStore trustStore  = KeyStore.getInstance(KeyStore.getDefaultType());
    FileInputStream instream = new FileInputStream(new File(trustStorePath));
    try {
        trustStore.load(instream, 
                trustStorePassword==null?null : trustStorePassword.toCharArray());
        //register the truststore with the networking
        socketFactory = new SSLSocketFactory(trustStore);
    } finally {
        try { instream.close(); } catch (Exception ignore) {}
    }
}
else {
    log.info("*****************************************");
    log.info("not using truststore, accepting all certs");
    log.info("*****************************************");
    socketFactory = new SSLSocketFactory(
            new TrustSelfSignedStrategy(), 
            SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
}
Scheme sch = new Scheme("https", 443, socketFactory); //default SSL port=443
httpClient.getConnectionManager().getSchemeRegistry().register(sch);
]]></programlisting>        
                <para>Sample code snippet from client's HttpClient initialization that
                    registers the truststore and password with the HttpClient instance
                    or accepts all certs if truststore not specified</para>
                <note>
                    <para>Simply comment out <code>javax.net.ssl.trustStore</code>
                        from it.properties to build will any server cert.
                    </para>
                </note>
                <warning>
                    <para>The second strategy is not secure and should only be used
                        in dynamic test environments where the certificate of the server
                        is not easily known ahead of time.</para>
                </warning>
            </listitem>

            <listitem><para>Add a system property to force all communications with
                JBoss 7 to use TLSv1. There was a useful post on the web
                <ulink url="http://stackoverflow.com/questions/9828414/receiving-sslhandshakeexception-handshake-failure-despite-my-client-ignoring-al">here</ulink>
                that pointed out the issue and solution for getting a client 
                and JBoss 7 to communicate over SSL. 
                </para>
                <warning>
                    <para>I think this setting was only necessary when JBoss was
                        set to use TLSv1. Try first before you blindly add this
                        property.</para>
                </warning>
<programlisting language="java"><![CDATA[
//there is an issue where some of the protocol exchange attempts to use
//TLSv2 -- this post provided a quick solution
//http://stackoverflow.com/questions/9828414/receiving-sslhandshakeexception-handshake-failure-despite-my-client-ignoring-al
System.setProperty("https.protocols", "TLSv1");
]]></programlisting>        
                <para>A setting that is needed to get the cert handshake completed
                    between the client and JBoss.</para>
            </listitem>
        </orderedlist>
    </section>

    <section id="jaxrssec-app-client-redirects">
        <title>Customizing/Controlling Redirects</title>
        <itemizedlist>
            <listitem><para>Client issues request to specific URI</para></listitem>
            <listitem><para>Server replies with a 3xx (e.g., 302 Temporarily Moved) and a possible Location to use</para></listitem>
            <listitem><para>HttpClient can automatically follow the re-direct or return control to the client</para></listitem>
            <listitem><para>This situation occurs when you access the application with HTTP and the security constraints 
                redirect the client to an HTTPS URL</para>
<programlisting language=""><![CDATA[
GET /jaxrs-security-dmv-war6/rest/dmv HTTP/1.1
Accept: application/vnd.dmv.ejava+xml
Via: 1.1 localhost (Apache-HttpClient/4.1.3 (cache))
Host: localhost:8080
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)


HTTP/1.1 302 Moved Temporarily
Server: Apache-Coyote/1.1
Pragma: No-cache
Cache-Control: no-cache
Expires: Wed, 31 Dec 1969 19:00:00 EST
Location: https://localhost:8443/jaxrs-security-dmv-war6/rest/dmv
Content-Length: 0
Date: Sun, 03 Jun 2012 20:47:50 GMT
]]></programlisting>
                    <para>Example exchange where client being re-directed from HTTP URI to a HTTPS URI</para>
                </listitem>
        </itemizedlist>                   
            <warning>
                <para>Non-GET and HEAD redirects can get complicated. PUT and
                    POST commonly carry payloads that would need to be re-issued
                    to the new location. I found it much more sane to go 100%
                    with SSL or not and not switch in between at runtime. However,
                    HttpClient does provide extension points to help implement
                    any re-directs required.</para>
            </warning>
        <orderedlist>
            <listitem><para>(Optional!) Create a class that can help your HttpClient
                library follow re-directs in a manner that is necessary for your
                application.</para>
<programlisting language=""><![CDATA[
/**
 * HttpClient, by default, redirects GET and HEAD to new Locations with
 * the previous method and GET for all other types. We provide this class
 * to configure HttpClient to be more liberal with re-directs and to
 * re-issue the same method at the new Location since that is what has 
 * to happen when encountering an HTTP->HTTPS redirect. 
 */
private class FollowRedirectStrategy extends DefaultRedirectStrategy {
...
}
]]></programlisting>
                <para>An example class we will register with our HttpClient instance(s)</para>
            </listitem>

            <listitem><para>(Optional!) Create a method within the redirect strategy 
                class that tells HttpClient whether to follow a specific re-direct.</para>
<programlisting language=""><![CDATA[
private class FollowRedirectStrategy extends DefaultRedirectStrategy {
    /**
     * Without a rule like this in place -- the caller will get a 302 back
     * for a DELETE when issued to an HTTP URL and being re-directed to
     * an HTTPS URL.
     */
    @Override
    public boolean isRedirected(HttpRequest request,
            HttpResponse response, HttpContext context)
            throws ProtocolException {
        boolean isRedirect=false;
        try {
            isRedirect=super.isRedirected(request, response, context);
        } catch (ProtocolException ex) {
            throw new RuntimeException("ProtocolException durint isRedirected:" 
                    + ex.getLocalizedMessage());
        }
        //add a rule that will cause DELETE to redirect
        if (!isRedirect) {
            String method = request.getRequestLine().getMethod();
            if (method.equalsIgnoreCase(HttpDelete.METHOD_NAME)) {
                int status = response.getStatusLine().getStatusCode();
                return (status == 301 || status == 302);
            }
        }
        return false;
    }
...    
}
]]></programlisting>
                <para>An example rule extension where we add in a DELETE rule to go with the default HEAD and GET rules.</para>
            </listitem>


            <listitem><para>(Optional!) Create gerRedirect override that 
                returns the proper HttpUriRequest for the re-direct. For example,
                some POST re-directs are normally followed by a GET.</para>
<programlisting language=""><![CDATA[
private class FollowRedirectStrategy extends DefaultRedirectStrategy {
...
    /**
     * Without this rule in place, HttpClient will issue a GET for re-issued
     * POST, PUT, and DELETE calls.
     */
    @Override
    public HttpUriRequest getRedirect(
            final HttpRequest request,
            final HttpResponse response,
            final HttpContext context) throws ProtocolException {
        URI uri = getLocationURI(request, response, context);
        String method = request.getRequestLine().getMethod();            
        if (method.equalsIgnoreCase(HttpHead.METHOD_NAME)) {
            return new HttpHead(uri);
        }
        else if (method.equalsIgnoreCase(HttpDelete.METHOD_NAME)) {
            return new HttpDelete(uri);
        }
        //these types will have payloads that we cannot pickup here
        //else if (method.equalsIgnoreCase(HttpPut.METHOD_NAME)) {
        //    return new HttpPut(uri);
        //}
        //else if (method.equalsIgnoreCase(HttpPost.METHOD_NAME)) {
        //    return new HttpPost(uri);
        //}
        else {
            return new HttpGet(uri);
        }
    }
}
]]></programlisting>
                <para>Example rule extension where we use a a DELETE when an initial DELETE was re-directed</para>
            </listitem>


            <listitem><para>Register the redirect with HttpClient</para>
<programlisting language="java"><![CDATA[
DefaultHttpClient httpClient = new DefaultHttpClient();
httpClient.setRedirectStrategy(new FollowRedirectStrategy());
]]></programlisting>
            </listitem>

        </orderedlist>                   
    </section>

</chapter>  
  
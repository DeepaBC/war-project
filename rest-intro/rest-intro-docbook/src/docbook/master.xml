<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Introduction to REST</title>
    <releaseinfo>1.0-SNAPSHOT</releaseinfo>
  </bookinfo>
  <toc/>
  <preface id="preface" revision="1">
    <title>Preface</title>
    <para>This is a para.</para>
    <para>
      In some of the example listings, what is meant to be displayed on 
      one line does not fit inside the available page width. These 
      lines have been broken up. A &apos;\&apos; at the end of a line 
      means that a break has been introduced to fit in the page, with 
      the following lines indented. So:
      <programlisting>
            Let&apos;s pretend to have an extremely \
            long line that \
            does not fit
            This one is short
         </programlisting>
      Is really:
      <programlisting>
            Let&apos;s pretend to have an extremely long line that does not fit
            This one is short
         </programlisting>
    </para>
  </preface>
  <chapter id="RESTPrinciples">
    <title>REST Principles</title>
    <para>dddd</para>
    <para/>
    <orderedlist>
        <listitem id="item1">a</listitem>
    </orderedlist>
  </chapter>
  <chapter id="Orientation">
    <title>Getting Oriented</title>
    <para/>
    <section id="ServiceOriented">
      <title>Service-Oriented</title>
      <para/>
    </section>
    <section id="ResourceOriented">
      <title>Resource-Oriented</title>
      <para/>
    </section>
  </chapter>
  <chapter id="xxx">
    <title/>
    <para/>
  </chapter>
  <chapter id="CDI">
    <title>CDI Integration</title>
    <para>This module provides integration with JSR-299 (Contexts and 
    Dependency Injection for the Java EE platform)</para>
    <section>
      <title>Using CDI beans as JAX-RS components</title>
      <para>Both the JAX-RS and CDI specifications introduce their own 
      component model. On the one hand, every class placed in a CDI 
      archive that fulfills a set of basic constraints is implicitly a 
      CDI bean. On the other hand, explicit decoration of your Java 
      class with <code>@Path</code> or <code>@Provider</code> is 
      required for it to become a JAX-RS component. Without the 
      integration code, annotating a class suitable for being a CDI 
      bean with JAX-RS annotations leads into a faulty result (JAX-RS 
      component not managed by CDI) The resteasy-cdi module is a bridge 
      that allows RESTEasy to work with class instances obtained from 
      the CDI container.</para>
      <para>During a web service invocation, resteasy-cdi asks the CDI 
      container for the managed instance of a JAX-RS component. Then, 
      this instance is passed to RESTEasy. If a managed instance is not 
      available for some reason (the class is placed in a jar which is 
      not a bean deployment archive), RESTEasy falls back to 
      instantiating the class itself.</para>
      <para>As a result, CDI services like injection, lifecycle 
      management, events, decoration and interceptor bindings can be 
      used in JAX-RS components.</para>
    </section>
    <section>
      <title>Default scopes</title>
      <para>A CDI bean that does not explicitly define a scope is <code>
      @Dependent</code> scoped by default. This pseudo scope means that 
      the bean adapts to the lifecycle of the bean it is injected into. 
      Normal scopes (request, session, application) are more suitable 
      for JAX-RS components as they designate component&apos;s 
      lifecycle boundaries explicitly. Therefore, the resteasy-cdi 
      module alters the default scoping in the following way:</para>
      <itemizedlist>
        <listitem>
          <para>If a JAX-RS root resource does not define a scope 
          explicitly, it is bound to the Request scope.</para>
        </listitem>
        <listitem>
          <para>If a JAX-RS Provider or <code>
          javax.ws.rs.Application</code> subclass does not define a 
          scope explicitly, it is bound to the Application scope.</para>
        </listitem>
      </itemizedlist>
      <warning>
        <para>Since the scope of all beans that do not declare a scope 
        is modified by resteasy-cdi, this affects session beans as 
        well. As a result, a conflict occurs if the scope of a 
        stateless session bean or singleton is changed automatically as 
        the spec prohibits these components to be @RequestScoped. 
        Therefore, you need to explicitly define a scope when using 
        stateless session beans or singletons. This requirement is 
        likely to be removed in future releases.</para>
      </warning>
    </section>
    <section>
      <title>Configuration within JBoss 6 M4 and Higher</title>
      <para>CDI integration is provided with no additional 
      configuration with JBoss AS 6-M4 and higher.</para>
    </section>
    <section>
      <title>Configuration with different distributions</title>
      <para>
        Provided you have an existing RESTEasy application, all that 
        needs to be done is to add the resteasy-cdi jar into your 
        project&apos;s 
        <code>WEB-INF/lib</code>
         directory. When using maven, this can be achieve by defining 
        the following dependency.
        <programlisting language="xml">&lt;dependency&gt;
	&lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;
	&lt;artifactId&gt;resteasy-cdi&lt;/artifactId&gt;
	&lt;version&gt;${project.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
      </para>
      <para>Furthermore, when running a pre-Servlet 3 container, the 
      following context parameter needs to be specified in web.xml. 
      (This is done automatically via web-fragment in a Servlet 3 
      environment)</para>
      <programlisting language="xml">&lt;context-param&gt;
	&lt;param-name&gt;resteasy.injector.factory&lt;/param-name&gt;
	&lt;param-value&gt;org.jboss.resteasy.cdi.CdiInjectorFactory&lt;/param-value&gt;
&lt;/context-param&gt;</programlisting>
      <para>When deploying an application to a Servlet container that 
      does not support CDI out of the box (Tomcat, Jetty, Google App 
      Engine), a CDI implementation needs to be added first. 
      <ulink url="http://docs.jboss.org/weld/reference/latest/en-US/html/environments.html">
      Weld-servlet module</ulink> can be used for this purpose.</para>
    </section>
  </chapter>
</book>

<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Introduction to REST</title>
  </bookinfo>
  <preface id="preface">
    <title>Primary Sources</title>
    <orderedlist>
        <listitem><para>
        <emphasis>"REST in Practice; Hypermedia Systems Architecture"</emphasis>, 
        Jim Weber, Savas Parastatidis, Ian Robinson, 2010 
        <ulink url="http://shop.oreilly.com/product/9780596805838.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/REST-Practice-Hypermedia-Architecture-ebook/dp/B0046RERXY/ref=kinw_dp_ke?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596805829 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTful Web Services Cookbook"</emphasis>, 
        Subbu Allamaraju, 2010, 
        <ulink url="http://shop.oreilly.com/product/9780596801694.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/RESTful-Web-Services-Cookbook-ebook/dp/B0043D2ESQ/ref=kinw_dp_ke?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596801688 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTful Java with JAX-RS (Animal Guide)"</emphasis>, 
        Bill Burke, 2009, 
        <ulink url="http://shop.oreilly.com/product/9780596158057.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/RESTful-JAX-RS-Animal-Guide-ebook/dp/B0043D2ELI/ref=pd_sim_kstore_3?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596158041 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTEasy JAX-RS User's Manual"</emphasis>, JBoss/RedHat,
        <ulink url="http://docs.jboss.org/resteasy/docs/2.3.1.GA/userguide/html/index.html">RESTEasy Web Site</ulink>
        </para></listitem>
        <listitem><para>
        <emphasis>"Representational State Transfer",</emphasis>
        <ulink url="http://en.wikipedia.org/wiki/Representational_state_transfer">Wikipedia</ulink>
        </para>
        </listitem>
    </orderedlist>
  </preface>
  
  <toc/>
  
  <chapter id="web-http-methods">
    <title>Web HTTP Methods</title>
    <section id="UniformInterface">
        <title>Uniform Interface</title>
        <para>All interaction with Resources follow a uniform interface
        with a defined set of method semantics</para>
        <variablelist>
            <varlistentry>
                <term><filename>OPTIONS</filename></term>
                <listitem><para>Returns a list of all methods supported for 
                a specified resource</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>*POST*</filename></term>
                <listitem><para>Create a new resource. Also used to tunnel
                other communications.</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>*GET*</filename></term>
                <listitem><para>Requests a representation for a 
                specified resource. This method should only read information
                and have no other impact.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>HEAD</filename></term>
                <listitem><para>Acts identical to GET except to only return
                metadata and not the representation.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>*PUT*</filename></term>
                <listitem><para>Updates the representation of a specified resource.
                Can create new resources when updating a collection resource.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>PATCH</filename></term>
                <listitem><para>Make a partial update to a specified resource.
                </para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>*DELETE*</filename></term>
                <listitem><para>Deletes a specified resource</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>TRACE</filename></term>
                <listitem><para>Echoes back a submitted request.</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>CONNECT</filename></term>
                <listitem><para>Converts a request connection to a TCP/IP tunnel. 
                Primarily used to support HTTPS communication thru an unencrypted
                HTTP proxy.</para></listitem>
            </varlistentry>        
        </variablelist>
        <tip>
            <title>Use Methods for their Intended Purpose</title>
            <para>
            A developer is not prevented from mis-applying HTTP methods.
            However, not using resources and methods for their intended and 
            documented purpose will require unique effort on behalf of each 
            client to understand and will be inconsistent with the 
            network infrastructure that has been designed to work with the 
            WWW. 
            </para>
        </tip>
    </section>
    
    <section id="MethodSafety">
        <title>Method Safety</title>
        <variablelist>
           <varlistentry><term><filename>Safe</filename></term>
               <listitem><para>Intended for information retrieval and should
               not change the state of a resource. Any non-trivial change
               to a resource by any of these methods is discouraged.</para>
               <itemizedlist>
                    <listitem><para>OPTIONS</para></listitem>
                    <listitem><para>GET</para></listitem>
                    <listitem><para>HEAD</para></listitem>
                    <listitem><para>TRACE</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
           <varlistentry><term><filename>Unsafe</filename></term>
               <listitem><para>Intended for actions that cause side effects.
               Non-trivial consequences should be limited to the following
               methods.</para>
               <itemizedlist>
                    <listitem><para>DELETE</para></listitem>
                    <listitem><para>PUT</para></listitem>
                    <listitem><para>POST</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
        </variablelist>
        <tip>
            <title>Abide by Method Safety Rules</title>
            <para>
            A developer is not prevented from mis-applying HTTP methods.
            However, using methods that are expected to be safe 
            (e.g., <code>GET</code>) to make a change
            to a resource is in violation of the protocol and will make 
            your interface non-uniform. 
            </para>
        </tip>
    </section>

    <section id="MethodIdempotence">
        <title>Method Idempotence</title>
        <variablelist>
           <varlistentry><term><filename>Idempotent</filename></term>
               <listitem><para>Multiple invocations of an identical request
               will result in the same effect. The following methods should
               be designed to be idempotent.</para>
               <itemizedlist>
                    <listitem><para>DELETE</para></listitem>
                    <listitem><para>PUT</para></listitem>
                    <listitem><para>OPTIONS</para></listitem>
                    <listitem><para>GET</para></listitem>
                    <listitem><para>HEAD</para></listitem>
                    <listitem><para>TRACE</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
           <varlistentry><term><filename>non-Idempotent</filename></term>
               <listitem><para>Sending multilpe identical requests may 
               further impact state. Non-idempotent behavior should be 
               limited to the following method.</para>
               <itemizedlist>
                    <listitem><para>POST</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
        </variablelist>
        <tip>
            <title>Strive for Idempotence</title>
            <para>
                Idempotent methods are much easier to manage. You want to 
                strive for idempotent behavior for both safe and un-safe 
                methods.
            </para>
        </tip>
    </section>
  </chapter>
      
    
  <chapter id="crud-services">
    <title>CRUD Web Services</title>
    <subtitle>Using HTTP as an Application Protocol instead of a Transport Protocol</subtitle>
    <para>Treats the network and HTTP as an integral part of the 
    distributed system and not just a means to transport information</para>
    <para>Exposes how the Web is a big framework for building distributed systems</para>
    
    <section id="modeling-resources">
        <title>Resources</title>
        <subtitle>Modeling DMV Resident ID Process as Resources</subtitle>
        <para/>
        
        <section id="dmv-business-model">
            <title>Basic Business Model</title>
            <figure>
                <title>Resident ID Application State Model</title>
                <graphic fileref="images/dmv-states-get-resident-id.png"/>
            </figure>
            <itemizedlist>
                <listitem><para>Application is received when the applicant submits it</para></listitem>
                <listitem><para>The DMV clerk accepts or rejects the application and materials</para></listitem>
                <listitem><para>The applicant must pay a fee</para></listitem>
                <listitem><para>The applicant must accept a photo to be used</para></listitem>
                <listitem><para>The applicant receives ID card</para></listitem>
            </itemizedlist>
        </section>

        <section id="apply-methods">
            <title>Apply HTTP Methods to Trigger the State Machine</title>
            <itemizedlist>
                <listitem><para>POST to create an application and resident</para></listitem>
                <listitem><para>GET to retrieve the application or resident</para></listitem>
                <listitem><para>POST to update the application or resident</para></listitem>
                <listitem><para>DELETE to remobe the application or resident</para></listitem>
            </itemizedlist>
        </section>        

        <section id="dmv-resources">
            <title>DMV Resources</title>
            <figure>
                <title>Application and Resident Resources</title>
                <graphic fileref="images/dmv-uris.png"/>
            </figure>
            <itemizedlist>
                <listitem><para>Users interact with system thru URIs</para>
                    <itemizedlist>
                        <listitem><para>Manipulate Resident ID Application thru <code>/residentapps</code></para></listitem>
                        <listitem><para>Manipulate Residents thru <code>/residents</code></para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <note>
                <para>CRUD Web Services are considered Level *Two* in Richardson's maturity model</para>
            </note>
        </section>
        
        <section id="uri-templates">
            <title>URI Templates</title>
            <table frame="all">
                <title></title>
                <tgroup cols="3">
                    <colspec colname="method"/>
                    <colspec colname="uri"/>
                    <colspec colname="description"/>
                    <thead>
                        <row>
                            <entry>Method</entry>
                            <entry>URI</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>POST</entry>
                            <entry>/residentapps</entry>
                            <entry>Create a Resident ID Application</entry>
                        </row>
                        <row>
                            <entry>GET</entry>
                            <entry>/residentapps/{id}</entry>
                            <entry>Get a Resident ID Application</entry>
                        </row>
                        <row>
                            <entry>GET</entry>
                            <entry>/residentapps?firstName={firstName}&amp;lastName={lastName}</entry>
                            <entry>Search for a Resident ID Application by name</entry>
                        </row>
                        <row>
                            <entry>PUT</entry>
                            <entry>/residentapps/{id}</entry>
                            <entry>Update a Resident ID Application</entry>
                        </row>
                        <row>
                            <entry>DELETE</entry>
                            <entry>/residentapps/{id}</entry>
                            <entry>Delete a Resident ID Application</entry>
                        </row>
                        <row>
                            <entry>GET</entry>
                            <entry>/residents?firstName={firstName}&amp;lastName={lastName}</entry>
                            <entry>Search for a Resident by name</entry>
                        </row>
                        <row>
                            <entry>GET</entry>
                            <entry>/residents/{id}</entry>
                            <entry>Get a specific Resident</entry>
                        </row>
                        <row>
                            <entry>PUT</entry>
                            <entry>/residents/{id}</entry>
                            <entry>Update a specific Resident</entry>
                        </row>
                        <row>
                            <entry>DELETE</entry>
                            <entry>/residents/{id}</entry>
                            <entry>Delete a specific Resident</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
    </section>
  </chapter>
  
  
  <chapter id="post-create">
    <title>Using POST to Create a Resource</title>
    <para/>
    
    <figure>
        <title>Using POST to Create a Resource</title>
        <graphic fileref="images/dmv-post-request.png"/>
    </figure>
    <itemizedlist>
        <listitem><para>Client creates an application by</para>
            <itemizedlist>
                <listitem><para>issuing the POST method</para></listitem>
                <listitem><para>using the <code>/applications</code> URI</para></listitem>
                <listitem><para>supplying a representation for the resource</para></listitem>
                <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided representation</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request is completed</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>201 Created</code> status code</para></listitem>
                        <listitem><para>sets <code>Location</code> header to URI of created content</para></listitem>
                        <listitem><para>optionally provides a representation of the content</para></listitem>
                        <listitem><para>sets <code>Content-Location</code> to the URI of the provided representation</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided representation</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>uses the provided <code>Location</code> to reference the resource in the future</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to a bad client input</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>400 Bad Request</code> status code</para></listitem>
                        <listitem><para>optionally provides a representation of the error</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided error representation</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>should not repeat this request with the same data</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to a server error</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>500 Internal Server Error</code> status code</para></listitem>
                        <listitem><para>optionally provides a representation of the error</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided error representation</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>can retry their valid request at a later time</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
    
    <section id="post-create-request">
        <title>POST Request</title>
        <para/>
        <figure id="post-create-request-figure">
            <title>POST Create Request</title>
            <programlistingco>
                <areaspec units="linerange">
                    <area id="post-create-request-uri" coords="1"/>
                    <area id="post-create-request-content-type" coords="2"/>
                    <area id="post-create-request-content-length" coords="3"/>
                    <area id="post-create-request-host" coords="4"/>
                    <area id="post-create-request-representation" coords="8"/>
                </areaspec>
                <programlisting language="text" linenumbering="numbered" ><![CDATA[POST /restintro-dmv-war6/jax-rs/applications HTTP/1.1
Content-Type: application/xml
Content-Length: 486
Host: dmv.ejava.info:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
   <ns2:residentIDApplication xmlns:ns2="http://dmv.ejava.info">    
      <id>0</id>    
      <identity>        
         <id>0</id>        
         <firstName>payton</firstName>        
         <lastName>manning</lastName>        
         <contacts>            
            <contact>                
               <type>RESIDENCE</type>                
               <city>Indianapolis</city>                
               <state>IN</state>            
            </contact>        
         </contacts>    
      </identity>
   </ns2:residentIDApplication>   
]]></programlisting>
            <calloutlist>
                <callout arearefs="post-create-request-uri"><para>Method and target URI for resource</para></callout>
                <callout arearefs="post-create-request-content-type"><para>Content type of resource representation in payload</para></callout>
                <callout arearefs="post-create-request-content-length"><para>Number of bytes in representation</para></callout>
                <callout arearefs="post-create-request-host"><para>Target hostname and port hosting resource -- useful with virtual hosts</para></callout>
                <callout arearefs="post-create-request-representation"><para>Client-supplied representation</para></callout>
            </calloutlist>
            </programlistingco>
        </figure>
    </section>
    
    <section id="post-created-response">
        <title>POST Created Response</title>
        <para/>
        <figure id="post-created-response-figure">
            <title>POST Created Response</title>
                <programlistingco>
                    <areaspec>
                        <area id="status-code" coords="1"/>
                        <area id="last-modified" coords="3"/>
                        <area id="post-response-location" coords="4"/>
                        <area id="post-response-content-location" coords="5"/>
                        <area id="post-response-content-type" coords="6"/>
                        <area id="post-response-representation" coords="10"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 201 Created
Server: Apache-Coyote/1.1
Last-Modified: Wed, 28 Mar 2012 03:07:26 GMT
Location: http://dmv.ejava.info:8050/restintro-dmv-war6/jax-rs/applications/26
Content-Location: http://dmv.ejava.info:8050/restintro-dmv-war6/jax-rs/applications/26
Content-Type: application/xml
Content-Length: 593
Date: Wed, 28 Mar 2012 03:07:33 GMT


   <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
      <ns2:residentIDApplication xmlns:ns2="http://dmv.ejava.info">    
         <id>26</id>    
         <updated>2012-03-27T23:07:26.373-04:00</updated>    
         <created>2012-03-27T23:07:26.373-04:00</created>    
         <identity>        
            <id>0</id>        
            <firstName>payton</firstName>        
            <lastName>manning</lastName>        
            <contacts>            
               <contact>                
                  <type>RESIDENCE</type>                
                  <city>Indianapolis</city>                
                  <state>IN</state>            
               </contact>        
            </contacts>    
         </identity>
      </ns2:residentIDApplication>    
]]></programlisting>
            <calloutlist>
                <callout arearefs="status-code"><para>Server status code</para></callout>
                <callout arearefs="last-modified"><para>Date resource last modified - useful in caching</para></callout>
                <callout arearefs="post-response-location"><para>URI where POST created the resource</para></callout>
                <callout arearefs="post-response-content-location"><para>URI of the resource represented in response payload</para></callout>
                <callout arearefs="post-response-content-type"><para>Content type of the resource representation provided payload</para></callout>
                <callout arearefs="post-response-representation"><para>Server supplied resource representation</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
        <note>
            <para>Optional for the POST to return a resource representation</para>
        </note>
    </section>

    <section id="post-bad-request-response">
        <title>POST Response with Bad Request</title>
        <para/>
        <figure id="post-bad-request-response-figure">
            <title>POST Response with Bad Request</title>
                <programlistingco>
                    <areaspec>
                        <area id="post-bad-request-status-code" coords="1"/>
                        <area id="post-bad-request-content-type" coords="3"/>
                        <area id="post-bad-request-representation" coords="8"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 400 Bad Request
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 29
Date: Sat, 31 Mar 2012 01:26:41 GMT
Connection: close

client error:identity missing
]]></programlisting>
            <calloutlist>
                <callout arearefs="post-bad-request-status-code"><para>Server status code indicating the request failed due to bad input. The request should not be repeated</para></callout>
                <callout arearefs="post-bad-request-content-type"><para>MediaType for the payload expressing the error</para></callout>
                <callout arearefs="post-bad-request-representation"><para>Optional error payload. In this specific case, a text error message is being returned.</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
        <note>
            <title>Consider Postel's Law when determining Bad Request</title>
            <para> "be conservative in what you do, be liberal in what you accept from others" (often reworded as "be conservative in what you send, liberal in what you accept").
            <footnote id="postels-law"><para><ulink url="http://en.wikipedia.org/wiki/Jon_Postel#Postel.27s_Law">http://en.wikipedia.org/wiki/Jon_Postel#Postel.27s_Law</ulink></para></footnote></para>
        </note>
    </section>

    <section id="post-server-error-response">
        <title>POST Response with Server Error</title>
        <para/>
        <figure id="post-server-error-response-figure">
            <title>POST Response with Server Error</title>
                <programlistingco>
                    <areaspec>
                        <area id="post-server-error-status-code" coords="1"/>
                        <area id="post-server-error-content-type" coords="3"/>
                        <area id="post-server-error-representation" coords="8"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 500 Internal Server Error
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 44
Date: Sat, 31 Mar 2012 01:29:34 GMT
Connection: close

server error:server error completing request
]]></programlisting>
            <calloutlist>
                <callout arearefs="post-server-error-status-code"><para>Server status code indicating the request failed due a server failure. A retry can be performed later.</para></callout>
                <callout arearefs="post-server-error-content-type"><para>MediaType for the payload expressing the error</para></callout>
                <callout arearefs="post-server-error-representation"><para>Optional error payload. In this specific case, a text error message is being returned.</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
        <note>
            <title>Design for Errors to Convey Information</title>
            <para>Error representations for service responses should be well 
            thought out. When things go bad - people want useful information. This 
            example at least provides a status code and a context-specific 
            text reason that can be displayed or logged. 
            </para>
        </note>
    </section>
    
    <section id="other-post-response-status-codes">
        <title>Other Possible POST Response Status Codes</title>
        <para>(not a complete list)</para>
        <itemizedlist>
            <listitem><para>503 Service Unavailable</para>
                <itemizedlist>
                    <listitem><para><code>Retry-After</code> header</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="createApplication-jaxrs-impl">
        <title>Sample JAX-RS POST (application/xml) Implementation</title>
        <para/>
        <figure id="createApplication-jaxrs-impl-figure">
            <title>Sample JAX-RS POST (application/xml) Implementation</title>
            <programlistingco>
                <areaspec>
                    <area id="createApplication-jaxrs-impl-base-uri" coords="1"/>
                    <area id="createApplication-jaxrs-impl-method" coords="4"/>
                    <area id="createApplication-jaxrs-impl-consumes" coords="5"/>
                    <area id="createApplication-jaxrs-impl-produces" coords="6"/>
                    <area id="createApplication-jaxrs-impl-formatted" coords="7"/>
                    <area id="createApplication-jaxrs-impl-service" coords="10"/>
                    <area id="createApplication-jaxrs-impl-build-uri" coords="11"/>
                    <area id="createApplication-jaxrs-impl-201" coords="14"/>
                    <area id="createApplication-jaxrs-impl-400" coords="23"/>
                    <area id="createApplication-jaxrs-impl-500" coords="29"/>
                </areaspec>
                <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Path("jax-rs/applications") 
public class ApplicationsRS {
...
    @POST
    @Consumes(MediaType.APPLICATION_XML)
    @Produces(MediaType.APPLICATION_XML)
    @Formatted
    public Response createApplication(ResidentIDApplication app) {
        try {
            Application createdApp = service.createApplication(app);
            URI uri=uriInfo.getAbsolutePathBuilder()
                    .path(ApplicationsRS.class, "getApplicationById")
                    .build(createdApp.getId());
            return Response
                    .created(uri)   //201-Created and a Location header of what was created
                    .entity(createdApp) //marshals the representation in response
                    .contentLocation(uri) //Content-Location header of representation
                    .type(MediaType.APPLICATION_XML) //Content-Type header of representation
                    .lastModified(createdApp.getUpdated()) //Last-Modified header of the representation
                    .build();
        } 
        catch (BadArgument ex) {
            return Response.status(Status.BAD_REQUEST)
                    .entity("client error:" + ex.getLocalizedMessage())
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        }
        catch (Exception ex) {
            return Response.serverError()
                    .entity("server error:" + ex.getLocalizedMessage())
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        }
    }
]]></programlisting>
            <calloutlist>
                <callout arearefs="createApplication-jaxrs-impl-base-uri"><para>Base URI for all methods in class</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-method"><para>Method responds to POST method</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-consumes"><para>Method accepts XML MediaType</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-produces"><para>Method returns XML MediaType</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-formatted"><para>RESTEasy extension to format XML response</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-service"><para>JAX-RS interface delegates to service implementation</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-build-uri"><para>JAX-RS helper to build representation URI</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-201"><para>JAX-RS helper to build 201 status and representation</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-400"><para>RESTEasy extension to trigger 400 status</para></callout>
                <callout arearefs="createApplication-jaxrs-impl-500"><para>RESTEasy extension to trigger 500 status</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>
  </chapter>

  <chapter id="get-state">
    <title>Using GET to Read Resource State</title>
    <para/>
    
    <figure>
        <title>Using GET to Read Resource State</title>
        <graphic fileref="images/dmv-get-state.png"/>
    </figure>
    <itemizedlist>
        <listitem><para>Client requests application by</para>
            <itemizedlist>
                <listitem><para>issuing the GET method</para></listitem>
                <listitem><para>using the <code>/applications/{id}</code> URI provided by the POST</para></listitem>
                <listitem><para>sets <code>Accept</code> header to MediaTypes willing to receive</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request is completed</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>200 OK</code> status code</para></listitem>
                        <listitem><para>provides a representation of the resource</para></listitem>
                        <listitem><para>sets <code>Content-Location</code> to the URI of the provided representation</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided representation</para></listitem>
                        <listitem><para>optionally sets <code>Last-Modified</code> header to the last timestamp of the last modification</para></listitem>
                        <listitem><para>optionally sets <code>ETag</code> header to an identity representing the current state</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>can re-issue their request many times without changing resource</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to an unknown URI</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>404 Unknown Resource</code> status code</para></listitem>
                        <listitem><para>optionally provides a representation of the error</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided error representation</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to a server error</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>500 Internal Server Error</code> status code</para></listitem>
                        <listitem><para>optionally provides a representation of the error</para></listitem>
                        <listitem><para>sets <code>Content-Type</code> header to MediaType of the provided error representation</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>can retry their valid request at a later time</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
    
    <section id="get-state-request">
        <title>GET Representation Request</title>
        <para/>
        <figure id="get-state-request-figure">
            <title>GET Representation Request</title>
            <programlistingco>
                <areaspec units="linerange">
                    <area id="get-state-request-uri" coords="1"/>
                    <area id="get-state-accept" coords="2"/>
                </areaspec>
                <programlisting language="text" linenumbering="numbered" ><![CDATA[GET /restintro-dmv-war6/jax-rs/applications/104? HTTP/1.1
Accept: application/xml
Host: dmv.ejava.info:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)
]]></programlisting>
            <calloutlist>
                <callout arearefs="get-state-request-uri"><para>Method and target URI for resource</para></callout>
                <callout arearefs="get-state-accept"><para>MediaTypes the client will accept</para></callout>
            </calloutlist>
            </programlistingco>
        </figure>
    </section>
    
    <section id="get-state-response">
        <title>GET Representation Response</title>
        <para/>
        <figure id="get-state-response-figure">
            <title>GET Representation Response</title>
                <programlistingco>
                    <areaspec>
                        <area id="get-state-status-code" coords="1"/>
                        <area id="get-state-last-modified" coords="3"/>
                        <area id="get-state-content-location" coords="4"/>
                        <area id="get-state-content-type" coords="5"/>
                        <area id="get-state-content-representation" coords="9"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Last-Modified: Sat, 31 Mar 2012 02:43:26 GMT
Content-Location: http://dmv.ejava.info:8050/restintro-dmv-war6/jax-rs/applications/104
Content-Type: application/xml
Content-Length: 409
Date: Sat, 31 Mar 2012 02:43:26 GMT

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:residentIDApplication xmlns:ns2="http://dmv.ejava.info">
    <id>104</id>
    <updated>2012-03-30T22:43:26.294-04:00</updated>
    <created>2012-03-30T22:43:26.294-04:00</created>
    <identity>
        <id>0</id>
        <firstName>jack</firstName>
        <lastName>doe</lastName>
        <contacts/>
    </identity>
</ns2:residentIDApplication>
]]></programlisting>
            <calloutlist>
                <callout arearefs="get-state-status-code"><para>Server status code</para></callout>
                <callout arearefs="get-state-last-modified"><para>Optional timestamp when resource last modified</para></callout>
                <callout arearefs="get-state-content-location"><para>Resource URI for the representation in payload</para></callout>
                <callout arearefs="get-state-content-type"><para>MediaType for the representation in payload</para></callout>
                <callout arearefs="get-state-content-representation"><para>MediaType-specific representation for requested resource</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

    <section id="get-state-404-response">
        <title>GET Response with Unknown Resource</title>
        <para/>
        <figure id="get-state-404-response-figure">
            <title>GET Response with Unknown Resource</title>
                <programlistingco>
                    <areaspec>
                        <area id="get-state-404-status-code" coords="1"/>
                        <area id="get-state-404-content-type" coords="3"/>
                        <area id="get-state-404-representation" coords="7"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 404 Not Found
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 23
Date: Sat, 31 Mar 2012 03:12:42 GMT

unable to locate id:123
]]></programlisting>
            <calloutlist>
                <callout arearefs="get-state-404-status-code"><para>Server status code indicating the resource could not be located</para></callout>
                <callout arearefs="get-state-404-content-type"><para>MediaType for error representation</para></callout>
                <callout arearefs="get-state-404-representation"><para>Error representation</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

    
    <section id="other-get-state-response-status-codes">
        <title>Other Possible GET Response Status Codes</title>
        <para>(not a complete list)</para>
        <itemizedlist>
            <listitem><para>301 Moved Perminently</para>
                <itemizedlist>
                    <listitem><para><code>Location</code> header containing new URI</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>307 Temporary Redirect</para>
                <itemizedlist>
                    <listitem><para><code>Location</code> header containing temporary URI</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>410 Gone</para></listitem>
            <listitem><para>500 Internal Service Error</para>
            </listitem>
            <listitem><para>503 Service Unavailable</para>
                <itemizedlist>
                    <listitem><para><code>Retry-After</code> header</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="getApplication-jaxrs-impl">
        <title>Sample JAX-RS GET (application/xml)  Implementation</title>
        <para/>
        <figure id="getApplication-jaxrs-impl-figure">
            <title>Sample JAX-RS GET (application/xml) Implementation</title>
            <programlistingco>
                <areaspec>
                    <area id="getApp-jaxrs-impl-base-uri" coords="1"/>
                    <area id="getApp-jaxrs-impl-get-uri" coords="4"/>
                    <area id="getApp-jaxrs-impl-method" coords="5"/>
                    <area id="getApp-jaxrs-impl-produces" coords="6"/>
                    <area id="getApp-jaxrs-impl-formatted" coords="7"/>
                    <area id="getApp-jaxrs-impl-id" coords="9"/>
                    <area id="getApp-jaxrs-impl-service" coords="10"/>
                    <area id="getApp-jaxrs-impl-404" coords="12"/>
                    <area id="getApp-jaxrs-impl-content-loc" coords="18"/>
                    <area id="getApp-jaxrs-impl-200" coords="19"/>
                </areaspec>
                <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Path("jax-rs/applications") 
public class ApplicationsRS {
...
    @Path("{id}")
    @GET
    @Produces(MediaType.APPLICATION_XML)
    @Formatted
    public Response getApplicationById(
            @PathParam("id") long id) {
        Application app = service.getApplication(id);
        if (app == null) {
            return Response.status(Status.NOT_FOUND)
                    .entity("unable to locate id:" + id)
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        }
        
        URI uri=uriInfo.getAbsolutePath();
        return Response
            .ok(app, MediaType.APPLICATION_XML)
            .contentLocation(uri) //Content-Location header of representation
            .lastModified(app.getUpdated()) //Last-Modified header of the representation
            .build();
    }
]]></programlisting>
            <calloutlist>
                <callout arearefs="getApp-jaxrs-impl-base-uri"><para>Base URI for all methods in class</para></callout>
                <callout arearefs="getApp-jaxrs-impl-get-uri"><para>URI template for GET</para></callout>
                <callout arearefs="getApp-jaxrs-impl-method"><para>Class method mapped to HTTP GET</para></callout>
                <callout arearefs="getApp-jaxrs-impl-produces"><para>Produces XML representation</para></callout>
                <callout arearefs="getApp-jaxrs-impl-formatted"><para>RESTEasy extension to pretty print XML</para></callout>
                <callout arearefs="getApp-jaxrs-impl-id"><para>id parameter mapped to path parameter in URI</para></callout>
                <callout arearefs="getApp-jaxrs-impl-service"><para>JAX-RS interface delegating to service impl</para></callout>
                <callout arearefs="getApp-jaxrs-impl-404"><para>Building 404 Response</para></callout>
                <callout arearefs="getApp-jaxrs-impl-content-loc"><para>Building Content-Location header value</para></callout>
                <callout arearefs="getApp-jaxrs-impl-200"><para>Building 200 Reponse</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>
  </chapter>





  <chapter id="put-state">
    <title>Using PUT to Update Resource State</title>
    <para/>
    <itemizedlist>
        <listitem><para>Use POST to create a resource with a server-assigned URI</para></listitem>
        <listitem><para>Use PUT to create or replace a resource with a client-calculated URI
        <footnote><para><emphasis>"RESTful Web Services"</emphasis>;  
        Leonard Richardson, Sam Ruby; <ulink url="http://oreilly.com/catalog/9780596529260/">O’Reilly</ulink>; 2007;
        <ulink url="http://www.amazon.com/RESTful-Web-Services-ebook/dp/B0043D2ED6">(Amazon Kindle)</ulink></para></footnote>
        </para></listitem>
        <listitem><para>i.e.,</para>
            <itemizedlist>
                <listitem><para>If the client just supplies state without knowing the actual URI - POST the state to a collection/controller URI</para></listitem>
                <listitem><para>If the client has full control or knowledge of the resource URI - PUT the state to the resource's URI</para></listitem>
                <listitem><para>PUT to an existant resource URI means to replace</para></listitem>
                <listitem><para>PUT to a non-existant resource URI means to create</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>The representation within the PUT should contain the entire - not partial - representation for the URI</para></listitem>
        <listitem><para>Large resources can be broken up into sections based on volatility to cut down on updates</para></listitem>
        <listitem><para>HTTP also provides a PATCH method to carry out partial updates</para></listitem>
    </itemizedlist>
    
    <figure id="put-state-figure">
        <title>Using PUT to Update Resource State</title>
        <graphic fileref="images/dmv-put-state.png"/>
    </figure>
    <itemizedlist>
        <listitem><para>Client updates application by</para>
            <itemizedlist>
                <listitem><para>issuing the PUT method</para></listitem>
                <listitem><para>using the <code>/applications/{id}</code> URI provided by the POST</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request is completed</para>
            <itemizedlist>
                <listitem><para>the server may</para>
                    <itemizedlist>
                        <listitem><para>return a <code>204 No Content</code> status code</para></listitem>
                        <listitem><para>provide no representation of the resource (saving bandwidth)</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client</para>
                    <itemizedlist>
                        <listitem><para>assumes their copy of the resource is current with the server</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the server may instead</para>
                    <itemizedlist>
                        <listitem><para>return a <code>200 OK</code> status code</para></listitem>
                        <listitem><para>provide a representation of the resource</para></listitem>
                        <listitem><para>set <code>Content-Location</code> to the URI of the provided representation</para></listitem>
                        <listitem><para>set <code>Content-Type</code> header to MediaType of the provided representation</para></listitem>
                        <listitem><para>optionally set <code>Last-Modified</code> header to the last timestamp of the last modification</para></listitem>
                        <listitem><para>optionally sets <code>ETag</code> header to an identity representing the current state</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the client in this case</para>
                    <itemizedlist>
                        <listitem><para>updates their cached copy of the resource with the authoratative server representation</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to a conflict (i.e., resource in state invalid for requested change)</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>409 Conflict</code> status code</para></listitem>
                        <listitem><para>provides enough information to allow the client to correct its request</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>the server could also (when update cannot be corrected)</para>
                    <itemizedlist>
                        <listitem><para>return a <code>405 Method Not Allowed</code> status code</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
  
    <section id="put-state-request">
        <title>PUT Representation Request</title>
        <para/>
        <figure id="put-state-request-figure">
            <title>PUT Representation Request</title>
            <programlistingco>
                <areaspec units="linerange">
                    <area id="put-state-request-uri" coords="1"/>
                    <area id="put-state-request-content-type" coords="2"/>
                    <area id="put-state-request-representation" coords="3"/>
                </areaspec>
                <programlisting language="text" linenumbering="numbered" ><![CDATA[PUT /restintro-dmv-war6/jax-rs/applications/49? HTTP/1.1
Content-Type: application/xml
Content-Length: 587
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
   <ns2:residentIDApplication xmlns:ns2="http://dmv.ejava.info">    
      <id>49</id>    
      <updated>2012-03-31T16:35:44.596-04:00</updated>    
      <created>2012-03-31T16:35:44.438-04:00</created>    
      <identity>        
         <id>0</id>        
         <firstName>payton</firstName>        
         <lastName>manning</lastName>        
         <contacts>            
            <contact>                
               <type>RESIDENCE</type>                
               <city>Denver</city>                
               <state>CO</state>            
            </contact>        
         </contacts>    
      </identity>
   </ns2:residentIDApplication>
]]></programlisting>
            <calloutlist>
                <callout arearefs="put-state-request-uri"><para>Method and target URI for resource</para></callout>
                <callout arearefs="put-state-request-content-type"><para>MediaType for resource representation in payload</para></callout>
                <callout arearefs="put-state-request-representation"><para>Requested new resource representation (complete)</para></callout>
            </calloutlist>
            </programlistingco>
        </figure>
    </section>
    
    <section id="put-state-response">
        <title>PUT Representation Response</title>
        <para/>
        <figure id="put-state-response-figure">
            <title>PUT Representation Response</title>
                <programlistingco>
                    <areaspec>
                        <area id="put-state-status-code" coords="1"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 204 No Content
Server: Apache-Coyote/1.1
Date: Sat, 31 Mar 2012 20:35:44 GMT]]></programlisting>
            <calloutlist>
                <callout arearefs="put-state-status-code"><para>Server status code</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

    <section id="put-state-409-response">
        <title>PUT Response with Conflict</title>
        <para/>
        <figure id="put-state-409-response-figure">
            <title>PUT Response with Conflict</title>
                <programlistingco>
                    <areaspec>
                        <area id="put-state-409-status-code" coords="1"/>
                        <area id="put-state-409-status-last-modified" coords="3"/>
                        <area id="put-state-409-status-content-location" coords="4"/>
                        <area id="put-state-409-status-content-type" coords="5"/>
                        <area id="put-state-409-status-representation" coords="9"/>
                        <area id="put-state-409-status-conflict" coords="14"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 409 Conflict
Server: Apache-Coyote/1.1
Last-Modified: Sat, 31 Mar 2012 20:35:44 GMT
Content-Location: http://127.0.0.5:8050/restintro-dmv-war6/jax-rs/applications/49
Content-Type: application/xml
Content-Length: 650
Date: Sat, 31 Mar 2012 20:35:44 GMT

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
   <ns2:residentIDApplication xmlns:ns2="http://dmv.ejava.info">    
      <id>49</id>    
      <updated>2012-03-31T16:35:44.545-04:00</updated>    
      <created>2012-03-31T16:35:44.438-04:00</created>    
      <completed>2012-03-31T16:35:44.465-04:00</completed>    
      <identity>        
         <id>0</id>        
         <firstName>payton</firstName>        
         <lastName>manning</lastName>        
         <contacts>            
            <contact>                
               <type>RESIDENCE</type>                
               <city>Indianapolis</city>                
               <state>IN</state>            
            </contact>        
         </contacts>    
      </identity>
   </ns2:residentIDApplication>
]]></programlisting>
            <calloutlist>
                <callout arearefs="put-state-409-status-code"><para>Server status code indicating a conflict prevented the change</para></callout>
                <callout arearefs="put-state-409-status-last-modified"><para>Last modification time of the resource</para></callout>
                <callout arearefs="put-state-409-status-content-location"><para>Since we are returning the representation this is being set to the resource URI</para></callout>
                <callout arearefs="put-state-409-status-content-type"><para>MediaType for the provided payload</para></callout>
                <callout arearefs="put-state-409-status-representation"><para>In this case, the representation is being returned. 
                    There must be enough infromation for client to be able to correct themselves. In this case the 
                    condition is terminal and could also have used <emphasis>405 Method Not Allowed</emphasis>.</para></callout>
                <callout arearefs="put-state-409-status-conflict"><para>Cause of conflict -- the application is already complete</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

    
    <section id="other-put-state-response-status-codes">
        <title>Other Possible PUT Response Status Codes</title>
        <para>(not a complete list)</para>
        <itemizedlist>
            <listitem><para>405 Method Not Allowed</para>
                <itemizedlist>
                    <listitem><para>when client request cannot be corrected</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="putApp-jaxrs-impl">
        <title>Sample JAX-RS PUT Implementation</title>
        <para/>
        <figure id="putApp-jaxrs-impl-figure">
            <title>Sample JAX-RS PUT (application/xml) Implementation</title>
            <programlistingco>
                <areaspec>
                    <area id="putApp-jaxrs-impl-base-uri" coords="1"/>
                    <area id="putApp-jaxrs-impl-base-path" coords="4"/>
                    <area id="putApp-jaxrs-impl-base-method" coords="5"/>
                    <area id="putApp-jaxrs-impl-base-consumes" coords="6"/>
                    <area id="putApp-jaxrs-impl-base-formatted" coords="7"/>
                    <area id="putApp-jaxrs-impl-base-service" coords="11"/>
                    <area id="putApp-jaxrs-impl-base-204" coords="16"/>
                    <area id="putApp-jaxrs-impl-base-conflict" coords="23"/>
                    <area id="putApp-jaxrs-impl-base-server-error" coords="33"/>
                </areaspec>
                <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Path("jax-rs/applications")
public class ApplicationsRS {
...    
    @Path("{id}")
    @PUT
    @Consumes(MediaType.APPLICATION_XML)
    @Formatted
    public Response updateApplication(String appString) {
        //marshal to string; demarshal locally to have more control over transform 
        try {
            Application app = JAXBHelper.unmarshall(appString, Application.class, null, 
                    Application.class,
                    ResidentIDApplication.class);
            int status=0;
            if ((status=service.updateApplication(app))<0) {
                return Response.status(Status.BAD_REQUEST)
                        .entity("unable to update application - client error")
                        .type(MediaType.TEXT_PLAIN)
                        .build();
            }
            else if (status > 0) {
                Application existingApp = service.getApplication(app.getId());
                return Response.status(Status.CONFLICT)
                        .entity(existingApp)
                        .type(MediaType.APPLICATION_XML)
                        .contentLocation(uriInfo.getAbsolutePath())
                        .lastModified(existingApp.getUpdated())
                        .build();
            }
            return Response.noContent().build();
        } catch (JAXBException ex) {
            ex.printStackTrace();
            return Response.serverError()
                           .entity("JAXBException handling updateApplication:" + ex)
                           .type(MediaType.TEXT_PLAIN)
                           .build();
        } catch (IOException ex) {
            ex.printStackTrace();
            return Response.serverError()
                    .entity("IOException handling updateApplication:" + ex)
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        } finally {}
    }]]></programlisting>
            <calloutlist>
                <callout arearefs="putApp-jaxrs-impl-base-uri"><para>Base URI for all methods in class</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-path"><para>URI template for method</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-method"><para>HTTP method associated with class method</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-consumes"><para>Representation format class method operates on</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-formatted"><para>RESTEasy extension to pretty-print any XML returned</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-service"><para>JAX-RS interface delegates to service implementation</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-204"><para>Update worked -- returning success without representation</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-conflict"><para>Unable to update state -- returning information to correct</para></callout>
                <callout arearefs="putApp-jaxrs-impl-base-server-error"><para>Possible internal server error handling</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    <note>
        <title>PUT should be idempotent</title>
        <para>Server must gurantee that multiple occurances of the same 
        PUT command will result in the same result state.</para>
    </note>
    </section>
  </chapter>


  <chapter id="delete-resource">
    <title>Using DELETE to Remove Resource</title>
    <para/>
    <itemizedlist>
        <listitem><para>Resource should no longer available</para></listitem>
        <listitem><para>Can be a physical or logical delete</para>
            <itemizedlist>
                <listitem><para>Physical delete likely results in <emphasis>404 Not Found</emphasis> status for future URI requests</para></listitem>
                <listitem><para>Logical delete permits <emphasis>410 Gone</emphasis> status to be used</para></listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
    
    <figure id="delete-resource-figure">
        <title>Using DELETE to Remove Resource</title>
        <graphic fileref="images/dmv-delete-resource.png"/>
    </figure>
    <itemizedlist>
        <listitem><para>Client deletes application by</para>
            <itemizedlist>
                <listitem><para>issuing the DELETE method</para></listitem>
                <listitem><para>using the <code>/applications/{id}</code> URI provided by the POST</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request is completed</para>
            <itemizedlist>
                <listitem><para>the server may</para>
                    <itemizedlist>
                        <listitem><para>return a <code>204 No Content</code> status code</para></listitem>
                        <listitem><para>provide no representation of the resource (saving bandwidth)</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>If the request fails due to a conflict (i.e., resource in state invalid fto be deleted)</para>
            <itemizedlist>
                <listitem><para>the server</para>
                    <itemizedlist>
                        <listitem><para>returns a <code>405 Method Not Allowed</code> status code</para></listitem>
                        <listitem><para>optionally provides enough information to allow the client to undersand the issue</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>
  
    <section id="delete-resource-request">
        <title>DELETE Resource Request</title>
        <para/>
        <figure id="delete-resource-request-figure">
            <title>DELETE Resource Request</title>
            <programlistingco>
                <areaspec units="linerange">
                    <area id="delete-resource-request-uri" coords="1"/>
                </areaspec>
                <programlisting language="text" linenumbering="numbered" ><![CDATA[DELETE /restintro-dmv-war6/jax-rs/applications/50? HTTP/1.1
Host: dmv.ejava.info:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)]]></programlisting>
            <calloutlist>
                <callout arearefs="delete-resource-request-uri"><para>Method and target URI for resource</para></callout>
            </calloutlist>
            </programlistingco>
        </figure>
    </section>
    
    <section id="delete-resource-response">
        <title>DELETE Resource Response</title>
        <para/>
        <figure id="delete-resource-response-figure">
            <title>DELETE Resource Response</title>
                <programlistingco>
                    <areaspec>
                        <area id="delete-resource-status-code" coords="1"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 204 No Content
Server: Apache-Coyote/1.1
Date: Sat, 31 Mar 2012 21:54:44 GMT]]></programlisting>
            <calloutlist>
                <callout arearefs="delete-resource-status-code"><para>Server status code indicating resource was deleted and no representation was returned</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

    <section id="delete-resource-405-response">
        <title>DELETE Resource Failed in Illegal State</title>
        <para/>
        <figure id="delete-resource-405-response-figure">
            <title>DELETE Resource Failed in Illegal State</title>
                <programlistingco>
                    <areaspec>
                        <area id="delete-resource-405-status-code" coords="1"/>
                        <area id="delete-resource-405-allow" coords="3"/>
                        <area id="delete-resource-405-content-type" coords="4"/>
                        <area id="delete-resource-405-error-msg" coords="8"/>
                    </areaspec>
                    <programlisting language="text" linenumbering="numbered"><![CDATA[HTTP/1.1 405 Method Not Allowed
Server: Apache-Coyote/1.1
Allow: GET, HEAD
Content-Type: text/plain
Content-Length: 39
Date: Sun, 01 Apr 2012 00:06:36 GMT

completed application cannot be deleted]]></programlisting>
            <calloutlist>
                <callout arearefs="delete-resource-405-status-code"><para>Server status code indicating a conflict prevented the change</para></callout>
                <callout arearefs="delete-resource-405-allow"><para>Informs client which methods are allowed in current state</para></callout>
                <callout arearefs="delete-resource-405-content-type"><para>Content type of the optionally supplied error message</para></callout>
                <callout arearefs="delete-resource-405-error-msg"><para>Optionally supplied error mesage describing why application could not be deleted</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>
    
    
    <section id="other-delete-resource-response-status-codes">
        <title>Other Possible DELETE Response Status Codes</title>
        <para>(not a complete list)</para>
        <itemizedlist>
            <listitem><para><code>200 OK</code> with final resource state</para></listitem>
        </itemizedlist>
    </section>

    <section id="deleteApp-jaxrs-impl">
        <title>Sample JAX-RS DELETE Implementation</title>
        <para/>
        <figure id="deleteApp-jaxrs-impl-figure">
            <title>Sample JAX-RS DELETE Implementation</title>
            <programlistingco>
                <areaspec>
                    <area id="deleteApp-jaxrs-impl-base-uri" coords="1"/>
                    <area id="deleteApp-jaxrs-impl-base-path" coords="4"/>
                    <area id="deleteApp-jaxrs-impl-base-method" coords="5"/>
                    <area id="deleteApp-jaxrs-impl-base-param" coords="7"/>
                    <area id="deleteApp-jaxrs-impl-base-service" coords="9"/>
                    <area id="deleteApp-jaxrs-impl-base-404" coords="10"/>
                    <area id="deleteApp-jaxrs-impl-base-405" coords="16"/>
                    <area id="deleteApp-jaxrs-impl-base-204" coords="22"/>
                </areaspec>
                <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Path("jax-rs/applications")
public class ApplicationsRS {
...    
    @Path("{id}")
    @DELETE
    public Response deleteApplication(
            @PathParam("id") long id) {
        int status=0;
        if ((status=service.deleteApplication(id)) < 0) {
            return Response.status(Status.NOT_FOUND)
                    .entity("unable to locate application:" + id)
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        } 
        else if (status > 0) {
            return Response.status(405)
                    .entity("completed application cannot be deleted")
                    .type(MediaType.TEXT_PLAIN)
                    .build();
        }
            //application deleted
        return Response.noContent()
                    .build();
    }]]></programlisting>
            <calloutlist>
                <callout arearefs="deleteApp-jaxrs-impl-base-uri"><para>Base URI for all methods in class</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-path"><para>URI template for method</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-method"><para>HTTP method associated with class method</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-param"><para>Paramater extracted from URI</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-service"><para>JAX-RS interface delegates to service implementation</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-404"><para>Resource not found -- returning <code>404 Not Found</code> status</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-405"><para>Resource not in a valid state to delete -- returning <code>405 Method Not Allowed</code> status and text/plain error message</para></callout>
                <callout arearefs="deleteApp-jaxrs-impl-base-204"><para>Resource deleted -- returning <code>204 No Content</code> status</para></callout>
            </calloutlist>
           </programlistingco>
        </figure>
    </section>

  </chapter>




    <chapter id="resources1">
        <title>Resources</title>
        <para/>
        <section id="identifying-resources">
            <title>Identifying Resources</title>
            <para/>
            <section id="noun-resources">
                <title>Resources for Nouns in Domain</title>
                <itemizedlist>
                    <listitem><para>Identify core nouns of the domain</para></listitem>
                    <listitem><para>Question nouns that just add small detail
                    core nouns and do not standalone</para></listitem>
                    <listitem><para>Question core noun properties that may have
                    inconsistent levels of volatility (i.e., some things change
                    more than others)</para></listitem>
                    <listitem><para>Leverage domain models</para></listitem>
                    <listitem><para>Leverage use cases</para></listitem>
                </itemizedlist>
                <note>
                    <para>Resource identification in REST is the most 
                    flexible part relative to methods, media types, 
                    uniform interface, etc.</para>
                </note>
                <para>Looking at our domain model, we start off with
                a few candidate resources and identify them with URIs.
                Contacts looks questionable since it is primarily a detailing
                type for Residents and Driver Licenses. Driver License was
                separated from Resident because of separation of concern and 
                reuse elsewhere.
                </para>
                <itemizedlist>
                    <listitem><para>Applications (<code>/applications</code>)</para></listitem>
                    <listitem><para>Residents (<code>/residents</code>)</para></listitem>
                    <listitem><para>Contacts (<code>/contacts</code>)</para></listitem>
                    <listitem><para>Driver Licenses (<code>/driverlicenses</code>)</para></listitem>
                </itemizedlist>
                <example id="resource-example">
                    <title>Resource Example</title>
                    <para>Removing contacts as a resource result in the 
                    following relative URIs</para>
            <programlisting language="text"><![CDATA[
/applications

/residents            

/driverlicenses
]]></programlisting>
                </example>                
            </section>
            <section id="crud-resources">
                <title>Resources for Applying CRUD</title>
                <para>With the primary resource URIs assigned -- add resource
                URIs to address CRUD (create, delete, update, and delete). Use
                the proper HTTP Methods against these URIs to perform the 
                intended actions.</para>
                <itemizedlist>
                    <listitem><para>Create (<code>POST /(resource)</code>)</para></listitem>
                    <listitem><para>Update (<code>PUT /(resource)/{id}</code>)</para></listitem>
                    <listitem><para>Read (<code>GET /(resource)/{id}</code>)</para></listitem>
                    <listitem><para>Delete (<code>DELETE /(resource)/{id}</code>)</para></listitem>
                </itemizedlist>
                
                
                <para>Focusing just on Residents, we reuse the primary resource
                URI for creating new resources. We extend the collecton resource
                URI with the resident ID to address individual residents.</para>
                <itemizedlist>
                    <listitem><para>Create (<code>POST /residents</code>)</para></listitem>
                    <listitem><para>Update (<code>PUT /residents/{id}</code>)</para></listitem>
                    <listitem><para>Read (<code>GET /residents/{id}</code>)</para></listitem>
                    <listitem><para>Delete (<code>DELETE) /residents/{id}</code>)</para></listitem>
                </itemizedlist>
            </section>
            <section id="other-resources">
                <title>Resources for Additional Uses</title>
                <para>Aside form standard CRUD methods, additional resource URIs
                can/should be identified to address other pruposes.</para>

                <section id="function-resources">
                    <title>Resources for Applying Functions</title>
                    <para>Add resource URIs to address apply functions
                    to other resources</para>
                    <itemizedlist>
                        <listitem><para>Renew a driver license</para></listitem>
                        <listitem><para>Calculate total fees due</para></listitem>
                        <listitem><para>Calculate points acumulated</para></listitem>
                        <listitem><para>Compute distance between two addresses</para></listitem>
                    </itemizedlist>
                    <example id="function-example">
                        <title>Function Resource (/same) Example</title>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the child resource URI of the collection and 
                            passes two resident Ids as query args to ask
                            if the two residents are the same.
                            </para></listitem>
                            <listitem><para>The server evaluates the two
                            referenced residents and returns a text boolean
                            stating whether they are the same.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/same?p1=63&p2=64 HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)

HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 4
Date: Sun, 11 Mar 2012 01:34:07 GMT

true
]]></programlisting>
                    </example>
                    <note>
                        <title>REST Resources are more than just Entities</title>
                        <para>REST Resources can represent a wide array of
                        things in a system and is not just constrained to
                        nouns that are the target of CRUD.</para>
                    </note>
                </section>
                <section id="summary-resources">
                    <title>Resources for Getting Summaries</title>
                    <para>Add resource URIs that will allow clients to 
                    obtain collection summaries.</para>
                    <example id="summary-example">
                        <title>Summary Resource (/names) Example</title>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the child resource URI of the collection to ask
                            for a summary of resident names.
                            </para></listitem>
                            <listitem><para>The server evaluates returns a 
                            text list of names in lastName, firstName\n
                            format.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/names? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 70
Date: Sun, 11 Mar 2012 01:46:19 GMT

doe, shemp
doe, many
doe, mo
doe, jack
doe, larry
doe, moe
doe, curly
]]></programlisting>
                    </example>
                </section>
                <section id="conversion-resources">
                    <title>Resources for Conversion</title>
                    <para>Add resource URIs to convert resources (e.g.,
                    English to/from Metric Units, English to French language)
                    </para>
                </section>
            </section>
            <section id="resource-granularity">
                <title>Resource Granularity</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Not all entities have same granularity and importance</para></listitem>
                    <listitem><para>Chose representations that match client needs</para></listitem>
                    <listitem><para>Avoid representations that expand to whatever DB can provide</para></listitem>
                    <listitem><para>Consider</para>
                        <itemizedlist>
                            <listitem><para>Frequence of change</para></listitem>
                            <listitem><para>Cacheability</para></listitem>
                            <listitem><para>Mutability</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section id="resource-patterns">
            <title>Resource Patterns</title>
            <para/>
            <section id="single-resources">
                <title>Single Resources</title>
                <para/>
                <example id="single-resource-examples">
                    <title>Single Resource Examples</title>
                    <para>As shown in the standard CRUD section above, 
                    individual resource URIs can be formed to act on a 
                    specific resource.</para>
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/9? HTTP/1.1
PUT /restintro-war6/rest/residents/9? HTTP/1.1
DELETE /restintro-war6/rest/residents/9? HTTP/1.1
]]></programlisting>
                </example>
            </section>
            <section id="collection-resources">
                <title>Collection Resources</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Used to group resources where they</para>
                        <itemizedlist>
                            <listitem><para>Share same set of properties</para></listitem>
                            <listitem><para>Look similar to clients</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Used to create new members</para></listitem>
                    <listitem><para>Used to perfom same action on multiple members</para></listitem>
                    <listitem><para>Used for search/filter view of collection</para></listitem>
                    <listitem><para>Used for paginated views</para></listitem>
                </itemizedlist>
                    <example id="collection-example">
                        <title>Collection Resource Example</title>
                        <para>This example uses the collection resource URI
                        to create new members and to return sequences of 
                        members. POST is used for the create and GET is used 
                        for the read. The details of the POST was covered
                        in the standard CRUD section above.</para>
<programlisting language="java"><![CDATA[
POST /restintro-war6/rest/residents HTTP/1.1
]]></programlisting>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the collection URI and passes a start and count
                            argument to control paging.
                            </para></listitem>
                            <listitem><para>The server returns up to 'count'
                            names starting with the 'start' index. The 
                            start, count, and size (number of elements) is 
                            returned as attributes of the collection.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents?start=1&count=3 HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 735
Date: Sun, 11 Mar 2012 02:12:30 GMT


<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <ns2:residents xmlns:ns2="http://dmv.ejava.info" count="3" size="3" start="1">
        <resident>
...
        </resident>
</ns2:residents>
]]></programlisting>
                    </example>
                <note>
                    <title>A Resource can be a Member of Multiple Collections</title>
                    <para>Collections are just a convenient way to refer to a 
                    group of resources all at once. A single resource can be
                    a member of multiple collection resources. For example, a 
                    DriverLicense could be a member of the suspended and 
                    fines-due collections.
                    </para>
                </note>
            </section>        
            <section id="composite-resources">
                <title>Composite Resources</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Combines information from other resources</para></listitem>
                    <listitem><para>Can represent common views or set of criteria</para></listitem>
                    <listitem><para>Can reduce client/server round trips</para></listitem>
                    <listitem><para>Reduces visibility of resources (by chopping 
                    state across multiple representations)</para></listitem>
                    <listitem><para>Use should be limited to most important views</para></listitem>
                </itemizedlist>
                <example id="composite-resourcs">
                    <title>Composite Resource Example</title>
                    <para>Each resident resource additionally houses 
                    contact information for that resident rather than
                    being a separate resource.</para>
<programlisting language="xml"><![CDATA[
GET /restintro-war6/rest/residents/86? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 380
Date: Sun, 11 Mar 2012 02:28:13 GMT
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resident xmlns:ns2="http://dmv.ejava.info">
    <id>86</id>
    <firstName>cat</firstName>
    <lastName>inhat</lastName>
    <contacts>
        <contact>
            <city>Washington</city>
            <name>Home</name>
            <state>DC</state>
            <street>1600 Penn Ave, NW</street>
            <zip>20500</zip>
        </contact>
    </contacts>
</ns2:resident>
]]></programlisting>
                </example>
                <note>
                    <title>Avoid Overlapping Composite Views</title>
                    <para>Use of overlapping composite views may be convenient
                    for a particular client view but it can nueter the
                    use of a resource cache since representation changes 
                    can occur on alternate resource paths.</para>
                </note>
            </section>        
            <section id="controller-resources">
                <title>Controller/Delegate Resources</title>
                <para>Used to operate on more than one resource atomically. 
                Such as...</para>
                <itemizedlist>
                    <listitem><para>Eliminate duplicates</para></listitem>
                    <listitem><para>Merge contacts</para></listitem>
                </itemizedlist>
                <note>
                    <title>Avoid Tunneling Different Action Types thru Common URI</title>
                    <para>Do not use a single URI as a communication channel where
                    the parameters passed perform a wide variety of behavior.
                    Doing so will make side-effects difficult to track.</para> 
<programlisting language="xml"><![CDATA[
GET /residents?op=changeName&lastName=smith
GET /residents?op=addAddress&name=work&city=baltimore
]]></programlisting>
                </note>
            </section>        
        </section>
    </chapter>
</book>

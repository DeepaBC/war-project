<chapter id="restdev-unittest">
        <title>Unit Testing using Spring</title>

        <itemizedlist>
            <listitem><para>Primary point of developing server-side component
                is to deploy to server-side.</para></listitem>
            <listitem><para>However, need to efficiently test as a unit
                before expending time/resources involved with server-side
                integration testing</para></listitem>
            <listitem><para>JAX-RS provider stand-alone capability can 
                be used to provide unit test environment</para></listitem>
            <listitem><para>CDI reference implementation (WELD) or Spring
                can be used to simulate services provided by the container 
                </para></listitem>
            <listitem><para>We will use Spring for unit testing and 
                client-side integration testing.</para></listitem>
        </itemizedlist>                   
        <note>
            <para>My use of Spring here is constrained to the local JVM only
                and is not part of the deployed application server to JBoss.
                This is done to
                <itemizedlist>
                    <listitem><para>Show alignment between new JavaEE 6 and Spring 3.x APIs</para></listitem>
                    <listitem><para>Leverage configuration capability for testing</para></listitem>
                </itemizedlist>
             </para>
        </note>

        <section id="restdev-unittest-resteasy-spring-webxml">
            <title>WEB-INF/web.xml</title>
            
            <note>
                <para>Since the unit test servlet engine running in the 
                    local JVM is not a JavaEE 6 container and we are integrating
                    the RESTEasy JAX-RS provider with Spring -- we must do a 
                    lot of manual configuration here. This did not need to be 
                    done on what was deployed to the server.</para>
            </note>

<programlisting><![CDATA[            
simple-bank-war6/src/test/webapp/
`-- WEB-INF
    `-- web.xml
]]></programlisting>

            <section id="restdev-spring-webxml-contextClass">
                <title>Spring contextClass</title>
                <itemizedlist>
                    <listitem><para>Installs the web-aware Spring application context</para></listitem>
                    <listitem><para>Generic to Spring and nothing to do with RESTEasy</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>contextClass</param-name>
    <param-value>
        org.springframework.web.context.support.AnnotationConfigWebApplicationContext
    </param-value>    
</context-param>
]]></programlisting>
                </section>
    
            <section id="restdev-spring-webxml-contextConfigLocation">
                <title>Spring contextConfigLocation</title>
                <itemizedlist>
                    <listitem><para>Defines bean classes for Spring using JavaConfig approach</para></listitem>
                    <listitem><para>Generic to Spring and nothing to do with RESTEasy</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>ejava.exercises.simple.bank.BankConfig</param-value>
</context-param>    
]]></programlisting>
                </section>
    
            <section id="restdev-spring-webxm-prefix">
                <title>resteasy.servlet.mapping.prefix</title>
                <itemizedlist>
                    <listitem><para>Tells RESTEasy the root of all JAX-RS resources</para></listitem>
                    <listitem><para>Must match servlet-context</para></listitem>
                    <listitem><para>Generic to RESTEasy and nothing to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>resteasy.servlet.mapping.prefix</param-name>
    <param-value>/</param-value>
</context-param>
]]></programlisting>
            </section>
    
            <section id="restdev-spring-webxml-resources">
                <title>resteasy.resources</title>
                <itemizedlist>
                    <listitem><para>Registers JAX-RS classes with RESTEasy</para></listitem>
                    <listitem><para>Generic to RESTEasy and little to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>resteasy.resources</param-name>
    <param-value>
        ejava.exercises.simple.bank.rs.BankRS,
        ejava.exercises.simple.bank.rs.AccountsRS
    </param-value>
</context-param>
]]></programlisting>
                <note>
                    <para>RESTEasy does have an autoscan feature that will
                        automatically locate JAX-RS resources in the 
                        application. However, this feature cannot be 
                        used with the Spring integration.</para>
                </note>
           </section>
    
            <section id="restdev-spring-webxml-servlet">
                <title>RESTEasy Servlet</title>
                <itemizedlist>
                    <listitem><para>Registers RESTEasy servlet with servlet container</para></listitem>
                    <listitem><para>Generic to RESTEasy and nothing to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<servlet>
    <servlet-name>Resteasy</servlet-name>
    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>Resteasy</servlet-name>
    <url-pattern>/*</url-pattern>
</servlet-mapping>
]]></programlisting>
                <tip>
                    <para>RESTEasy can also be deployed as a servlet listener
                        as well as a servlet filter. The servlet filter allows
                        other resources to share the same servlet context as 
                        the JAX-RS resources.</para>
                </tip>
            </section>
    
            <section id="restdev-spring-webxml-listener">
                <title>RESTEasy Listeners</title>
                <itemizedlist>
                    <listitem><para>Registers RESTEasy and RESTEasy/Spring integration listener classes</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<listener>
    <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
</listener>
<listener>
  <listener-class>org.jboss.resteasy.plugins.spring.SpringContextLoaderListener</listener-class>
</listener>    
]]></programlisting>
                </section>

                <section id="restdev-spring-webxml-complete">
                    <title>Complete WEB-INF/web.xml</title>
<programlisting language="xml"><![CDATA[            
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <context-param>
        <param-name>contextClass</param-name>
        <param-value>
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>    
    </context-param>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>ejava.exercises.simple.bank.BankConfig</param-value>
    </context-param>    

    <context-param>
        <param-name>resteasy.servlet.mapping.prefix</param-name>
        <param-value>/</param-value>
    </context-param>
    <context-param>
        <param-name>resteasy.resources</param-name>
        <param-value>
            ejava.exercises.simple.bank.rs.BankRS,
            ejava.exercises.simple.bank.rs.AccountsRS
        </param-value>
    </context-param>

    <servlet>
        <servlet-name>Resteasy</servlet-name>
        <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Resteasy</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <listener>
        <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
    </listener>
    <listener>
      <listener-class>org.jboss.resteasy.plugins.spring.SpringContextLoaderListener</listener-class>
   </listener>    
</web-app>
]]></programlisting>
                </section>
        </section>


        <section id="restdev-unittest-servlet">
            <title>Unit Test Servlet Engine (embedded Jetty)</title>
            <itemizedlist>
                <listitem><para>Create a producer/destroyer of a Jetty Server 
                    instance.</para></listitem>
                <listitem><para>Shown here as a Spring JavaConfig class </para></listitem>
                <listitem><para>Core JavaConfig class structure</para>
<programlisting language="java"><![CDATA[
...
import org.mortbay.jetty.Server;
import org.mortbay.jetty.webapp.WebAppContext;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

/**
 * This class provides a factory for POJOs used for unit testing.
 */
@Configuration
public class ServerConfig implements DisposableBean {
    private static final Logger log = LoggerFactory.getLogger(ServerConfig.class);
    private Server jettyServer;
    
    @Inject
    public Environment env;
...
}
]]></programlisting>
                </listitem>
                
                
                <listitem><para>Spring JavaConfig producer method</para>
<programlisting language="java"><![CDATA[
    @Bean
    public Server server() throws Exception {
        String path=env.getProperty("servletContext", "/");
        int port=Integer.parseInt(env.getProperty("http.server.port", "9000"));
        String resourceBase = env.getProperty("servlet.resourceBase", "src/main/webapp");
        String overrrideDescriptor = env.getProperty("servlet.overrideDescriptor", "src/test/webapp/WEB-INF/web.xml");
        jettyServer = new Server(port);
        WebAppContext context = new WebAppContext();
        context.setResourceBase(resourceBase);
        if (overrrideDescriptor != null && overrrideDescriptor.length()>0) {
            context.setOverrideDescriptor(overrrideDescriptor);
        }
        context.setContextPath(path);
        context.setParentLoaderPriority(true);
        jettyServer.setHandler(context);
        log.debug("starting jetty server on port {}", port);
        jettyServer.start();
        return jettyServer;
    }
]]></programlisting>
                </listitem>
                
                <listitem><para>Spring destroyer method</para>
<programlisting language="java"><![CDATA[
    @Override
    public void destroy() throws Exception {
        log.debug("shutting down test resources");
        if (jettyServer != null) {
            if (jettyServer.isStarted()) {
                jettyServer.stop();
            }
            jettyServer.destroy();
            jettyServer=null;
        }
    }
]]></programlisting>
                </listitem>
            </itemizedlist>                   
        </section>


        <section id="restdev-unittest-config">
            <title>Unit Test Component Framework</title>
            <para>Need POJO classes instantiated, injected, and initialized</para>
            
            <itemizedlist>
                <listitem><para>Bean producer class for POJOs</para>
<programlisting language="java"><![CDATA[
import java.net.URI;
import java.net.URISyntaxException;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HttpContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.env.Environment;

@Configuration
@PropertySource("classpath:/test.properties")
public class BankConfig {
    private static final Logger log = LoggerFactory.getLogger(BankConfig.class);
    public @Inject Environment env;

    @Bean
    public static PropertySourcesPlaceholderConfigurer properties() {
        return new PropertySourcesPlaceholderConfigurer();
    }
...
}    
]]></programlisting>
                </listitem>

                <listitem><para>PropertySourcesPlaceholderConfigurer brings in test.properties</para>
<programlisting language=""><![CDATA[
simple-bank-war6/src/test/resources/
...
`-- test.properties

$ cat simple-bank-war6/src/test/resources/test.properties 
host=${jboss.host}
http.server.port=9000
#enable for use with tcpmon
#http.client.port=9001
servletContext=/${project.artifactId}
]]></programlisting>
                </listitem>

                <listitem><para>classpath:test.properties was expanded by Maven build</para>
<programlisting language=""><![CDATA[
$ cat simple-bank-war6/target/test-classes/test.properties
host=127.0.0.1
http.server.port=9000
#enable for use with tcpmon
#http.client.port=9001
servletContext=/simple-bank-war6
]]></programlisting>
                </listitem>

                <listitem><para>URI producer method uses properties</para>
<programlisting language="java"><![CDATA[
    @Bean 
    public URI bankURI() {
        try {
            //this is the URI of the local jetty instance for unit testing
            String host=env.getProperty("host", "localhost");
            //default to http.server.port and allow a http.client.port override
            int port=Integer.parseInt(env.getProperty("http.client.port",
                env.getProperty("http.server.port")
                ));
            String path=env.getProperty("servletContext", "/");
            return new URI("http", null, host, port, path + "/bank", null, null);
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
            throw new RuntimeException("error creating URI:" + ex, ex);
        }
    }
]]></programlisting>
                </listitem>


                <listitem><para>POJO producer methods</para>
<programlisting language="java"><![CDATA[
    @Bean
    public BankService bankService() {
        return new BankServiceStub();
    }
    
    @Bean
    public AccountsService accountsService() {
        return new AccountsServiceStub();
    }

    @Bean
    public AccountsRS accountsRS() {
        return new AccountsRS();
    }
    
    @Bean
    public BankRS bankRS() {
        return new BankRS();
    }
]]></programlisting>
                </listitem>

                <listitem><para>HttpClient producer method</para>
<programlisting language="java"><![CDATA[
    @Bean
    public HttpClient httpClient() {
        HttpClient httpClient = new DefaultHttpClient();
        return httpClient;
    }
]]></programlisting>
                </listitem>
            </itemizedlist>                   
        </section>
        
        <section id="restdev-unittest-components">
            <title>Component Injection</title>
            <itemizedlist>
                <listitem><para>BankRS JAX-RS resource class instantiated and injected by container</para>
<programlisting language="java"><![CDATA[            
@Path("bank")
public class BankRS {
    protected @Inject BankService service;
]]></programlisting>
                </listitem>
                <listitem><para>BankService service impl class instantiated and injected by container</para>
<programlisting language="java"><![CDATA[
@Singleton
public class BankServiceStub implements BankService {
    private @Inject AccountsService accounts;
]]></programlisting>
                </listitem>
                <listitem><para>AccountService service impl class instantiated by container</para>
<programlisting language="java"><![CDATA[
@Singleton
public class AccountsServiceStub implements AccountsService {
]]></programlisting>
                </listitem>
            </itemizedlist>                   
        </section>
        
        <section id="restdev-unittest-junit">
            <title>Unit Test</title>
            <itemizedlist>
                <listitem><para>Create JUnit test case and register with container</para>
<programlisting language="java"><![CDATA[
import static org.junit.Assert.*;

import java.net.URI;
import javax.inject.Inject;
import javax.ws.rs.core.MediaType;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.util.EntityUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mortbay.jetty.Server;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.env.Environment;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import ejava.common.test.ServerConfig;
import ejava.exercises.simple.bank.dto.Bank;
import ejava.exercises.simple.bank.dto.BankRepresentation;
import ejava.exercises.simple.bank.dto.BankRepresentation.Link;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={BankConfig.class, ServerConfig.class})
public class BankTest {
    protected static final Logger log = LoggerFactory.getLogger(BankTest.class);
    protected @Inject static Server server; 
    protected @Inject Environment env;
    protected @Inject URI bankURI;
    protected @Inject HttpClient httpClient;
    
    @Before
    public void setUp() throws Exception {  
        log.debug("=== BankTest.setUp() ===");
        log.debug("bankURI={}", bankURI);
        cleanup();
    }
    
    protected void cleanup() throws Exception {
            //reset bank state
        HttpDelete resetBank = new HttpDelete(bankURI);
        HttpResponse response = httpClient.execute(resetBank);
        EntityUtils.consume(response.getEntity());
        assertEquals("unexpected status", 204, response.getStatusLine().getStatusCode());
    }

 ...
 }
]]></programlisting>
                </listitem>
                <listitem><para>Implement tests</para>
<programlisting language="java"><![CDATA[
    @Test
    public void testSetupBank() throws Exception {
        log.info("*** testSetupBank ***");
        
            //get current state of bank
        HttpGet getBank = new HttpGet(bankURI);
        getBank.addHeader("Accept", MediaType.APPLICATION_XML);
        HttpResponse response = httpClient.execute(getBank);
        assertEquals("unexpected status from bank", 200, response.getStatusLine().getStatusCode());
        ...
        }
]]></programlisting>
                </listitem>
                <listitem><para>Running the unit test</para>
<programlisting language="java"><![CDATA[
$ mvn clean test
...
INFO  [ejava.exercises.simple.bank.BankConfig] (BankConfig.java:httpClient:68)  -creating non-cached HttpClient
INFO  [org.springframework.web.context.ContextLoader] (ContextLoader.java:initWebApplicationContext:302)  -Root WebApplicationContext: initialization completed in 255
 ms
INFO  [org.mortbay.log] (Slf4jLog.java:info:67)  -Started SocketConnector@0.0.0.0:56074
DEBUG [ejava.exercises.simple.bank.AccountsTest] (AccountsTest.java:setUp:58)  -=== AccountsTest.setUp() ===
DEBUG [ejava.exercises.simple.bank.AccountsTest] (AccountsTest.java:setUp:59)  -bankURI=http://127.0.0.1:56074/simple-bank-war6/bank
DEBUG [org.jboss.resteasy.core.SynchronousDispatcher] (Log4jLogger.java:debug:60)  -PathInfo: /bank
DEBUG [ejava.exercises.simple.bank.rs.BankRS] (BankRS.java:resetBank:72)  -DELETE http://127.0.0.1:56074/simple-bank-war6/bank
DEBUG [org.jboss.resteasy.core.SynchronousDispatcher] (Log4jLogger.java:debug:60)  -PathInfo: /bank
DEBUG [ejava.exercises.simple.bank.rs.BankRS] (BankRS.java:updateBank:55)  -PUT http://127.0.0.1:56074/simple-bank-war6/bank
]]></programlisting>
                </listitem>
            </itemizedlist>                   
        </section>
        
        <section id="restdev-unittest-resteasy-spring-dependency">
            <title>RESTEasy/Spring/Unit Testing Maven Key Dependencies</title>
            <itemizedlist>
                <listitem><para>The primary obstacle with using RESTEasy and Spring together
                    in an application is to get the class instances that RESTEasy
                    uses to be the same instances that Spring has already instantiated
                    and hydrated with a configuration.</para></listitem>
                <listitem><para>The resteasy-spring module addresses most of that</para>
                </listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[
                <!-- spring application context and beans -->
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                    <version>3.1.1.RELEASE</version>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                    <version>3.1.1.RELEASE</version>
                </dependency>
                <!-- needed for spring JavaConfig -->
                <dependency>
                    <groupId>cglib</groupId>
                    <artifactId>cglib</artifactId>
                    <version>2.2.2</version>
                </dependency>
                <!-- spring needs this to be in classpath for jsr330 support -->
                <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <scope>test</scope>
                </dependency>
   
                <!-- resteasy/spring/stand-alone WAR integration -->     
                 <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-spring</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-web</artifactId>
                    <scope>test</scope>
                </dependency>

                <!-- spring/junit integration -->                
                  <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-test</artifactId>
                  </dependency>
                <!-- Unit Test HTTP Server -->
                <dependency>
                     <groupId>org.mortbay.jetty</groupId>
                     <artifactId>jetty</artifactId>
                     <scope>test</scope>
                </dependency>
                <!-- HTTP Client library -->
                <dependency>
                    <groupId>org.apache.httpcomponents</groupId>
                    <artifactId>httpclient</artifactId>
                    <scope>test</scope>
                </dependency>
]]></programlisting>
        </section>

</chapter>

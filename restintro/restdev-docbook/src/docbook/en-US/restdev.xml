<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
    
    <bookinfo>
        <title>Developing RESTful Web Services</title>
        <subtitle>Project Assembly and Development Scenarios</subtitle>
    </bookinfo>
    <preface id="restdev-referenes">
        <title>References</title>
        <orderedlist>
            <listitem><para>
                <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">Introduction to the (Maven) POM</ulink></para>
            </listitem>
            <listitem><para>
                <ulink url="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">Introduction to the (Maven) Dependency Mechanism</ulink></para>
            </listitem>
            <listitem><para>
                <ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference">Maven Lifecycle Reference</ulink></para>
            </listitem>
        </orderedlist>
    </preface>
  
    <toc/>

    <chapter id="maven-setup">
        <title>Maven Project Setup</title>
        <para/>
        
        <section id="pom-core-setup">
            <title>pom.xml Minimal Setup
            <footnote><para><ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-pom.html">Introduction to the (Maven) POM</ulink></para></footnote>
            </title>
            <programlistingco>
                <areaspec>
                    <area id="schema" coords="2"/>
                    <area id="modelVersion" coords="6"/>
                    <area id="gav" coords="7-9"/>
                    <area id="packaging" coords="10"/>
                </areaspec>
<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    <groupId>ejava.exercises</groupId>
    <artifactId>simple-bank-war6</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    
</project>
]]></programlisting>
            <calloutlist>
                <callout arearefs="schema"><para>XML schema references are optional but very helpful when using an XML schema-aware editor</para></callout>
                <callout arearefs="modelVersion"><para>ModelVersion=4 required by Maven</para></callout>
                <callout arearefs="gav"><para>Group, ArtifactId, and Version (GAV) are standard Maven artifact identifiers</para></callout>
                <callout arearefs="packaging"><para>Packaging identifies build-time set of profiles for project as well as primary artifact type</para></callout>
            </calloutlist>
            </programlistingco>
            
                <section id="maven-gav">
                    <title>Group, ArtifactId, and Version (GAV)</title>
                    <para>Along with packaging type (and optional classifier), uniquely identifies the artifact</para>
                    <para>Unique identity expressed in repository</para>
                    <programlistingco>
                        <areaspec>
                            <area id="repo-groupId" coords="4"/>
                            <area id="repo-artifactId" coords="5"/>
                            <area id="repo-version" coords="6"/>
                            <area id="repo-classifier" coords="10"/>
                            <area id="repo-artifact" coords="11"/>
                        </areaspec>
<programlisting><![CDATA[         
HOME/.m2/repository/
           
ejava/exercises/
`-- simple-bank-war6
    |-- 1.0-SNAPSHOT
    |   |-- maven-metadata-local.xml
    |   |-- _maven.repositories
    |   |-- simple-bank-war6-1.0-SNAPSHOT.pom
    |   |-- simple-bank-war6-1.0-SNAPSHOT-tests.jar
    |   `-- simple-bank-war6-1.0-SNAPSHOT.war
    `-- maven-metadata-local.xml
]]></programlisting>
                    <calloutlist>
                        <callout arearefs="repo-groupId"><para>GroupId represented by a root level directory structure; contains artifactIds</para></callout>
                        <callout arearefs="repo-artifactId"><para>ArtifactId represented by a leaf-level directory structure; contains versions</para></callout>
                        <callout arearefs="repo-version"><para>Version represents the lowest level directory structure; contains artifacts and metadata</para></callout>
                        <callout arearefs="repo-artifact"><para>primary artifact</para></callout>
                        <callout arearefs="repo-classifier"><para>example additional artifact (not yet part of output); distinguished by classifier</para></callout>
                    </calloutlist>
                    </programlistingco>
                </section>
                
                <section id="pom-versions">
                    <title>SNAPSHOTs</title>
                    <variablelist>            
                        <varlistentry><term>packaging=xxx</term>
                            <listitem><para>"released" or "baselined" version and does not change</para></listitem>
                        </varlistentry>
                        <varlistentry><term>version=xxx-SNAPSHOT</term>
                            <listitem><para>"work in progress"" and tomorrow's version may change</para></listitem>
                        </varlistentry>
                    </variablelist>
                </section>
        </section>
        
        <section id="pom-inheritance">
            <title>Project Inheritance</title>
            <para>Define packaging=pom projects to host common definitions</para>
<programlisting language="xml"><![CDATA[                    
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
...
    <groupId>ejava.build</groupId>
    <version>1.0-SNAPSHOT</version>
    <artifactId>ejava-project</artifactId>
    <packaging>pom</packaging>
...
]]></programlisting>

            <para>Primary Packaging Types (expandable)</para>
        <variablelist>            
            <varlistentry><term>packaging=pom</term>
                <listitem><para>Used for parent projects</para></listitem>
            </varlistentry>
            <varlistentry><term>packaging=jar (default)</term>
                <listitem><para>Used for simple Java archive projects</para></listitem>
            </varlistentry>
            <varlistentry><term>packaging=war</term>
                <listitem><para>Used for JavaEE WAR projects</para></listitem>
            </varlistentry>
            <varlistentry><term>packaging=ejb</term>
                <listitem><para>Used for JavaEE EJB projects</para></listitem>
            </varlistentry>
            <varlistentry><term>packaging=ear</term>
                <listitem><para>Used for JavaEE EAR projects</para></listitem>
            </varlistentry>
            <varlistentry><term>packaging=docbook</term>
                <listitem><para>Example extension provided by JBoss Community Documentation for docbook projects
                <footnote><para><ulink url="http://www.jboss.org/maven-jdocbook-plugin/">Maven jDocBook Plugin</ulink></para></footnote>
                </para></listitem>
            </varlistentry>
        </variablelist>
            

            <para>Declare parent dependency on that project</para>
<programlisting language="xml"><![CDATA[                    
    <parent>
         <groupId>ejava.build</groupId>
         <artifactId>ejava-project</artifactId>
         <version>1.0-SNAPSHOT</version>
         <relativePath>../../ejava-build/ejava-project</relativePath>
    </parent>

    <groupId>ejava.exercises</groupId>
    <artifactId>simple-bank-war6</artifactId>
    <packaging>war</packaging>
]]></programlisting>
            
            
        </section>

        <section id="pom-dependencies">
            <title>Project Dependencies
            <footnote><para><ulink url="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">Introduction to the (Maven) Dependency Mechanism</ulink></para></footnote>
            </title>
            <para>Define dependencies (in either the parent or this project) on external artifacts</para>
            <para/>
<programlisting language="xml"><![CDATA[                    
    <dependencies>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
         <dependency>
             <groupId>org.mortbay.jetty</groupId>
             <artifactId>jetty</artifactId>
             <scope>test</scope>
         </dependency>
    </dependencies>
]]></programlisting>

        <para>Primary Dependency Scopes</para>
        <variablelist>            
            <varlistentry><term>scope=compile</term>
                <listitem><para>(default) seen by main and test code; transitive with artifact</para></listitem>
            </varlistentry>
            <varlistentry><term>scope=provided</term>
                <listitem><para>same as compile but without being transitive</para></listitem>
            </varlistentry>
            <varlistentry><term>scope=test</term>
                <listitem><para>seen only by src/test; not transitive</para></listitem>
            </varlistentry>
            <varlistentry><term>scope=runtime</term>
                <listitem><para>not used by compile; transitive; used during runtime use</para></listitem>
            </varlistentry>
        </variablelist>
        
        </section>
        
        <section id="pom-descriptive-info">
            <title>Project Descriptive Info</title>
<programlisting language="xml"><![CDATA[                    
...
    <name>Simple Bank App</name>
    <description>
        This project is meant to be an initial jax-rs hello
        world application to be used to help verify some of 
        the components of the environment. It should have very 
        few external dependencies.
    </description>
...    
]]></programlisting>
        
            <para>Good naming helps with descriptive build summaries</para>
<programlisting><![CDATA[                    
[INFO] Reactor Summary:
[INFO] 
[INFO] Exercises ......................................... SUCCESS [0.487s]
[INFO] Development Environment Setup ..................... SUCCESS [51.850s]
[INFO] Simple Bank App ................................... SUCCESS [25.772s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1:21.775s
[INFO] Finished at: Sat Apr 28
]]></programlisting>
        </section>            
            

        <section id="pom-buid-finalName">
            <title>Project Build.finalName</title>
<programlisting language="xml"><![CDATA[                    
...
    <build>
        <finalName>${project.artifactId}</finalName>
    </build>
...
</project>
]]></programlisting>

            <para>Impacts the name of the artifact built/deployed to server --
                which can impact the context root.</para>
<programlisting><![CDATA[                    
$ grep finalNamex pom.xml ; ls target/*.war
target/simple-bank-war6-1.0-SNAPSHOT.war


$ grep finalName pom.xml ; ls target/*.war
        <finalName>${project.artifactId}</finalName>
target/simple-bank-war6.war
]]></programlisting>            
        </section>
        
        
    </chapter>
    
    
    
    
    
    <chapter id="maven-project-structure">
        <title>Maven Project Structure (war)</title>

        <section id="top-level-project-source-structure">   
            <title>Top Level Project Source Structure</title>
<programlisting><![CDATA[
simple-bank-war6/
|-- pom.xml
`-- src
    |-- main
    |   |-- java
    |   |   `-- (production java classes)
    |   `-- webapp
    |       `-- (production web resources)
    |-- test
    |   |-- java
    |   |   `-- (test java classes)
    |   `-- resources
    |       `-- (test resources)
    `-- it
        |-- java
        |   `-- (integration-test java classes)
        `-- resources
            `-- (integration-test resources)
]]></programlisting>
    <tip>
        <title>Unit and Integration Testing</title>
        <itemizedlist>
            <listitem><para>Unit tests should be within a unit and should rely 
                on as few external resources as possible.</para></listitem>
            <listitem><para>Integration tests should test the component within 
                the context of a simulated deployment and may require the 
                addition of a server.</para></listitem>
            <listitem>
            <para>It is optional to organize test and integration-test artifacts in 
                separate directories but maven does have special plugins, naming
                conventions, and phases that are targeted at the two. I find that
                separating them into separate directories helps automatically determine
                the types of tests performed by the module.</para></listitem>
        </itemizedlist>
    </tip>

            <para>Primary Source Paths</para>
            <variablelist>            
                <varlistentry><term>src/main</term>
                    <listitem><para>Source files for what is built and placed into the primary artifact</para></listitem>
                </varlistentry>
                <varlistentry><term>src/test</term>
                    <listitem><para>Sources files used to unit test primary artifact</para></listitem>
                </varlistentry>
                <varlistentry><term>src/it</term>
                    <listitem><para>Source files used to integration test primary artifact</para></listitem>
                </varlistentry>
            </variablelist>
        
            <para>Primary Source Sub-paths</para>
            <variablelist>            
                <varlistentry><term>xxx/java</term>
                    <listitem><para>Java source files</para></listitem>
                </varlistentry>
                <varlistentry><term>xxx/resources</term>
                    <listitem><para>Resources files (e.g., property files)</para></listitem>
                </varlistentry>
                <varlistentry><term>src/main/webapp</term>
                    <listitem><para>Example war-plugin specific source for web resource files (e.g., WEB-INF and index.html)</para></listitem>
                </varlistentry>
            </variablelist>
        </section>
        
        <section id="maven-build-dir">
            <title>Top Level Build Tree Structure</title>
            <para>Artifacts are tested and deployed from the target directory</para>
<programlisting><![CDATA[
simple-bank-war6/target/
|-- classes
|   |-- (compiled production classes)
|   `-- (processed production resources)
|-- generated-sources
|   |-- annotations
|   `-- test-annotations
|-- maven-archiver
|   `-- pom.properties
|-- simple-bank-war6-1.0-SNAPSHOT
|   |-- (exploded war content)
|-- simple-bank-war6-1.0-SNAPSHOT-tests.jar
|-- simple-bank-war6-1.0-SNAPSHOT.war
`-- test-classes
    |-- (compied test and integration-test classes)
    |-- (processed test and integration-test resources)
]]></programlisting>
        </section>
        
        <section id="full-project-structure">   
            <title>Full Example (war) Project Structure</title>
<programlisting><![CDATA[
$ tree simple-bank-war6/
simple-bank-war6/
|-- pom.xml
|-- src
|   |-- it
|   |   |-- java
|   |   |   `-- ejava
|   |   |       `-- examples
|   |   |           `-- restintro
|   |   |               `-- rest
|   |   |                   |-- AccountsIT.java
|   |   |                   |-- BankITConfig.java
|   |   |                   `-- BankIT.java
|   |   `-- resources
|   |       `-- it.properties
|   |-- main
|   |   |-- java
|   |   |   `-- ejava
|   |   |       `-- exercises
|   |   |           `-- simple
|   |   |               `-- bank
|   |   |                   |-- dto
|   |   |                   |   |-- Account.java
|   |   |                   |   |-- Accounts.java
|   |   |                   |   |-- Bank.java
|   |   |                   |   `-- BankRepresentation.java
|   |   |                   |-- rs
|   |   |                   |   |-- AccountRefs.java
|   |   |                   |   |-- AccountsRS.java
|   |   |                   |   |-- BankRefs.java
|   |   |                   |   `-- BankRS.java
|   |   |                   |-- RSApplication.java
|   |   |                   `-- svc
|   |   |                       |-- AccountsService.java
|   |   |                       |-- AccountsServiceStub.java
|   |   |                       |-- BankService.java
|   |   |                       `-- BankServiceStub.java
|   |   `-- webapp
|   |       |-- index.html
|   |       `-- WEB-INF
|   |           |-- beans.xml
|   |           `-- web.xml
|   `-- test
|       |-- java
|       |   `-- ejava
|       |       `-- exercises
|       |           `-- simple
|       |               `-- bank
|       |                   |-- AccountsTest.java
|       |                   |-- BankConfig.java
|       |                   `-- BankTest.java
|       `-- resources
|           |-- local-web
|           |   `-- WEB-INF
|           |       `-- web.xml
|           |-- log4j.xml
|           `-- test.properties
`-- target
    |-- classes
    |   `-- ejava
    |       `-- exercises
    |           `-- simple
    |               `-- bank
    |                   |-- dto
    |                   |   |-- Account.class
    |                   |   |-- Accounts.class
    |                   |   |-- Bank.class
    |                   |   |-- BankRepresentation.class
    |                   |   `-- BankRepresentation$Link.class
    |                   |-- rs
    |                   |   |-- AccountRefs.class
    |                   |   |-- AccountsRS.class
    |                   |   |-- BankRefs.class
    |                   |   `-- BankRS.class
    |                   |-- RSApplication.class
    |                   `-- svc
    |                       |-- AccountsService.class
    |                       |-- AccountsServiceStub.class
    |                       |-- BankService.class
    |                       `-- BankServiceStub.class
    |-- generated-sources
    |   |-- annotations
    |   `-- test-annotations
    |-- maven-archiver
    |   `-- pom.properties
    |-- simple-bank-war6-1.0-SNAPSHOT
    |   |-- index.html
    |   |-- META-INF
    |   `-- WEB-INF
    |       |-- beans.xml
    |       |-- classes
    |       |   `-- ejava
    |       |       `-- exercises
    |       |           `-- simple
    |       |               `-- bank
    |       |                   |-- dto
    |       |                   |   |-- Account.class
    |       |                   |   |-- Accounts.class
    |       |                   |   |-- Bank.class
    |       |                   |   |-- BankRepresentation.class
    |       |                   |   `-- BankRepresentation$Link.class
    |       |                   |-- rs
    |       |                   |   |-- AccountRefs.class
    |       |                   |   |-- AccountsRS.class
    |       |                   |   |-- BankRefs.class
    |       |                   |   `-- BankRS.class
    |       |                   |-- RSApplication.class
    |       |                   `-- svc
    |       |                       |-- AccountsService.class
    |       |                       |-- AccountsServiceStub.class
    |       |                       |-- BankService.class
    |       |                       `-- BankServiceStub.class
    |       |-- lib
    |       |   `-- slf4j-api-1.6.1.jar
    |       `-- web.xml
    |-- simple-bank-war6-1.0-SNAPSHOT-tests.jar
    |-- simple-bank-war6-1.0-SNAPSHOT.war
    `-- test-classes
        |-- ejava
        |   |-- examples
        |   |   `-- restintro
        |   |       `-- rest
        |   |           |-- AccountsIT.class
        |   |           |-- BankIT.class
        |   |           `-- BankITConfig.class
        |   `-- exercises
        |       `-- simple
        |           `-- bank
        |               |-- AccountsTest.class
        |               |-- BankConfig.class
        |               `-- BankTest.class
        |-- it.properties
        |-- local-web
        |   `-- WEB-INF
        |       `-- web.xml
        |-- log4j.xml
        `-- test.properties

63 directories, 72 files
]]></programlisting>
        </section>
    </chapter>
    
    <chapter id="restdev-artifacts">
        <title>REST Project Source Files</title>
        
        <section id="restdev-webxml-javaee6">
            <title>Deployed JavaEE 6 web.xml</title>
            
            <para>WEB-INF/web.xml for WAR use only -- not needed by JAX-RS</para>
<programlisting><![CDATA[            
simple-bank-war6/src/main/webapp/
`-- WEB-INF
    |-- beans.xml
    `-- web.xml
]]></programlisting>

            <itemizedlist>
                <listitem><para>No reference necessary to JAX-RS in JavaEE 6 web.xml</para></listitem>
                <listitem><para>JAX-RS automatically bootstrapped with @Application class</para></listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[            
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
</web-app>
]]></programlisting>

            <note>
                <para>Its important to remember that the deployed artifacts are
                    greatly simplified by the exclusive use of JAX-RS and the
                    rest of the JavaEE 6 stack. The example is designed to be
                    a JavaEE6-only application when deployed to the server. 
                    The use of Spring and the JavaEE/Spring integration complexities 
                    associated with it covered in the following chapters have
                    to do with local development instances only and do not
                    get deployed to the server. The use of Spring in the 
                    development environment is primarily done to show how to
                    write portable Java code between JavaEE and Spring-based 
                    deployments. It also lays the groundwork for infinite 
                    final options.
                </para>
            </note>
        </section>

        <section id="restdev-cdi">
            <title>Activating Contexts and Dependency Injection (CDI) in JavaEE
            <footnote id="jsr-299-footnote"><para><ulink url="http://docs.jboss.org/weld/reference/1.0.0/en-US/html_single/">Weld - JSR-299 Reference Implementation</ulink></para></footnote> 
            </title>
            
            <para>WEB-INF/beans.xml for web applications must be present</para>
<programlisting><![CDATA[            
simple-bank-war6/src/main/webapp/
`-- WEB-INF
    |-- beans.xml
    `-- web.xml
]]></programlisting>

            <para>beans.xml can be empty or skeletally defined</para>
<programlisting language="xml"><![CDATA[            
<?xml version="1.0" encoding="UTF-8"?>
<!-- A file by this name must exist to turn on CDI (JSR-299) functionality.
    It can be an empty text file (0 bytes) until you actually need to configure 
    something. But without it annotations like @Inject will be ignored. 
    -->
<beans xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="
        http://java.sun.com/xml/ns/javaee 
        http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
</beans>
]]></programlisting>
        </section>



        <section id="restdev-application">
            <title>javax.ws.rs.core.Application
                <footnote><para><ulink url="http://docs.jboss.org/resteasy/docs/2.3.1.GA/userguide/html/Installation_Configuration.html#javax.ws.rs.core.Application">RESTEasy Docs:javax.ws.rs.core.Application</ulink></para></footnote>
            </title>
            <para></para>
<programlisting language="java"><![CDATA[            
$ cat src/main/java/ejava/exercises/simple/bank/RSApplication.java        
package ejava.exercises.simple.bank; 

import javax.ws.rs.ApplicationPath;                                                                                                                                
import javax.ws.rs.core.Application;

/**                                                                                                                             
 * The following is an example for activating JAX-RS functionality using                                                        
 * the no-XML approach. By creating a class that extends                                                                        
 * javax.ws.rs.core.Application and annotating with                                                                             
 * @javax.ws.rs.ApplicationPath -- we are signaling to the container that
 * this is a jax-ws application.
 */
@ApplicationPath("")
public class RSApplication extends Application {
}
]]></programlisting>
        <note>
            <para>The above Java class and annotation technique is equivalent
                to the following in web.xml</para>
<programlisting language="xml"><![CDATA[   
<servlet>
    <servlet-name>javax.ws.rs.core.Application</servlet-name>
    <load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
    <servlet-name>javax.ws.rs.core.Application</servlet-name>
    <url-pattern>/*</url-pattern>
</servlet-mapping>
]]></programlisting>
        </note>
        </section>

        <section id="restdev-dto">
            <title>Data Transfer Object (DTO)</title>

            <section id="restdev-dto-jaxb">
                <title>JAXB DTO Implementation Class</title>
            <para>JAXB can be used to implement DTO constructs to remote clients</para>
<programlisting language="java"><![CDATA[            
@XmlRootElement(name="bank", namespace=BankRepresentation.BANK_NAMESPACE)
@XmlType(name="BankType", namespace=BankRepresentation.BANK_NAMESPACE, propOrder={
        "name", "totalAssets"
})
@XmlAccessorType(XmlAccessType.PROPERTY)
public class Bank extends BankRepresentation {
    private String name;
    private float totalAssets;
    
...
    public String getName() { return name; }
    public void setName(String name) {
        this.name = name;
    }

    public float getTotalAssets() { return totalAssets; }
    public void setTotalAssets(float totalAssets) {
        this.totalAssets = totalAssets;
    }
}
]]></programlisting>
<programlisting language="java"><![CDATA[            
@XmlType(name="BankRepresentationType", namespace=BankRepresentation.BANK_NAMESPACE, propOrder={
        "updated", "links"
})
@XmlAccessorType(XmlAccessType.PROPERTY)
public class BankRepresentation {
    public static final String BANK_NAMESPACE="http://dmv.ejava.info";
    
    @XmlType(name="LinkType", namespace=BANK_NAMESPACE)
    public static class Link {
        private String rel;
        private URI href;
...        
        public String getRel() { return rel; }
        public void setRel(String rel) {
            this.rel = rel;
        }
        public URI getHref() { return href; }
        public void setHref(URI href) {
            this.href = href;
        }
        
    }
...
    @XmlElement(required=false)
    public Date getUpdated() { return updated; }
    public void setUpdated(Date updated) {
        this.updated = updated;
    }

    @XmlElement(name="link", namespace=BANK_NAMESPACE)
    public List<Link> getLinks() { return links; }
    protected void setLinks(List<Link> links) {
        this.links = links;
    }
...    
}
]]></programlisting>
            </section>            

            <section id="restdev-dto-xml">
                <title>XML Representation</title>
<programlisting language="xml"><![CDATA[            
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <updated>2012-04-29T01:43:03.901-04:00</updated>
    <ns2:link>
        <href>http://127.0.0.5:9092/simple-bank-war6/bank</href>
        <rel>self</rel>
    </ns2:link>
    <ns2:link>
        <href>http://127.0.0.5:9092/simple-bank-war6/accounts</href>
        <rel>accounts</rel>
    </ns2:link>
    <name>Buffett S&amp;L</name>
    <totalAssets>0.0</totalAssets>
</ns2:bank>
]]></programlisting>
            </section>
        </section>

        <section id="restdev-service">
            <title>Service</title>
            
            <section id="restdev-service-interface">
                <title>Service Interface</title>
                <para></para>
<programlisting language="java"><![CDATA[            
public interface BankService {
    Bank getBank();
    int updateBank(Bank bank);
    void resetBank();
}
]]></programlisting>
            </section>

            <section id="restdev-service-impl">
                <title>Service Implementation Class</title>
                <para>javax.inject.Singleton signals JavaEE6 that there should
                    only be a single instance of this class when injecting
                    it into other instances.
                    <footnote><para><ulink url="http://docs.oracle.com/javaee/6/api/javax/inject/package-tree.html">javax.inject Package</ulink></para></footnote>
                    </para>
<programlisting language="java"><![CDATA[            
@javax.inject.Singleton
public class BankServiceStub implements BankService {
    private Bank bank=new Bank();
    ...
    @Override
    public Bank getBank() {
        Bank b = new Bank();
        b.setName(bank.getName());
        b.setTotalAssets(accounts.getAssets());
        b.setUpdated(bank.getUpdated());
        b.resetLinks();
        return b;
    }
]]></programlisting>
            </section>
         </section>

        <section id="restdev-resource">
            <title>Resource Class</title>
            <itemizedlist>
                <listitem><para>Class level @Path annotation provides base URL pattern for all methods in class</para></listitem>
                <listitem><para>@javax.inject.Inject triggers JavaEE6 and Spring to inject bean</para></listitem>
                <listitem><para>@Context is injected by JAX-RS container at request-time</para></listitem>
                <listitem><para>@GET defines allowed HTTP method(s)</para></listitem>
                <listitem><para>@Produces used in content negotiation</para></listitem>
                <listitem><para>@Format triggers pretty print of returned XML</para></listitem>
            </itemizedlist>
<programlisting language="java"><![CDATA[            
@javax.ws.rs.Path("bank")
public class BankRS {
    protected Logger log = LoggerFactory.getLogger(BankRS.class);
    protected @javax.inject.Inject BankService service;
    protected @javax.ws.rs.core.Context UriInfo uriInfo;
    protected @javax.ws.rs.core.Context Request request;

    @javax.ws.rs.Path("")
    @javax.ws.rs.GET
    @javax.ws.rs.Produces(javax.ws.rs.core.MediaType.APPLICATION_XML)
    @Formatted //resteasy extension
    public Response getBank() {
        log.debug("{} {}", request.getMethod(), uriInfo.getRequestUri());
        Bank bank = service.getBank();
        URI self = new BankRefs(uriInfo).setHRefs(bank);
        log.debug("returning bank:\n{}", bank.toXML());
        return Response.ok(bank, MediaType.APPLICATION_XML)
                .contentLocation(self)
                .lastModified(bank.getUpdated())
                .build();
    }
...    
]]></programlisting>
        </section>
    </chapter>
    
    
    
    
    
    
    <chapter id="restdev-spring">
        <title>RESTEasy Spring Integration</title>
        
        <note>
            <para>My use of Spring here is constrained to the local JVM only
                and is not part of the deployed application server to JBoss.
                This is done to
                <itemizedlist>
                    <listitem><para>Show alignment between new JavaEE 6 and Spring 3.x APIs</para></listitem>
                    <listitem><para>Leverage configuration capability for testing</para></listitem>
                </itemizedlist>
             </para>
        </note>
        
        <section id="maven-resteasy-spring-dependency">
            <title>RESTEasy Maven Key Dependencies</title>
            <itemizedlist>
                <listitem><para>The primary obstacle with using RESTEasy and Spring together
                    in an application is to get the class instances that RESTEasy
                    uses to be the same instances that Spring has already instantiated
                    and hydrated with a configuration.</para></listitem>
                <listitem><para>The resteasy-spring module addresses most of that</para></listitem>
            </itemizedlist>
            
            <note>
                <para>
                    I had to patch resteasy-spring 2.3.2.Final to work 
                    correctly with Spring's JavaConfig. Jira ticket 
                    <ulink url="https://issues.jboss.org/browse/RESTEASY-679?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel">RESTEASY-679</ulink>
                    was logged to provide a test case and solution. Version
                    2.3.2.javacfg1 is only available from the ejava.info
                    Maven repository.
                </para>
            </note>
            
            <para>The presence of javax.inject.Inject class triggers Spring JSR-330 processing</para>
<programlisting language="xml"><![CDATA[            
                 <dependency>
                    <groupId>org.jboss.resteasy</groupId>
                    <artifactId>resteasy-spring</artifactId>
                    <version>2.3.2.javacfg1</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-web</artifactId>
                    <version>3.1.1.RELEASE</version>
                    <scope>test</scope>
                </dependency>
                <!-- spring needs this to be in classpath -->
                <dependency>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                    <scope>test</scope>
                </dependency>
                <!-- Unit Test HTTP Server -->
                <dependency>
                     <groupId>org.mortbay.jetty</groupId>
                     <artifactId>jetty</artifactId>
                     <scope>test</scope>
                </dependency>
]]></programlisting>
        </section>
        
        
        <section id="restdev-jetty-servlet">
            <title>Using Jetty for Local Unit Testing</title>
        
<programlisting language="java"><![CDATA[            
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={BankConfig.class})
public class BankTest {
    protected static Server server;    
    protected @Inject Environment env;
    protected @Inject URI bankURI;
    protected @Inject HttpClient httpClient;
    
    @Before
    public void setUp() throws Exception {
        ...  
        if (bankURI.getPort()>=9092) {
            if (server == null) {
                String path=env.getProperty("servletContext", "/");
                server = new Server(9092);
                WebAppContext context = new WebAppContext();
                context.setResourceBase("src/test/resources/local-web");
                context.setContextPath(path);
                context.setParentLoaderPriority(true);
                server.setHandler(context);
            }
            server.start();
        }
    }
]]></programlisting>

            <para>A separate resources directory and web.xml is setup for
                running the local unit tests</para>
<programlisting><![CDATA[            
simple-bank-war6/src/main/webapp/
|-- index.html
`-- WEB-INF
    |-- beans.xml
    `-- web.xml
simple-bank-war6/src/test/resources/local-web/
`-- WEB-INF
    `-- web.xml
]]></programlisting>


        </section>

        <section id="restdev-spring-webxml">
            <title>WEB-INF/web.xml</title>
            
            <note>
                <para>Since the unit test servlet engine running in the 
                    local JVM is not a JavaEE 6 container and we are integrating
                    the RESTEasy JAX-RS provider with Spring -- we must do a 
                    lot of manual configuration here. This did not need to be 
                    done on what was deployed to the server.</para>
            </note>

<programlisting><![CDATA[            
simple-bank-war6/src/test/resources/local-web/
`-- WEB-INF
    `-- web.xml
]]></programlisting>

            <section id="restdev-spring-webxml-contextClass">
                <title>Spring contextClass</title>
                <itemizedlist>
                    <listitem><para>Installs the web-aware Spring application context</para></listitem>
                    <listitem><para>Generic to Spring and nothing to do with RESTEasy</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>contextClass</param-name>
    <param-value>
        org.springframework.web.context.support.AnnotationConfigWebApplicationContext
    </param-value>    
</context-param>
]]></programlisting>
                </section>
    
            <section id="restdev-spring-webxml-contextConfigLocation">
                <title>Spring contextConfigLocation</title>
                <itemizedlist>
                    <listitem><para>Defines bean classes for Spring using JavaConfig approach</para></listitem>
                    <listitem><para>Generic to Spring and nothing to do with RESTEasy</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>ejava.exercises.simple.bank.BankConfig</param-value>
</context-param>    
]]></programlisting>
                </section>
    
            <section id="restdev-spring-webxm-prefix">
                <title>resteasy.servlet.mapping.prefix</title>
                <itemizedlist>
                    <listitem><para>Tells RESTEasy the root of all JAX-RS resources</para></listitem>
                    <listitem><para>Must match servlet-context</para></listitem>
                    <listitem><para>Generic to RESTEasy and nothing to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>resteasy.servlet.mapping.prefix</param-name>
    <param-value>/</param-value>
</context-param>
]]></programlisting>
            </section>
    
            <section id="restdev-spring-webxml-resources">
                <title>resteasy.resources</title>
                <itemizedlist>
                    <listitem><para>Registers JAX-RS classes with RESTEasy</para></listitem>
                    <listitem><para>Generic to RESTEasy and little to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<context-param>
    <param-name>resteasy.resources</param-name>
    <param-value>
        ejava.exercises.simple.bank.rs.BankRS,
        ejava.exercises.simple.bank.rs.AccountsRS
    </param-value>
</context-param>
]]></programlisting>
                    <note>
                        <para>RESTEasy does have an autoscan feature that will
                            automatically locate JAX-RS resources in the 
                            application. However, this feature cannot be 
                            used with the Spring integration.</para>
                    </note>
                </section>
    
            <section id="restdev-spring-webxml-servlet">
                <title>RESTEasy Servlet</title>
                <itemizedlist>
                    <listitem><para>Registers RESTEasy servlet with servlet container</para></listitem>
                    <listitem><para>Generic to RESTEasy and nothing to do with Spring</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<servlet>
    <servlet-name>Resteasy</servlet-name>
    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>Resteasy</servlet-name>
    <url-pattern>/*</url-pattern>
</servlet-mapping>
]]></programlisting>
                    <tip>
                        <para>RESTEasy can also be deployed as a servlet listener
                            as well as a servlet filter. The servlet filter allows
                            other resources to share the same servlet context as 
                            the JAX-RS resources.</para>
                    </tip>
                </section>
    
            <section id="restdev-spring-webxml-listener">
                <title>RESTEasy Listeners</title>
                <itemizedlist>
                    <listitem><para>Registers RESTEasy and RESTEasy/Spring integration listener classes</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[            
<listener>
    <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
</listener>
<listener>
  <listener-class>org.jboss.resteasy.plugins.spring.SpringContextLoaderListener</listener-class>
</listener>    
]]></programlisting>
                </section>

                <section id="restdev-spring-webxml-complete">
                    <title>Complete WEB-INF/web.xml</title>
<programlisting language="xml"><![CDATA[            
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <context-param>
        <param-name>contextClass</param-name>
        <param-value>
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>    
    </context-param>
    
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>ejava.exercises.simple.bank.BankConfig</param-value>
    </context-param>    

    <context-param>
        <param-name>resteasy.servlet.mapping.prefix</param-name>
        <param-value>/</param-value>
    </context-param>
    <context-param>
        <param-name>resteasy.resources</param-name>
        <param-value>
            ejava.exercises.simple.bank.rs.BankRS,
            ejava.exercises.simple.bank.rs.AccountsRS
        </param-value>
    </context-param>

    <servlet>
        <servlet-name>Resteasy</servlet-name>
        <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Resteasy</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <listener>
        <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
    </listener>
    <listener>
      <listener-class>org.jboss.resteasy.plugins.spring.SpringContextLoaderListener</listener-class>
   </listener>    
</web-app>
]]></programlisting>
                </section>
        </section>


        <section id="restdev-javacfg">
            <title>Injection</title>
            <para>Injection occurs in several places</para>
            <itemizedlist>
                <listitem><para>By JavaEE provider when deployed to server</para></listitem>
                <listitem><para>By Spring when deployed locally</para></listitem>
                <listitem><para>By JAX-RS/RESTEasy provider deployed local and on server</para></listitem>
            </itemizedlist>

            <section id="restdev-service-injection">
                <title>Service Injection</title>
                <para>Resource class defines @javax.inject.Inject of BankService interface</para>
<programlisting language="java"><![CDATA[            
@Path("bank")
public class BankRS {
    protected @Inject BankService service;
]]></programlisting>

                <para>Spring configured to inject instance of BankServiceStub class
                   using JavaConfig</para>
<programlisting language="java"><![CDATA[            
@Configuration
public class BankConfig {
    ...
    @Bean @Singleton
    public BankService bankService() {
        return new BankServiceStub();
    }
]]></programlisting>

                <para>JavaEE container configured with @java.inject.Singleton
                    metadata</para>
<programlisting language="java"><![CDATA[            
@Singleton
public class BankServiceStub implements BankService {
]]></programlisting>
            </section>
            
            <section id="restdev-test-injection">
                <title>Test Injection</title>
                <para>JUnit tests defines</para>
                <itemizedlist>
                    <listitem><para>SpringJUnit4ClassRunner bootstrap</para></listitem>
                    <listitem><para>BankConfig.class JavaConfig</para></listitem>
                    <listitem><para>Inject of org.springframework.core.env.Environment</para></listitem>
                    <listitem><para>Inject of java.net.URI bankURI</para></listitem>
                    <listitem><para>Inject of org.apache.http.client.HttpClient httpClient</para></listitem>
                </itemizedlist>
<programlisting language="java"><![CDATA[            
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={BankConfig.class})
public class BankTest {
    protected @Inject Environment env;
    protected @Inject URI bankURI;
    protected @Inject HttpClient httpClient;
    
    ...
    @Test
    public void testSetupBank() throws Exception {
        log.info("*** testSetupBank ***");
        
            //get current state of bank
        HttpGet getBank = new HttpGet(bankURI);
        getBank.addHeader("Accept", MediaType.APPLICATION_XML);
        HttpResponse response = httpClient.execute(getBank);
...    
]]></programlisting>

                <para>BankConfig JavaConfig class provided</para>
<programlisting language="java"><![CDATA[            
@Configuration
public class BankConfig {
...
}
]]></programlisting>

                <para>BankConfig pulls in test.properties</para>
<programlisting language="java"><![CDATA[            
@Configuration
@PropertySource("classpath:/test.properties")
public class BankConfig {
    @Bean
    public static PropertySourcesPlaceholderConfigurer properties() {
        return new PropertySourcesPlaceholderConfigurer();
    }
]]></programlisting>

                <para>test.properties provides static property values</para>
<programlisting><![CDATA[            
host=${jboss.host}
port=9092
servletContext=/${project.artifactId}
]]></programlisting>

                <para>BankConfig defines java.net.URI bankURI</para>
<programlisting language="java"><![CDATA[            
@Inject
public Environment env;

@Bean 
public URI bankURI() {
    try {
        //this is the URI of the local jetty instance for unit testing
        String host=env.getProperty("host", "localhost");
        int port=Integer.parseInt(env.getProperty("port", "9092"));
        String path=env.getProperty("servletContext", "/");
        return new URI("http", null, host, port, path + "/bank", null, null);
    } catch (URISyntaxException ex) {
        ex.printStackTrace();
        throw new RuntimeException("error creating URI:" + ex, ex);
    }
]]></programlisting>

                <para>BankConfig defines org.apache.http.client.HttpClient httpClient</para>
<programlisting language="java"><![CDATA[            
@Bean @Singleton
public HttpClient httpClient() {
    log.info("creating non-cached HttpClient");
    HttpClient httpClient = new DefaultHttpClient();
    return httpClient;
}
]]></programlisting>
            </section>


            <section id="restdev-it-injection">
                <title>Integration Test Injection</title>
                <para>JUnit tests defines</para>
                <itemizedlist>
                    <listitem><para>SpringJUnit4ClassRunner bootstrap</para></listitem>
                    <listitem><para>BankConfig.class JavaConfig</para></listitem>
                    <listitem><para>BankITConfig.class JavaConfig (top priority)</para></listitem>
                    <listitem><para>Inject of org.springframework.context.ApplicationContext</para></listitem>
                </itemizedlist>
<programlisting language="java"><![CDATA[            
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes={BankConfig.class, BankITConfig.class})
public class BankIT extends BankTest {    
    protected @Inject ApplicationContext ctx;
]]></programlisting>

                <para>BankITConfig JavaConfig class provided</para>
                <para>BankConfig pulls in test.properties</para>
<programlisting language="java"><![CDATA[            
@Configuration
@PropertySource(value="classpath:it.properties")
public class BankITConfig {
...
}
]]></programlisting>
                <para>it.properties provides static property values; some overrides</para>
<programlisting><![CDATA[            
host=${jboss.host}
port=${jboss.servlet.port}
servletContext=/${project.artifactId}
]]></programlisting>

                <para>BankITConfig defines override for java.net.URI bankURI</para>
<programlisting language="java"><![CDATA[            
@Bean 
public URI bankURI() {
    try {
        String host = env.getProperty("host", "localhost");
        int port = env.getProperty("port", Integer.class, 8080);
        String path = env.getProperty("servletContext","/");
        URI baseUri = new URI("http", null, host, port, path, null, null);

        return UriBuilder.fromUri(baseUri)
                .path(BankRS.class)
                .build();
    } catch (URISyntaxException ex) {
        throw new RuntimeException("error building uri", ex);
    } 
}
]]></programlisting>

                <para>BankConfig defines org.apache.http.client.HttpClient httpClient</para>
<programlisting language="java"><![CDATA[            
@Bean @Singleton
public HttpClient httpClient() {
    log.info("creating non-cached HttpClient");
    HttpClient httpClient = new DefaultHttpClient();
    return httpClient;
}
]]></programlisting>
            </section>
        </section>

    </chapter>
    
    
    <chapter id="restdev-start-jboss">
        <title>Using JBoss for Integration</title>

        <section id="restenv-start-jboss">
            <title>Start JBoss Server (from the command line)</title>
            <tip>
                <para>Although Eclipse WTP/JBoss Tools allows you to start
                   and stop the JBoss server within Eclipse -- I find it 
                   easier to manage it in an external window since it completes
                   less for resources within Eclipse.</para>
            </tip>
<programlisting><![CDATA[                    
$ ./jboss-as-7.1.1.Final/bin/standalone.sh 
=========================================================================

  JBoss Bootstrap Environment

  JBOSS_HOME: /opt/jboss-as-7.1.1.Final

  JAVA: java

  JAVA_OPTS:  -server -XX:+TieredCompilation -Xms64m -Xmx512m -XX:MaxPermSize=256m 
  -Djava.net.preferIPv4Stack=true -Dorg.jboss.resolver.warning=true 
  -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000 
  -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true 
  -Djboss.server.default.config=standalone.xml -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n

=========================================================================

Listening for transport dt_socket at address: 8787
...
13:25:20,863 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on http://127.0.0.1:9990
13:25:20,864 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: JBoss AS 7.1.1.Final "Brontes" started in 13710ms 
- Started 188 of 265 services (76 services are passive or on-demand)
]]></programlisting>
        </section>

        <section id="restenv-tail-serverlog">
            <title>Monitor server.log for Verbose Debugging</title>
            <para/>
<programlisting><![CDATA[                    
$ tail -f jboss-as-7.1.1.Final/standalone/log/server.log
...
13:28:45,887 DEBUG [ejava.exercises.simple.bank.rs.AccountsRS] (http--127.0.0.1-8080-1) GET http://localhost:8080/simple-bank-war6/accounts?start=18&count=3
13:28:45,913 DEBUG [ejava.exercises.simple.bank.rs.AccountsRS] (http--127.0.0.1-8080-1) returning accounts <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:accounts xmlns:ns2="http://dmv.ejava.info" count="3" size="2" start="18" total="20">
    <account>
        <updated>2012-04-28T13:28:43.865-07:00</updated>
...
]]></programlisting>
        </section>

        <section id="restenv-stop-jboss">
            <title>Stop JBoss Server</title>
            <para>At least two ways to shutdown jboss instance</para>
            <orderedlist>
                <listitem><para>Use control-C in the console window</para>
<programlisting><![CDATA[                    
13:28:46,418 INFO  [org.jboss.as.server] (management-handler-thread - 3) JBAS018558: Undeployed "simple-bank-war6.war"
^C
13:33:01,142 INFO  [org.jboss.as.controller] (MSC service thread 1-2) JBAS014774: Service status report
...
13:33:01,284 INFO  [org.jboss.as] JBAS015950: JBoss AS 7.1.1.Final "Brontes" stopped in 128ms
]]></programlisting></listitem>
                <listitem><para>Use command line interface shutdown command</para>
<programlisting><![CDATA[                    
./jboss-as-7.1.1.Final/bin/jboss-cli.sh --connect command=:shutdown
{"outcome" => "success"}
<programlisting><![CDATA[                    
]]></programlisting></listitem>
            </orderedlist>
        </section>
    </chapter>
    
    
    
    
    <chapter id="maven-build-targets">
        <title>Maven Build Targets
        <footnote><para><ulink url="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference">Maven Lifecycle Reference</ulink></para></footnote>
        </title>
        
        <tip>
            <title><code>mvn -o</code> (offline) can speed up the build</title>
            <para>Once your local repository contains all required artifacts,
               you can prevent maven from checking for remote repository updates
               by running the build in the "offline" mode. You can do this 
               on the command line by adding the <code>-o</code> option as well
               as by adding the offline=true element to the settings.xml file
            </para>
        </tip>
        
        <section id="maven-clean-target">
            <title>clean</title>
            <para>Removes built artifacts and reduces the project to just the managed source files.</para>
<programlisting><![CDATA[                    
$ mvn clean
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Simple Bank App 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.4.1:clean (default-clean) @ simple-bank-war6 ---
[INFO] Deleting /home/user/proj/ejava-ws/exercises/simple-bank-war6/target
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.613s
[INFO] Finished at: Sat Apr 28 09:30:29 PDT 2012
[INFO] Final Memory: 2M/15M
[INFO] ------------------------------------------------------------------------


$ ls
pom.xml  src
]]></programlisting>
        </section>

        <section id="maven-test-target">
            <title>test</title>
            <para>Compiles source trees and performs unit tests</para>
<programlisting><![CDATA[                    
$ mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Simple Bank App 1.0-SNAPSHOT
...
INFO  [ejava.exercises.simple.bank.BankTest] (BankTest.java:testSetupBank:97)  -*** testSetupBank ***
DEBUG [org.jboss.resteasy.core.SynchronousDispatcher] (Log4jLogger.java:debug:60)  -PathInfo: /bank
DEBUG [ejava.exercises.simple.bank.rs.BankRS] (BankRS.java:getBank:39)  -GET http://localhost:9092/simple-bank-war6/bank
DEBUG [ejava.exercises.simple.bank.rs.BankRS] (BankRS.java:getBank:42)  -returning bank:
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
    <updated>2012-04-28T10:36:15.963-07:00</updated>
    <ns2:link>
        <href>http://localhost:9092/simple-bank-war6/bank</href>
        <rel>self</rel>
    </ns2:link>
    <totalAssets>0.0</totalAssets>
</ns2:bank>

DEBUG [org.jboss.resteasy.core.SynchronousDispatcher] (Log4jLogger.java:debug:60)  -PathInfo: /bank
DEBUG [ejava.exercises.simple.bank.rs.BankRS] (BankRS.java:updateBank:53)  -PUT http://localhost:9092/simple-bank-war6/bank
...

Results :

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.175s
[INFO] Finished at: Sat Apr 28 10:36:16 PDT 2012
[INFO] Final Memory: 5M/15M
[INFO] ------------------------------------------------------------------------
]]></programlisting>
        </section>

        <section id="maven-verify-target">
            <title>mvn pre-integration-test -DskipTests</title>
            <itemizedlist>
                <listitem><para>Builds and deploys the deployable artifact without testing.</para></listitem>
                <listitem><para>Prepare for integration-testing (within Eclipse)</para></listitem>
                <listitem><para>Can be used to test just the deployment</para></listitem>
            </itemizedlist>
<programlisting><![CDATA[
$ mvn pre-integration-test -DskipTests
...
[INFO] --- maven-war-plugin:2.1.1:war (default-war) @ simple-bank-war6 ---
[INFO] Packaging webapp
[INFO] Assembling webapp [simple-bank-war6] in [/home/user/proj/ejava-ws/exercises/simple-bank-war6/target/simple-bank-war6]
[INFO] Processing war project
[INFO] Copying webapp resources [/home/user/proj/ejava-ws/exercises/simple-bank-war6/src/main/webapp]
[INFO] Webapp assembled in [128 msecs]
[INFO] Building war: /home/user/proj/ejava-ws/exercises/simple-bank-war6/target/simple-bank-war6.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] 
[INFO] --- maven-jar-plugin:2.3.1:test-jar (default) @ simple-bank-war6 ---
[INFO] Building jar: /home/user/proj/ejava-ws/exercises/simple-bank-war6/target/simple-bank-war6-tests.jar
[INFO] 
[INFO] --- cargo-maven2-plugin:1.2.0:redeploy (cargo-deploy) @ simple-bank-war6 ---
[INFO] [DeployerRedeployMojo] Resolved container artifact org.codehaus.cargo:cargo-core-container-jboss:jar:1.2.0 for container jboss71x
...
Apr 28, 2012 1:16:46 PM org.xnio.Xnio <clinit>
INFO: XNIO Version 3.0.3.GA
Apr 28, 2012 1:16:46 PM org.xnio.nio.NioXnio <clinit>
INFO: XNIO NIO Implementation Version 3.0.3.GA
Apr 28, 2012 1:16:46 PM org.jboss.remoting3.EndpointImpl <clinit>
INFO: JBoss Remoting version 3.2.2.GA
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.757s
]]></programlisting>

        <tip>
            <para>If there is a problem with the remote deployment (i.e., cargo
            fails to deploy) -- check the server-side logs for the best source
            of information as to why the deployment failed.</para>
        </tip>
        </section>
        
        
        <section id="maven-integration-verify">
            <title>verify</title>
            <itemizedlist>
                <listitem><para>Deploys the artifact (pre-integration)</para></listitem>
                <listitem><para>Runs the integration tests (integration-test)</para></listitem>
                <listitem><para>Undeploys the application (post-integration-test)</para></listitem>
                <listitem><para>Reports the results (verify)</para></listitem>
            </itemizedlist>
<programlisting><![CDATA[                    
$ mvn verify
...
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] 
[INFO] --- cargo-maven2-plugin:1.2.0:undeploy (cargo-undeploy) @ simple-bank-war6 ---
[INFO] 
[INFO] --- maven-failsafe-plugin:2.9:verify (verify) @ simple-bank-war6 ---
[INFO] Failsafe report directory: /home/user/proj/ejava-ws/exercises/simple-bank-war6/target/failsafe-reports
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25.027s
]]></programlisting>
        </section>

        <section id="maven-install">
            <title>install</title>
            <para>Does all the work of <code>verify</code> and installs artifacts
               into local repository</para>
<programlisting><![CDATA[
INFO] --- maven-install-plugin:2.3.1:install (default-install) @ simple-bank-war6 ---
[INFO] Installing /home/user/proj/ejava-ws/exercises/simple-bank-war6/target/simple-bank-war6.war to /home/user/.m2/repository/ejava/exercises/simple-bank-war6/1.0-SNAPSHOT/simple-bank-war6-1.0-SNAPSHOT.war
[INFO] Installing /home/user/proj/ejava-ws/exercises/simple-bank-war6/pom.xml to /home/user/.m2/repository/ejava/exercises/simple-bank-war6/1.0-SNAPSHOT/simple-bank-war6-1.0-SNAPSHOT.pom
[INFO] Installing /home/user/proj/ejava-ws/exercises/simple-bank-war6/target/simple-bank-war6-tests.jar to /home/user/.m2/repository/ejava/exercises/simple-bank-war6/1.0-SNAPSHOT/simple-bank-war6-1.0-SNAPSHOT-tests.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23.314s
]]>
</programlisting>               
        </section>
    </chapter>  
      
    <chapter id="restdev-eclipse">
        <title>Using Eclipse with Maven Project</title>
        <para/>
        
        <section id="eclipse-load-project">
            <title>Load Project Into Eclipse</title>
            <para></para>
            <figure>
                <title>Import Project as an Existing Maven Project</title>
                <graphic scalefit="1" fileref="images/eclipse-import-maven.png"/>
            </figure>        
            <figure>
                <title>Imported Maven Project</title>
                <graphic scalefit="1" fileref="images/eclipse-imported-project.png"/>
            </figure>        
        </section>
      
        <section id="eclipse-unit-test">
            <title>Run Unit Tests with JUnit/Eclipse</title>
            <para>Eclipse can run a test from anywhere the package, test case (class),
                or testMethod (java method) can be expressed as a context. Just
                right click wherever you see it and pick RunAs-&gt;JUnit Test.</para>
            
            <figure>
                <title>Run As JUnit Test for Unit Test Folder</title>
                <graphic scalefit="1" fileref="images/eclipse-unit-test-runas.png"/>
            </figure>        
            <figure>
                <title>Unit Test Results</title>
                <graphic scalefit="1" fileref="images/eclipse-unit-test-result.png"/>
            </figure>        
            <figure>
                <title>Run Single Test</title>
                <graphic scalefit="1" fileref="images/eclipse-run-single-test.png"/>
            </figure>        
            <figure>
                <title>Inspect Error Result</title>
                <graphic scalefit="1" fileref="images/eclipse-single-test-result.png"/>
            </figure>        
            <tip>
                <title>All TestCases and testMethod()s Should Operate Autonomously</title>                
                <para>A good test design practice is to make all TestCases and
                    their testMethod()s able to run in any order and alone. Setup
                    methods should prepare the test environment such that every 
                    testMethod() always executes at a known starting point. Do
                    not design testMethod()s to run in a particular sequence.
                    That prevents an individual test from being executed alone. 
                </para>
            </tip>    
        </section>

        <section id="eclipse-deploy">
            <title>Deploy Application with Eclipse</title>
            <figure>
                <title>Setup <code>mvn deploy</code> Execution Environment</title>
                <graphic scalefit="1" fileref="images/eclipse-mvn-deploy-setup.png"/>
            </figure>
            <para>Create a re-usable Eclipse/Maven execution environment
                to deploy just the application without testing. Re-use the
                <code>mvn pre-integration</code> target we demonstrated earlier</para>
                    
            <figure>
                <title>Add Execution Environment to Favorites</title>
                <graphic scalefit="1" fileref="images/eclipse-mvn-deploy-favorites.png"/>
            </figure>        
            <para>Add the configuration to your RunAs favorites so that it 
                is easy to execute again.</para>
                
            <note>
                <para>Using {project_loc} for the base directory specification
                makes this environment resuable across all of your deployable
                projects -- however it must be executed with an artifact (e.g.,
                file or folder) in the active context of Eclipse.</para>
            </note>                
            
            
            <figure>
                <title>Deploy Application</title>
                <graphic scalefit="1" fileref="images/eclipse-mvn-deploy-exec.png"/>
            </figure>        
        </section>

        <section id="eclipse-all-tests">
            <title>Run Unit and Integration Tests within Eclipse</title>
            <itemizedlist>
                <listitem><para>Unit test code tests against local server</para></listitem>
                <listitem><para>Integration test code tests against server</para></listitem>
            </itemizedlist>
            <figure>
                <title></title>
                <graphic scalefit="1" fileref="images/eclipse-all-tests.png"/>
            </figure>        
        </section>

        
        <section id="eclipse-debug-local">
            <title>Debug Code Running Locally within Eclipse</title>
            <itemizedlist>
                <listitem><para>Set breakpoint in project code</para></listitem>
                <listitem><para>Launch debugger</para></listitem>
            </itemizedlist>
            <figure>
                <title>Setup and Launch Debug Session on Local Server</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-local-setup.png"/>
            </figure>        
            <figure>
                <title></title>
                <graphic scalefit="1" fileref="images/eclipse-debug-local-breakpoint.png"/>
            </figure>        
        </section>

        <section id="eclipse-debug-server">
            <title>Debug Code Running on the Server</title>
            
            
            <para>Remember the JBoss setup we did earlier</para>            
<programlisting><![CDATA[                 
$ grep 8787 ./jboss-as-7.1.1.Final/bin/standalone.conf

JAVA_OPTS="$JAVA_OPTS -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"   
]]></programlisting>

            <para>That produces the following output on the server</para>            
<programlisting><![CDATA[                 
...
=========================================================================

Listening for transport dt_socket at address: 8787
19:30:07,618 INFO  [org.jboss.modules] JBoss Modules version 1.1.1.GA
...
]]></programlisting>


            <figure>
                <title>Setup a Debug Configuration</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-server-setup1.png"/>
            </figure>        
            <figure>
                <title>Set Port# to Match JBoss Address</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-server-setup2.png"/>
            </figure>        
            <figure>
                <title>Make Reusable by Adding All Eclipse Projects to Classpath</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-server-setup3.png"/>
            </figure>
            
            <para>You can optionally run the client or debug the client. The choice
                does not impact what happens on the server.</para>        
            <figure>
                <title>Run Client to Trigger Server Actions</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-server-runclient.png"/>
            </figure>        
            
            <para>Eclipse has stopped execution on the server</para>
            <figure>
                <title>Eclipse Stops Server at Breakpoint</title>
                <graphic scalefit="1" fileref="images/eclipse-debug-server-breakpoint.png"/>
            </figure>        
            
            <note>
                <para>Deployed code to JBoss is being modified by JBoss in a way that
                   makes the class not exactly what Eclipse expects. However,
                   after an initial warning -- Eclipse seems to get things worked
                   out.
                 </para>
            </note>
        </section>
        
        <section id="eclipse-http-debug">
            <title>Monitoring Web Traffic</title>
            <para></para>

            <section id="eclipse-tcpdump">
                <title>Passive Monitoring with tcpdump (Linux)</title>
                
                
                <para>Remember the script we setup earlier</para>                
<programlisting><![CDATA[                 
$ cat /home/user/bin/tcp-dump 
#!/bin/sh

port=8080
if [ $# -eq 1 ]; then
    port=$1
fi
cmd="sudo tcpdump -A -s0 -i lo port $port"
echo $cmd
$cmd                
]]></programlisting>

                <para>Execute tcpdump</para>                
<programlisting><![CDATA[                 
$ ~/bin/tcp-dump 8080
sudo tcpdump -A -s0 -i lo port 8080
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes


GET /simple-bank-war6/bank HTTP/1.1
Accept: application/xml
Host: localhost:8080
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.3 (java 1.5)

...

Server: Apache-Coyote/1.1
Last-Modified: Sun, 29 Apr 2012 00:38:32 GMT
Content-Location: http://localhost:8080/simple-bank-war6/bank
Content-Type: application/xml
Content-Length: 408
Date: Sun, 29 Apr 2012 00:38:32 GMT

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:bank xmlns:ns2="http://dmv.ejava.info">
]]></programlisting>

            </section>
            
            <section id="eclipse-tcpmonitor">
                <title>Active Monitoring with TCP/IP Monitor</title>
                <para>This is a newer version of tcpmon capability that 
                    appears to be bundled with Eclipse.
                </para>
                <note>
                    <para>
                        I originally did not like the fact that the built-in 
                        Debug-&gt;TCP/IP Monitor tool did not show complete HTTP
                        headers -- only a summary. I (much) later figured out 
                        the solution was to change the monitor type from HTTP
                        to TCP/IP. With the TCP/IP mode -- it displays full
                        headers in the body section. -- you learn something 
                        every day...  
                    </para>
                </note>
                    <orderedlist>
                        <listitem><para>Edit the port property in 
                            <code>src/test/resources/test.properties</code>.
                            Assign it a value great than 9092. Logic in the unit test
                            depends on that.</para>
<programlisting><![CDATA[                 
$ cat src/test/resources/test.properties                          
host=${jboss.host}                                                                                                     
#port=9092                                                                                                              
port=9095                                                                                                               
servletContext=/${project.artifactId}                      
]]></programlisting>

<programlisting language="java"><![CDATA[                 
    @Before
    public void setUp() throws Exception {  
...
        if (bankURI.getPort()>=9092) {
            if (server == null) {
                server = new Server(9092);
...
            }
            server.start();
        }
    }
]]></programlisting>
                            </listitem>
                            <listitem><para>Use Window-&gt;Show View-&gt;Other...-&gt;Debug-&gt;TCP/IP Monitor 
                                to open up the TCP/IP Monitor panel.</para></listitem>
                            <listitem><para>Use Properties-&gt;Add... to setup a new monitor. 
                                The properties pop-up can be accessed with a right click on 
                                the main screen or a pull-down in the top right corner of 
                                the panel.</para>
                                <itemizedlist>
                                    <listitem><para>Local monitoring port: 9095</para></listitem>
                                    <listitem><para>Hostname: localhost</para></listitem>
                                    <listitem><para>Port: 9092</para></listitem>
                                    <listitem><para>Start monitor automatically</para></listitem>
                                </itemizedlist>
                                <figure>
                                    <title>Configure New TCP/IP Monitor</title>
                                    <graphic scalefit="1" fileref="images/eclipse-tcpmonitor-newmonitor.png"/>
                                </figure>        
                            </listitem>
                            <listitem><para>Run unit test (not integration tests -- they
                                use a different port)</para>
                                <figure>
                                    <title>TCP/IP Monitor Runtime View</title>
                                    <graphic scalefit="1" fileref="images/eclipse-tcpmonitor-execute.png"/>
                                </figure>        
                            </listitem>
                    </orderedlist>
                
            </section>
            

        </section>
    </chapter>  

    <chapter id="maven-it-profile">
        <title>Maven Integration (IT) Profile</title>
        <para/>
        
        <section id="it-activation">
            <title>IT Profile Activation
            <footnote><para><ulink url="http://maven.apache.org/guides/introduction/introduction-to-profiles.html">Introduction to (Maven) Build Profiles</ulink></para></footnote>
            </title>
            <para>Activated if <code>src/it</code> directory exists</para>
<programlisting language="xml"><![CDATA[                    
<profile>
    <id>IT</id>
    <activation>
        <file>
            <exists>${basedir}/src/it</exists>
        </file>
    </activation>
    ...
</profile>
]]></programlisting>
        </section>

        <section id="it-default-properties">
            <title>IT Default Property Values</title>
            <para></para>
<programlisting language="xml"><![CDATA[                    
<properties>
    <!-- these values should be in your .m2/settings.xml -->
    <jboss.host>localhost</jboss.host>
    <jboss.servlet.port>8080</jboss.servlet.port>
    <jboss.mgmt.host>localhost</jboss.mgmt.host>
    <jboss.mgmt.port>9999</jboss.mgmt.port>
</properties>
]]></programlisting>
        </section>

        <section id="it-cargo">
            <title>Cargo Deployer</title>
            <para>Deploys and undeploys JavaEE components to application server</para>
<programlisting language="xml"><![CDATA[                    
<!-- General approach to deploy and undeploy application  -->
<plugin>
    <groupId>org.codehaus.cargo</groupId>
    <artifactId>cargo-maven2-plugin</artifactId>
    <configuration>
        <container>
            <containerId>jboss71x</containerId>
            <type>remote</type>
        </container>
        <configuration>
            <type>runtime</type>
            <properties>
                <cargo.hostname>${jboss.mgmt.host}</cargo.hostname>
                <cargo.jboss.management.port>${jboss.mgmt.port}</cargo.jboss.management.port>
            </properties>
        </configuration>
    </configuration>
    
    <dependencies>
        <dependency>
            <groupId>org.jboss.as</groupId>
            <artifactId>jboss-as-controller-client</artifactId>
            <version>${jboss7.version}</version>
        </dependency>
    </dependencies>
    
    <executions>
       <execution> <!-- deploy to server-->
           <id>cargo-deploy</id> 
               <phase>pre-integration-test</phase>
           <goals>
               <goal>redeploy</goal>
           </goals>
       </execution>
        <execution> <!--  undeploy from server -->
            <id>cargo-undeploy</id>
            <phase>post-integration-test</phase>
            <goals>
                <goal>undeploy</goal>
            </goals>
        </execution>
    </executions>
</plugin>
]]></programlisting>
        </section>

        <section id="it-failsafe">
            <title>Failsafe Plugin</title>
            <itemizedlist>
                <listitem><para>Runs <code>src/it/java/**/*IT.java</code> JUnit tests during <code>integration-phase</code></para></listitem>
                <listitem><para>Evaluates results during <code>verify</code> phase</para></listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[                    
<!-- add failsafe plugin for IT testing -->
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-failsafe-plugin</artifactId>
    <configuration>
        <testSourceDirectory>src/it/java</testSourceDirectory>
        <includes>
            <include>**/*IT.java</include>
        </includes>
    </configuration>
    <executions>
        <execution> <!-- run the tests here -->
            <id>it</id> 
                <phase>integration-test</phase>
            <goals>
                <goal>integration-test</goal>
            </goals>
        </execution>
        <execution> <!--  delay failures to after undeploy -->
            <id>verify</id>
            <phase>post-integration-test</phase>
            <goals>
                <goal>verify</goal>
            </goals>
        </execution>
    </executions>
</plugin>
]]></programlisting>
            <note>
                <para></para>
                <itemizedlist>
                    <listitem><para>Surefire</para>
                        <itemizedlist>
                            <listitem><para>Automatically wired to run during test phase</para></listitem>
                            <listitem><para>Failure stops build</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Failsafe</para>
                        <itemizedlist>
                            <listitem><para>Manually wired to run tests during integration-test phase</para></listitem>
                            <listitem><para>Manually wired to evaluate results during verify phase</para></listitem>
                            <listitem><para>Delayed evaluation allows post-integration phase cleanup to occur before failing build</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </note>
        </section>


        <section id="it-build-helper">
            <title>Adding Custom Source Directories to Build</title>
            
            <itemizedlist>
                <listitem><para>Integration source artifacts were separated from 
                    the <code>src/test</code> tree</para></listitem>
                <listitem><para>New/custom <code>src/it</code>
                    directories must be added to the build</para></listitem>
                <listitem><para>This takes care of both Maven and Eclipse</para></listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[                    
<!-- add the custom src/it directories to maven build -->
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>build-helper-maven-plugin</artifactId>
    <executions>
       <execution>
           <id>add-it-tests</id>
           <phase>generate-test-sources</phase>
           <goals>
               <goal>add-test-source</goal>
           </goals>
           <configuration>
               <sources>
                   <source>src/it/java</source>
               </sources>
           </configuration>
       </execution>
       <execution>
           <id>add-it-resources</id>
           <phase>generate-test-resources</phase>
           <goals>
               <goal>add-test-resource</goal>
           </goals>
           <configuration>
               <resources>
                   <resource>
                       <directory>src/it/resources</directory>
                   </resource>
               </resources>
           </configuration>
       </execution>
    </executions>
</plugin>
]]></programlisting>
        </section>
    </chapter>  
    
    <chapter id="maven-dependency-management">
        <title>Maven Dependency Management</title>
        <itemizedlist>
            <listitem><para>Maven best practice to reduce number of locations where versions specified</para></listitem>
            <listitem><para>dependencyManagement used to centrally specify dependency versions</para></listitem>
            <listitem><para>dependencyManagement is passive -- won't add unspecified artifact to build</para></listitem>
            <listitem><para>dependencies is active -- will add artifact to build</para></listitem>
        </itemizedlist>
<programlisting language="xml"><![CDATA[                    
<properties>
...
    <slf4j.version>1.6.1</slf4j.version>
...
</properties>

<dependencyManagement>
    <dependencies>
        <!-- defines logging API used in examples -->
         <dependency>
             <groupId>org.slf4j</groupId>
             <artifactId>slf4j-api</artifactId>
             <version>${slf4j.version}</version>
         </dependency>
        ...
        
    </dependencies>
</dependencyManagement>

<dependencies>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <scope>compile</scope>
    </dependency>
   ...
    </dependency>
</dependencies>
]]></programlisting>
    </chapter>  

    <chapter id="maven-plugin-management">
        <title>Maven Plugin Management</title>
        <itemizedlist>
            <listitem><para>Maven best practice to reduce number of locations where versions specified</para></listitem>
            <listitem><para>Maven packaging types (e.g., packaging=jar) have many default plugins configured with undefined default versions</para></listitem>
            <listitem><para>pluginManagement used to centrally specify dependency versions and default configurations</para></listitem>
            <listitem><para>pluginManagement is passive -- won't add unspecified plugin to build</para></listitem>
            <listitem><para>plugins is active -- will add plugin to build</para></listitem>
        </itemizedlist>
<programlisting language="xml"><![CDATA[                    
<build>
    <pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.1</version>
                <configuration>
                   <source>1.6</source>
                   <target>1.6</target>
                </configuration>
            </plugin>
            ...
            
        </plugins>
    </pluginManagement>
</build>
]]></programlisting>
    </chapter>  

    <chapter id="maven-ignore-plugin">
        <title>Ignoring Unrecognized Maven Plugins</title>
        <itemizedlist>
            <listitem><para><code>m2e</code> plugin tries to understand all configured plugins</para></listitem>
            <listitem><para>Unrecognized/unignored plugins are reported as in error within pom</para></listitem>
            <listitem><para>Adding action=ignore causes Eclipse/m2e to ignore plugin and remove error</para></listitem>
        </itemizedlist>
<programlisting language="xml"><![CDATA[                    
<profile>
    <id>m2e</id>
    <activation>
        <property>
            <name>m2e.version</name>
        </property>
    </activation>
    <build>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e 
                   settings only. It has no influence on the Maven build itself.
                   -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>

                                <!-- add exclusions here -->

                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.jboss.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-jdocbook-plugin
                                        </artifactId>
                                        <versionRange>
                                            [2.1.2,)
                                        </versionRange>
                                        <goals>
                                            <goal>resources</goal>
                                            <goal>generate</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore/>
                                    </action>
                                </pluginExecution>
                                
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</profile>
]]></programlisting>
    </chapter>    
    
</book>

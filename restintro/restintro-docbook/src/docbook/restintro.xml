<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <title>Introduction to REST</title>
  </bookinfo>
  <preface id="preface">
    <title>Primary Sources</title>
    <orderedlist>
        <listitem><para>
        <emphasis>"REST in Practice; Hypermedia Systems Architecture"</emphasis>, 
        Jim Weber, Savas Parastatidis, Ian Robinson, 2010 
        <ulink url="http://shop.oreilly.com/product/9780596805838.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/REST-Practice-Hypermedia-Architecture-ebook/dp/B0046RERXY/ref=kinw_dp_ke?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596805829 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTful Web Services Cookbook"</emphasis>, 
        Subbu Allamaraju, 2010, 
        <ulink url="http://shop.oreilly.com/product/9780596801694.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/RESTful-Web-Services-Cookbook-ebook/dp/B0043D2ESQ/ref=kinw_dp_ke?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596801688 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTful Java with JAX-RS (Animal Guide)"</emphasis>, 
        Bill Burke, 2009, 
        <ulink url="http://shop.oreilly.com/product/9780596158057.do">O'Reilly</ulink>,
        <ulink url="http://www.amazon.com/RESTful-JAX-RS-Animal-Guide-ebook/dp/B0043D2ELI/ref=pd_sim_kstore_3?ie=UTF8&amp;m=AG56TWVU5XWC2">Amazon Kindle</ulink>
        ISBN 0596158041 
        </para></listitem>

        <listitem><para>
        <emphasis>"RESTEasy JAX-RS User's Manual"</emphasis>, JBoss/RedHat,
        <ulink url="http://docs.jboss.org/resteasy/docs/2.3.1.GA/userguide/html/index.html">RESTEasy Web Site</ulink>
        </para></listitem>
        <listitem><para>
        <emphasis>"Representational State Transfer",</emphasis>
        <ulink url="http://en.wikipedia.org/wiki/Representational_state_transfer">Wikipedia</ulink>
        </para>
        </listitem>
    </orderedlist>
  </preface>
  
  <toc/>
  
  <chapter id="crud-services">
    <title>CRUD Web Services</title>
    <subtitle>Using HTTP as an Application Protocol instead of a Transport Protocol</subtitle>
    <para>Treats the network and HTTP as an integral part of the 
    distributed system and not just a means to transport information</para>
    <para>Exposes how the Web is a big framework for building distributed systems</para>
    
    <section id="dmv-example-domain">
        <title>DMV Example Domain</title>
        <subtitle>Establishing Residency for ID or Driver License</subtitle>
        <itemizedlist>
            <listitem><para>Users fill out residency application</para></listitem>
            <listitem><para>A DMV clerk reviews application and reviews supporting residency documents</para></listitem>
            <listitem><para>DMV clerk accepts or rejects the supporting documentation</para></listitem>
            <listitem><para>Resident ID customers can advance to getting their photo taken</para></listitem>
            <listitem><para>Driver License customers can advance to photo and driver testing</para></listitem>
            <listitem><para>Sometimes driver candidates cannot pass and give up</para></listitem>
            <listitem><para>Customer's can chose from multiple photos or upload their own</para></listitem>
            <listitem><para>Fees are collected prior to handing over final documents</para></listitem>
        </itemizedlist>
        
        <figure>
            <title>DMV License/ID Process</title>
            <graphic fileref="/tmp/dmv-services-2.png"/>
        </figure>
    </section>
    
    <section id="modeling-resources">
        <title>Modeling Resources</title>
        <para/>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
    </section>
  </chapter>
  
  <chapter id="c">
    <title></title>
    <para/>
    
    <section id="s">
        <title></title>
        <para/>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
    </section>
  </chapter>
  
  <chapter id="web-methods">
    <title>Web Methods</title>
    <para></para>
    <section id="UniformInterface">
        <title>Uniform Interface</title>
        <para>All interaction with Resources follow a uniform interface
        with a defined set of method semantics</para>
        <variablelist>
            <varlistentry>
                <term><filename>OPTIONS</filename></term>
                <listitem><para>Returns a list of all methods supported for 
                a specified resource</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>*POST*</filename></term>
                <listitem><para>Create a new resource. Also used to tunnel
                other communications.</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>*GET*</filename></term>
                <listitem><para>Requests a representation for a 
                specified resource. This method should only read information
                and have no other impact.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>HEAD</filename></term>
                <listitem><para>Acts identical to GET except to only return
                metadata and not the representation.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>*PUT*</filename></term>
                <listitem><para>Updates the representation of a specified resource.
                Can create new resources when updating a collection resource.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>PATCH</filename></term>
                <listitem><para>Make a partial update to a specified resource.
                </para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>*DELETE*</filename></term>
                <listitem><para>Deletes a specified resource</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>TRACE</filename></term>
                <listitem><para>Echoes back a submitted request.</para></listitem>
            </varlistentry>        
            <varlistentry>
                <term><filename>CONNECT</filename></term>
                <listitem><para>Converts a request connection to a TCP/IP tunnel. 
                Primarily used to support HTTPS communication thru an unencrypted
                HTTP proxy.</para></listitem>
            </varlistentry>        
        </variablelist>
        <tip>
            <title>Use Methods for their Intended Purpose</title>
            <para>
            A developer is not prevented from mis-applying HTTP methods.
            However, not using resources and methods for their intended and 
            documented purpose will require unique effort on behalf of each 
            client to understand and will be inconsistent with the 
            network infrastructure that has been designed to work with the 
            WWW. 
            </para>
        </tip>
    </section>
    
    <section id="MethodSafety">
        <title>Method Safety</title>
        <variablelist>
           <varlistentry><term><filename>Safe</filename></term>
               <listitem><para>Intended for information retrieval and should
               not change the state of a resource. Any non-trivial change
               to a resource by any of these methods is discouraged.</para>
               <itemizedlist>
                    <listitem><para>OPTIONS</para></listitem>
                    <listitem><para>GET</para></listitem>
                    <listitem><para>HEAD</para></listitem>
                    <listitem><para>TRACE</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
           <varlistentry><term><filename>Unsafe</filename></term>
               <listitem><para>Intended for actions that cause side effects.
               Non-trivial consequences should be limited to the following
               methods.</para>
               <itemizedlist>
                    <listitem><para>DELETE</para></listitem>
                    <listitem><para>PUT</para></listitem>
                    <listitem><para>POST</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
        </variablelist>
        <tip>
            <title>Abide by Method Safety Rules</title>
            <para>
            A developer is not prevented from mis-applying HTTP methods.
            However, using methods that are expected to be safe 
            (e.g., <code>GET</code>) to make a change
            to a resource is in violation of the protocol and will make 
            your interface non-uniform. 
            </para>
        </tip>
    </section>

    <section id="MethodIdempotence">
        <title>Method Idempotence</title>
        <variablelist>
           <varlistentry><term><filename>Idempotent</filename></term>
               <listitem><para>Multiple invocations of an identical request
               will result in the same effect. The following methods should
               be designed to be idempotent.</para>
               <itemizedlist>
                    <listitem><para>DELETE</para></listitem>
                    <listitem><para>PUT</para></listitem>
                    <listitem><para>OPTIONS</para></listitem>
                    <listitem><para>GET</para></listitem>
                    <listitem><para>HEAD</para></listitem>
                    <listitem><para>TRACE</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
           <varlistentry><term><filename>non-Idempotent</filename></term>
               <listitem><para>Sending multilpe identical requests may 
               further impact state. Non-idempotent behavior should be 
               limited to the following method.</para>
               <itemizedlist>
                    <listitem><para>POST</para></listitem>
               </itemizedlist>
               </listitem>
           </varlistentry>
        </variablelist>
        <tip>
            <title>Strive for Idempotence</title>
            <para>
                Idempotent methods are much easier to manage. You want to 
                strive for idempotent behavior for both safe and un-safe 
                methods.
            </para>
        </tip>
    </section>
  </chapter>
  
    <chapter id="resources1">
        <title>Resources</title>
        <para/>
        <section id="identifying-resources">
            <title>Identifying Resources</title>
            <para/>
            <section id="noun-resources">
                <title>Resources for Nouns in Domain</title>
                <itemizedlist>
                    <listitem><para>Identify core nouns of the domain</para></listitem>
                    <listitem><para>Question nouns that just add small detail
                    core nouns and do not standalone</para></listitem>
                    <listitem><para>Question core noun properties that may have
                    inconsistent levels of volatility (i.e., some things change
                    more than others)</para></listitem>
                    <listitem><para>Leverage domain models</para></listitem>
                    <listitem><para>Leverage use cases</para></listitem>
                </itemizedlist>
                <note>
                    <para>Resource identification in REST is the most 
                    flexible part relative to methods, media types, 
                    uniform interface, etc.</para>
                </note>
                <para>Looking at our domain model, we start off with
                a few candidate resources and identify them with URIs.
                Contacts looks questionable since it is primarily a detailing
                type for Residents and Driver Licenses. Driver License was
                separated from Resident because of separation of concern and 
                reuse elsewhere.
                </para>
                <itemizedlist>
                    <listitem><para>Residents (<code>/residents</code>)</para></listitem>
                    <listitem><para>Contacts (<code>/contacts</code>)</para></listitem>
                    <listitem><para>Driver Licenses (<code>/drivers</code>)</para></listitem>
                </itemizedlist>
                <example id="resource-example">
                    <title>Resource Example</title>
                    <para>Removing contacts as a resource and adding the above 
                    relative URIs to the servlet context
                    (restinto-war6) and url-pattern (rest) for our REST resource
                    types result in the following more fully qualified relative URIs.</para>
            <programlisting language="text"><![CDATA[
/restintro-war6/rest/residents            

/restintro-war6/rest/drivers
]]></programlisting>
                </example>                
            </section>
            <section id="crud-resources">
                <title>Resources for Applying CRUD</title>
                <para>With the primary resource URIs assigned -- add resource
                URIs to address CRUD (create, delete, update, and delete). Use
                the proper HTTP Methods against these URIs to perform the 
                intended actions.</para>
                <itemizedlist>
                    <listitem><para>Create (<code>POST /(resource)</code>)</para></listitem>
                    <listitem><para>Update (<code>PUT /(resource)/{id}</code>)</para></listitem>
                    <listitem><para>Read (<code>GET /(resource)/{id}</code>)</para></listitem>
                    <listitem><para>Delete (<code>DELETE /(resource)/{id}</code>)</para></listitem>
                </itemizedlist>
                
                
                <para>Focusing just on Residents, we reuse the primary resource
                URI for creating new resources. We extend the collecton resource
                URI with the resident ID to address individual residents.</para>
                <itemizedlist>
                    <listitem><para>Create (<code>POST /restintro-war6/rest/residents</code>)</para></listitem>
                    <listitem><para>Update (<code>PUT /restintro-war6/rest/residents/{id}</code>)</para></listitem>
                    <listitem><para>Read (<code>GET /restintro-war6/rest/residents/{id}</code>)</para></listitem>
                    <listitem><para>Delete (<code>DELETE) /restintro-war6/rest/residents/{id}</code>)</para></listitem>
                </itemizedlist>
                
                <para>Jumping forward a bit, here are wire-level examples
                of the above resources at work</para>
                <example id="create-example">
                    <title>Create (POST) Example</title>
                    <itemizedlist>
                        <listitem><para>The client issues a POST request to the 
                        collection resource URI, with information specified using
                        form encoding.
                        </para></listitem>
                        <listitem><para>The server returns the XML representation 
                        of the resource with the server-assigned ID.
                        </para></listitem>
                    </itemizedlist>
<programlisting language="xml"><![CDATA[
POST /restintro-war6/rest/residents HTTP/1.1
Content-Length: 73
Content-Type: application/x-www-form-urlencoded; charset=ISO-8859-1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)

firstName=payton&lastName=manning&street=&city=Indianapolis&state=IN&zip=


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 423
Date: Sat, 10 Mar 2012 22:30:50 GMT

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resident xmlns:ns2="http://dmv.ejava.info">
    <id>9</id>
    <firstName>payton</firstName>
    <lastName>manning</lastName>
    <contacts>
        <contact>
            <city>Indianapolis</city>
            <name>Home</name>
            <state>IN</state>
            <street></street>
            <zip></zip>
        </contact>
    </contacts>
</ns2:resident>
]]></programlisting>
                </example>
                <example id="read-example">
                    <title>Read (GET) Example</title>
                    <itemizedlist>
                        <listitem><para>The client issues a GET request to the 
                        individual resource URI.
                        </para></listitem>
                        <listitem><para>The server returns the XML representation 
                        of the resource.
                        </para></listitem>
                    </itemizedlist>
<programlisting language="xml"><![CDATA[
GET /restintro-war6/rest/residents/9? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)

HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 423
Date: Sat, 10 Mar 2012 22:30:50 GMT

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resident xmlns:ns2="http://dmv.ejava.info">
    <id>9</id>
    <firstName>payton</firstName>
    <lastName>manning</lastName>
    <contacts>
        <contact>
            <city>Indianapolis</city>
            <name>Home</name>
            <state>IN</state>
            <street></street>
            <zip></zip>
        </contact>
    </contacts>
</ns2:resident>
]]></programlisting>
                </example>
                <example id="update-example">
                    <title>Update (PUT) Example</title>
                    <itemizedlist>
                        <listitem><para>The client issues a PUT request to the 
                        individual resource URI with the new XML representation.
                        </para></listitem>
                        <listitem><para>The server accepts the the update.
                        </para></listitem>
                    </itemizedlist>
<programlisting language="xml"><![CDATA[
PUT /restintro-war6/rest/residents/9? HTTP/1.1
Content-Type: application/xml
Content-Length: 423
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resident xmlns:ns2="http://dmv.ejava.info">
    <id>9</id>
    <firstName>payton</firstName>
    <lastName>manning</lastName>
    <contacts>
        <contact>
            <city>unknown</city>
            <name>Home</name>
            <state>unknown</state>
            <street></street>
            <zip></zip>
        </contact>
    </contacts>
</ns2:resident>

HTTP/1.1 204 No Content
Server: Apache-Coyote/1.1
Date: Sat, 10 Mar 2012 22:30:50 GMT
]]></programlisting>
                </example>
                <example id="delete-example">
                    <title>Delete (DELETE) Example</title>
                    <itemizedlist>
                        <listitem><para>The client issues a DELETE request to the 
                        individual resource URI.
                        </para></listitem>
                        <listitem><para>The server returns accepts the request
                        and returns a text value with the number of resources
                        actually deleted.
                        </para></listitem>
                    </itemizedlist>
<programlisting language="xml"><![CDATA[
DELETE /restintro-war6/rest/residents/9? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive

HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 1
Date: Sat, 10 Mar 2012 22:47:41 GMT

1
]]></programlisting>
                </example>
            </section>
            <section id="other-resources">
                <title>Resources for Additional Uses</title>
                <para>Aside form standard CRUD methods, additional resource URIs
                can/should be identified to address other pruposes.</para>

                <section id="function-resources">
                    <title>Resources for Applying Functions</title>
                    <para>Add resource URIs to address apply functions
                    to other resources</para>
                    <itemizedlist>
                        <listitem><para>Renew a driver license</para></listitem>
                        <listitem><para>Calculate total fees due</para></listitem>
                        <listitem><para>Calculate points acumulated</para></listitem>
                        <listitem><para>Compute distance between two addresses</para></listitem>
                    </itemizedlist>
                    <example id="function-example">
                        <title>Function Resource (/same) Example</title>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the child resource URI of the collection and 
                            passes two resident Ids as query args to ask
                            if the two residents are the same.
                            </para></listitem>
                            <listitem><para>The server evaluates the two
                            referenced residents and returns a text boolean
                            stating whether they are the same.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/same?p1=63&p2=64 HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)

HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 4
Date: Sun, 11 Mar 2012 01:34:07 GMT

true
]]></programlisting>
                    </example>
                    <note>
                        <title>REST Resources are more than just Entities</title>
                        <para>REST Resources can represent a wide array of
                        things in a system and is not just constrained to
                        nouns that are the target of CRUD.</para>
                    </note>
                </section>
                <section id="summary-resources">
                    <title>Resources for Getting Summaries</title>
                    <para>Add resource URIs that will allow clients to 
                    obtain collection summaries.</para>
                    <example id="summary-example">
                        <title>Summary Resource (/names) Example</title>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the child resource URI of the collection to ask
                            for a summary of resident names.
                            </para></listitem>
                            <listitem><para>The server evaluates returns a 
                            text list of names in lastName, firstName\n
                            format.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/names? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/plain
Content-Length: 70
Date: Sun, 11 Mar 2012 01:46:19 GMT

doe, shemp
doe, many
doe, mo
doe, jack
doe, larry
doe, moe
doe, curly
]]></programlisting>
                    </example>
                </section>
                <section id="conversion-resources">
                    <title>Resources for Conversion</title>
                    <para>Add resource URIs to convert resources (e.g.,
                    English to/from Metric Units, English to French language)
                    </para>
                </section>
            </section>
            <section id="resource-granularity">
                <title>Resource Granularity</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Not all entities have same granularity and importance</para></listitem>
                    <listitem><para>Chose representations that match client needs</para></listitem>
                    <listitem><para>Avoid representations that expand to whatever DB can provide</para></listitem>
                    <listitem><para>Consider</para>
                        <itemizedlist>
                            <listitem><para>Frequence of change</para></listitem>
                            <listitem><para>Cacheability</para></listitem>
                            <listitem><para>Mutability</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
        <section id="resource-patterns">
            <title>Resource Patterns</title>
            <para/>
            <section id="single-resources">
                <title>Single Resources</title>
                <para/>
                <example id="single-resource-examples">
                    <title>Single Resource Examples</title>
                    <para>As shown in the standard CRUD section above, 
                    individual resource URIs can be formed to act on a 
                    specific resource.</para>
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents/9? HTTP/1.1
PUT /restintro-war6/rest/residents/9? HTTP/1.1
DELETE /restintro-war6/rest/residents/9? HTTP/1.1
]]></programlisting>
                </example>
            </section>
            <section id="collection-resources">
                <title>Collection Resources</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Used to group resources where they</para>
                        <itemizedlist>
                            <listitem><para>Share same set of properties</para></listitem>
                            <listitem><para>Look similar to clients</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Used to create new members</para></listitem>
                    <listitem><para>Used to perfom same action on multiple members</para></listitem>
                    <listitem><para>Used for search/filter view of collection</para></listitem>
                    <listitem><para>Used for paginated views</para></listitem>
                </itemizedlist>
                    <example id="collection-example">
                        <title>Collection Resource Example</title>
                        <para>This example uses the collection resource URI
                        to create new members and to return sequences of 
                        members. POST is used for the create and GET is used 
                        for the read. The details of the POST was covered
                        in the standard CRUD section above.</para>
<programlisting language="java"><![CDATA[
POST /restintro-war6/rest/residents HTTP/1.1
]]></programlisting>
                        <itemizedlist>
                            <listitem><para>The client issues a GET request to 
                            the collection URI and passes a start and count
                            argument to control paging.
                            </para></listitem>
                            <listitem><para>The server returns up to 'count'
                            names starting with the 'start' index. The 
                            start, count, and size (number of elements) is 
                            returned as attributes of the collection.
                            </para></listitem>
                        </itemizedlist>                    
<programlisting language="java"><![CDATA[
GET /restintro-war6/rest/residents?start=1&count=3 HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 735
Date: Sun, 11 Mar 2012 02:12:30 GMT


<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <ns2:residents xmlns:ns2="http://dmv.ejava.info" count="3" size="3" start="1">
        <resident>
...
        </resident>
</ns2:residents>
]]></programlisting>
                    </example>
                <note>
                    <title>A Resource can be a Member of Multiple Collections</title>
                    <para>Collections are just a convenient way to refer to a 
                    group of resources all at once. A single resource can be
                    a member of multiple collection resources. For example, a 
                    DriverLicense could be a member of the suspended and 
                    fines-due collections.
                    </para>
                </note>
            </section>        
            <section id="composite-resources">
                <title>Composite Resources</title>
                <para/>
                <itemizedlist>
                    <listitem><para>Combines information from other resources</para></listitem>
                    <listitem><para>Can represent common views or set of criteria</para></listitem>
                    <listitem><para>Can reduce client/server round trips</para></listitem>
                    <listitem><para>Reduces visibility of resources (by chopping 
                    state across multiple representations)</para></listitem>
                    <listitem><para>Use should be limited to most important views</para></listitem>
                </itemizedlist>
                <example id="composite-resourcs">
                    <title>Composite Resource Example</title>
                    <para>Each resident resource additionally houses 
                    contact information for that resident rather than
                    being a separate resource.</para>
<programlisting language="xml"><![CDATA[
GET /restintro-war6/rest/residents/86? HTTP/1.1
Host: 127.0.0.5:8050
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.2 (java 1.5)


HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/xml
Content-Length: 380
Date: Sun, 11 Mar 2012 02:28:13 GMT
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:resident xmlns:ns2="http://dmv.ejava.info">
    <id>86</id>
    <firstName>cat</firstName>
    <lastName>inhat</lastName>
    <contacts>
        <contact>
            <city>Washington</city>
            <name>Home</name>
            <state>DC</state>
            <street>1600 Penn Ave, NW</street>
            <zip>20500</zip>
        </contact>
    </contacts>
</ns2:resident>
]]></programlisting>
                </example>
                <note>
                    <title>Avoid Overlapping Composite Views</title>
                    <para>Use of overlapping composite views may be convenient
                    for a particular client view but it can nueter the
                    use of a resource cache since representation changes 
                    can occur on alternate resource paths.</para>
                </note>
            </section>        
            <section id="controller-resources">
                <title>Controller/Delegate Resources</title>
                <para>Used to operate on more than one resource atomically. 
                Such as...</para>
                <itemizedlist>
                    <listitem><para>Eliminate duplicates</para></listitem>
                    <listitem><para>Merge contacts</para></listitem>
                </itemizedlist>
                <note>
                    <title>Avoid Tunneling Different Action Types thru Common URI</title>
                    <para>Do not use a single URI as a communication channel where
                    the parameters passed perform a wide variety of behavior.
                    Doing so will make side-effects difficult to track. 
<programlisting language="xml"><![CDATA[
GET /residents?op=changeName&lastName=smith
GET /residents?op=addAddress&name=work&city=baltimore
]]></programlisting>
                    </para>
                </note>
            </section>        
        </section>
    </chapter>
        
    <chapter id="methods">
        <title>Methods</title>
        <section id="get">
            <title>GET</title>
            <para>Obtain the representation of a resource</para>
<programlisting language="text"><![CDATA[
GET /residents/1
GET /residents/1/renewaldate
]]></programlisting>
            <note>
                <title>Use GET for Safe and Idempotent Operations</title>
                <para>Calling GET should not change the state of a resource.
                If you do, you should...</para>
                <itemizedlist>
                    <listitem><para>Turn off caching for the response with
                    <code>Cache-Control: no-cache</code> header</para></listitem>
                    <listitem><para>At least make the operations repeatable
                    (idempotent)</para></listitem>
                </itemizedlist>
            </note>
        </section>
        <section id="post">
            <title>POST</title>
            <para/>
            <itemizedlist>
                <listitem><para>Create a new resource thru a factory resource when the server decides the URI</para></listitem>
                <listitem><para>Modify one or more resources through a controller resource</para></listitem>
                <listitem><para>Perform operations with complex inputs</para></listitem>
                <listitem><para>Any unsafe or nonidempotent actions when lacking
                alternatives</para></listitem>
            </itemizedlist>
<programlisting language="text"><![CDATA[
]]></programlisting>
            <note>
                <title>All SOAP and XML-RPC Traffic is Tunneled thru POST</title>
                <para/>
            </note>
        </section>
        <section id="put">
            <title>PUT</title>
            <para/>
            <itemizedlist>
                <listitem><para>Create a new resource thru a factory resource when the client decides the URI</para></listitem>
                <listitem><para>Update an existing resource</para></listitem>
                <listitem><para></para></listitem>
                <listitem><para></para></listitem>
            </itemizedlist>
<programlisting language="text"><![CDATA[
]]></programlisting>
        </section>
        <section id="delete">
            <title>DELETE</title>
            <para>Delete a resource</para>
<programlisting language="text"><![CDATA[
]]></programlisting>
        </section>
        <section id="options">
            <title>OPTIONS</title>
            <para/>
<programlisting language="text"><![CDATA[
]]></programlisting>
        </section>
        <section id="head">
            <title>HEAD</title>
            <para/>
<programlisting language="text"><![CDATA[
]]></programlisting>
        </section>
    </chapter>
      
    <chapter id="web-caching">
        <title>Web Caching</title>
        <para/>
        <section id="creating-resources">
            <title>Creating Resources</title>
            <itemizedlist>
                <listitem><para>Return <code>201 Created</code> status</para></listitem>
                <listitem><para>Provide <code>Location</code> header with 
                URI of created resource</para></listitem>
                <listitem><para>Provide <code>Content-Location</code> header
                with URI of created resource if resource representation
                is provided in the response body.</para></listitem>
                <listitem><para>Provide <code>Last-Modified</code> and 
                <code>ETag</code> headers when supplying 
                <code>Content-Location</code> header.</para></listitem>
            </itemizedlist>
        </section>
    </chapter>
  
  
  
  
  <appendix id="terms">
    <title>Terms</title>
    <variablelist>
        <varlistentry>
            <term><filename>DELETE (Method)</filename></term>
            <listitem><para>An HTTP method that should delete
            a resource.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>GET (Method)</filename></term>
            <listitem><para>An HTTP method that should return a 
            representation of a resource.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>HEAD (Method)</filename></term>
            <listitem><para>An HTTP method very similar to a GET except that
            it only returns the headers associated with the GET and not
            the actual representation.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Idempotence</filename></term>
            <listitem><para></para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>(Method) Safety</filename></term>
            <listitem><para></para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>OPTIONS (Method)</filename></term>
            <listitem><para>An HTTP method that will list the methods
            implemented by the server and available for a specific resource.
            </para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>PUT (Method)</filename></term>
            <listitem><para>An HTTP method that should 
            set the representation of a resource -- including create
            in cases where the full identity is known by the client ahead
            of time.
            </para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>POST (Method)</filename></term>
            <listitem><para>An HTTP method that can create resources
            and perform opaque actions on resources.</para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Representation</filename></term>
            <listitem><para>An encapsulation of information (e.g., state) 
            encoded using a format (e.g. XML, JSON, HTML).
            </para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Resource</filename></term>
            <listitem><para>Anything that can be identified by a URI. A 
            resource can have multiple representations.
            </para></listitem>
        </varlistentry>        
        <varlistentry>
            <term><filename>RESTful</filename></term>
            <listitem><para>Conforming to REST constraints.
            </para></listitem>
        </varlistentry>
        
        <varlistentry>
            <term><filename>URI</filename></term>
            <listitem><para>Uniform Resource Identifier - Identifies a name or
            resource. URIs can be absolute (e.g.,http://myorg.org/readme.html) 
            or relative (e.g., /readme.html) path. URIs are more general than
            a URL. Not all URIs are URLs.
            </para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>URL</filename></term>
            <listitem><para>Uniform Resource Locator - Identifies how to
            find a resource (e.g., http://myorg.org/book/isbn/12345/pdf).
            All URLs are also URIs.
            </para></listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>URN</filename></term>
            <listitem><para>Uniform Resource Name - Identifies a resource's 
            name (e.g., urn:isbn:12345)</para></listitem>
        </varlistentry>        
    </variablelist>
  </appendix>  
</book>
